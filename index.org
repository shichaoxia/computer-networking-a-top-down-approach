#+TITLE: 计算机网络：自顶向下方法 题解
#+AUTHOR: Shi-Chao Xia
#+EMAIL: shichaoxia@outlook.com
#+OPTIONS: toc:t num:2 \n:t ^:{}
#+STARTUP: overview
#+PROPERTY: header-args :eval never-export

[[https://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198700.cw/index.html][Interactive Animations]]
[[https://gaia.cs.umass.edu/kurose_ross/wireshark.htm][Wireshark Labs]]

* 计算机网络和英特网
** 复习题
*** R1

    ”主机”和“端系统”之间有什么不同？列举几种不同类型的端系统。Web服务器是一种端系统吗？

    这两种说法是对同一种事物的不同表述。对于运行在计算机上的应用来说，该计算机就可以称之为主机（host）；而对于整个计算机网络，处于网络外围的设备可以称之为末端系统（end system）。

    #+begin_quote
    There is no difference. Throughout this text, the words “host” and “end system” are used interchangeably. End systems include PCs, workstations, Web servers, mail servers, PDAs, Internet-connected game consoles, etc.
    #+end_quote

*** R2

    “协议”一词常被用于描述外交关系。维基百科是怎样描述外交协议的？
    #+begin_quote
    A protocol is a rule which describes how an activity should be performed. Protocols specify the proper and generally accepted behavior in matters of state and diplomacy. Protocol is commonly described as a set of international courtesy rules. ---[[https://en.wikipedia.org/wiki/Protocol_(diplomacy)][Wikipedia]]
    #+end_quote

*** R3

    标准对于协议为什么重要？

    标准是每个人就各个协议及其作用取得的一致认识，使得人们就能够创造协同工作的系统和产品。

*** R4

    列出6种接入技术。将它们分类为住宅接入、公司接入或广域无线接入。

    | DSL over 电话线 | 住宅       |
    | 电缆 to HFC     | 住宅       |
    | FTTH            | 住宅、公司 |
    | 以太网          | 住宅、公司 |
    | Wi-Fi           | 住宅、公司 |
    | 3G、4G          | 广域       |

*** R5

    HFC传输速率在用户间是专用的还是共享的？在下行HFC信道中，可能出现碰撞吗？为什么？

    HFC带宽由用户共享。在下行信道中，所有数据包都来自一个源，即头端。因此，在下行信道中没有碰撞。

*** R6

    列出你所在城市中的可供使用的住宅接入技术。对于每种类型的接入方式，给出所宜称的下行速率、上行速率和每月的价格。

    | 接入方式 | 下行速率 | 上行速率 | 价格 |
    | FTTH     | 1000Mbps | 50Mbps   | ¥269 |

*** R7

    以太LAN的传输速率是多少？

    [[https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%BD%91#%E4%BB%A5%E5%A4%AA%E7%BD%91%E7%B1%BB%E5%9E%8B][10Mbps~10Gbps]]

*** R8

    能够运行以太网的一些物理媒体是什么？

    同轴电缆、双绞线、光纤。

*** R9

    拨号调制解调器、HFC、DSL和FTTH都用于住宅接入。对于这些技术，给出每种技术的传输速率的范围，并讨论它们的传输速率是共享的还是专用的。

    | 接入技术 | 传输速率 | 共享或专用 |
    | Dial-up  | 56kbps   | 专用       |
    | DSL      | 55Mbps   | 专用       |
    | HFC      | 42.8Mbps | 共享       |
    | FTTH     | Gbps     | 专用       |

*** R10

    描述今天最为流行的无线因特网接入技术。对它们进行比较和对照。

    | Wi-Fi+FTTX |
    | 4G/5G      |

*** R11

    假定在发送主机和接收主机间只有一台分组交换机。发送主机和交换机间以及交换机和接收主机间的传输速率分别是R_{1}和R_{2}。假设该交换机使用存储转发分组交换方式，发送一个长度为L的分组的端到端总时延是什么？（忽略排队时延、传播时延和处理时延。）

    \[ \frac{L}{R_1}+\frac{L}{R_2}. \]

*** R12

    与分组交换网络相比，电路交换网络有哪些优点？在电路交换网络中，TDM比FDM有哪些优点？

    与分组交换网络相比，电路交换网络预留了端系统沿路径所需要的资源，因此带宽是有保证的。FDM需要复杂的模拟硬件来将信号移动到适当的频段。

*** R13

    假定用户共享一条2Mbps链路。同时假定当每个用户传输时连续以1Mbps传输，但每个用户仅传输20%的时间。
    1. 当使用电路交换时，能够支持多少用户？
    2. 作为该题的后继问题，假定使用分组交换。为什么如果两个或更少的用户同时传输的话，在链路前面基本上没有排队时延？为什么如果3个用户同时传输的话，将有排队时延？
    3. 求出某指定用户正在传输的概率。
    4. 假定现在有3个用户。求出在任何给定的时间，所有3个用户在同时传输的概率。求出队列增长的时间比率。


    1. 使用电路交换时，能支持2（2Mbps/1Mbps）个并发用户。
    2. 2个用户同时传输要求链路的传输速率至少是2Mbps，而链路的传输速率正好是2Mbps，因此没有排队时延。3个用户同时传输要求链路的传输速率至少是3Mbps，因此有排队时延。
    3. 0.2
    4. 在任何给定时间3个用户同时传输的概率是8‱（0.2^3），队列增长的时间比率等于3个用户同时传输的概率。

*** R14

    为什么等级结构中级别相同的两个ISP通常互相对等？某IXP是如何挣钱的？

    #+begin_quote
    如果两个ISP不互相对等，那么当他们向对方发送流量时，他们必须通过供应商ISP来发送流量，从而必须向其支付流量费用。ISP通过直接对等可以减少通过供应商ISP的流量，从而节省费用。IXP可以向连接到自身的每个ISP收取相对较少的费用来赚钱，这些费用可能取决于发往或来自IXP的流量。
    #+end_quote

*** R15

    某些内容提供商构建了自己的网络。描述谷歌的网络。内容提供商构建这些网络的动机是什么？

    谷歌数据中心都经过专用的 TCP/IP 网络互联，该网络跨越全球，不过独立于公共因特网。 谷歌专用网络仅承载出入谷歌服务器的流量。谷歌专用网络通过与较低层 ISP 对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接，或者在 IXP 处与它们连接。 然而因为许多接入 ISP 仍然仅能通过第一层网络的传输到达，所以谷歌网络也与第一层 ISP 连接，并就与这些 ISP 交换的流量向它们付费。

    通过创建自己的网络，内谷提供商不仅减少了向顶层 ISP 支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。

*** R16

    考虑从某源主机跨越一条固定路由向某目的主机发送一分组。列出端到端时延中的时延组成成分。这些时延中的哪些是固定的，哪些是变化的？

    | 处理延时 | 固定 |
    | 排队延时 | 变化 |
    | 传输延时 | 固定 |
    | 传播延时 | 固定 |

*** R17

    访问配套Web网站上有关传输时延与传播时延的Java小程序。在速率、传播时延和可用的分组长度之中找出一种组合，使得该分组的第一个比特到达接收方之前发送方结束了传输。找出另一种组合，使得发送方完成传输之前，该分组的第一个比特到达了接收方。

    [[https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/transmission-vs-propogation-delay/transmission-propagation-delay-ch1/index.html][Transmission versus Propagation Delay]]

    | length | propagation | rate  | size | 传输延时 | 传播延时  |
    | 1000km | 2.8e8 m/s   | 1Mbps | 100B | 0.8ms    | 3.57143ms |
    | 10km   | 2.8e8 m/s   | 1Mbps | 100B | 0.8ms    | 0.03571ms |

*** R18

    一个长度为1000字节的分组经距离为2500km的链路传播，传播速率为2.5×10^{8}m/s并且传输速率为2Mbps，它需要用多长时间？更为一般地，一个长度为L的分组经距离为d的链路传播，传播速率为s并且传输速率为Rbps，它需要用多长时间？该时延与传输速率相关吗？

    d_{trans} = 1000B÷2Mbps = 4ms
    d_{prop} = 2500km÷2.5e8m/s = 10ms
    d = d_{trans} + d_{prop} = 14ms

    更一般地，\(\text{延时}= \frac{d}{s}+\frac{L}{R} \)，该延时与传输速率有关。

*** R19

    假定主机A要向主机B发送一个大文件。从主机A到主机B的路径上有3段链路，其速率分别为R_{1}=500kbps，R_{2}=2Mbps，R_{3}=1Mbps。
    1. 假定该网络中没有其他流最，该文件传送的吞吐量是多少？
    2. 假定该文件为4MB。用吞吐量除以文件长度，将该文件传输到主机B大致需要多长时间？
    3. 重复（a）和（b），只是这时凡减小到100kbps。


    1. 瓶颈链路R_{1}的传输速率决定了该路径的吞吐量是500kbps。
    2. 4MB/500kbps = 64s。
    3. 100kbps，4MB/100kbps = 320s。

*** R20

    假定端系统A要向端系统B发送一个大文件。在一个非常高的层次上，描述端系统怎样从该文件生成分组。当这些分组之一到达某分组交换机时，该交换机使用分组中的什么信息来决定将该分组转发到哪一条链路上？因特网中的分组交换为什么可以与驱车从一个城市到另一个城市并沿途询问方向相类比？

    终端系统A将大文件分成几块。它给每个块添加头，从而产生多个分组。每个分组的头部包括目的地端系统B的IP地址。分组交换机使用数据包中的目的地IP地址来决定出链路。询问走哪条路类似于一个分组询问它应该被转发到哪条出链路。

*** R21

    访问配套Web站点的排队和丢包Java小程序。最大发送速率和最小的传输速率是多少？对于这些速率，流量强度是多大？用这些速率运行该Java小程序并确定出现丢包要花费多长时间？然后第二次重复该实验，再次确定出现丢包花费多长时间。这些值有什么不同？为什么会有这种现象？

    [[https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/queuing-loss-applet/index.html][Queuing and Loss]]

    最大发送速率是500pkt/s，最小传输速率是350pkt/s，此时流量强度是500÷350≈1.43。第一次出现丢包花费9.7ms，第二次出现丢包花费8.5ms，之所以出现丢包花费的时间不同是因为两个包之间的间隔时间是不确定的。

*** R22

    列出一个层次能够执行的5个任务。这些任务中的一个（或两个）可能由两个（或更多）层次执行吗？

    5个任务分别是差错控制、流程控制、分段和重组、多路传输、建立连接，这些任务可以分布在不同的层次，例如链路层和应用层都有差错控制。

*** R23

    因特网协议栈中的5个层次有哪些？在这些层次中，每层的主要任务是什么？

    | 层次   | 任务                                                 |
    |--------+------------------------------------------------------|
    | 应用层 | 端系统中的应用程序与另一个端系统中的应用程序交换报文 |
    | 运输层 | 在应用程序端点之间传送报文段                         |
    | 网络层 | 将数据报从一台主机移动到另一台主机                   |
    | 链路层 | 将帧从一个节点移动到路径上的下一个节点               |
    | 物理层 | 将帧中的一个个比特从一个节点移动到下一个节点         |

*** R24

    什么是应用层报文？什么是运输层报文段？什么是网络层数据报？什么是链路层帧？

    | 应用层报文   | message  | 应用传输给另一个应用的数据                            |
    | 运输层报文   | segment  | 应用层报文+运输层首部（接收端应用信息、差错检测信息） |
    | 网络层数据报 | datagram | 运输层报文+网络层首部（源和目的端系统地址）           |
    | 链路层帧     | frame    | 网络层报文+链路层首部                                 |

*** R25

    路由器处理因特网协议栈中的哪些层次？链路层交换机处理的是哪些层次？主机处理的是哪些层次？

    | 路由器       | 网络层、链路层、物理层                 |
    | 链路层交换机 | 链路层、物理层                         |
    | 主机         | 应用层、运输层、网络层、链路层、物理层 |

*** R26

    病毒和蠕虫之间有什么不同？

    病毒（virus）是一种需要某种形式的用户交互来感染用户设备的恶意软件。蠕虫（worm）是一种无须任何明显用户交互就能进入设备的恶意软件。

*** R27

    描述如何产生一个僵尸网络，以及僵尸网络是怎样被用于DDoS攻击的。

    创建僵尸网络需要攻击者在一些应用程序或系统中找到漏洞（例如利用应用程序中可能存在的缓冲区溢出漏洞）。找到漏洞后，攻击者需要扫描有漏洞的主机，然后利用该特定的漏洞来破坏一系列的系统。作为僵尸网络一部分的系统都可以自动扫描其环境，并通过该漏洞进行传播。这种僵尸网络的一个重要特性是，僵尸网络的发起者可以远程控制并向僵尸网络中的所有节点发布命令。攻击者可以控制多个源并让每个源向目标发起DoS攻击（带宽泛洪或者连接泛洪）。

*** R28

    假定Alice和Bob经计算机网络互相发送分组。假定Trudy将自己安置在网络中，使得她能够俘获由Alice发送的所有分组，并发送她希望给Bob的东西；她也能够俘获由Bob发送的所有分组，并发送她希望给Alice的东西。列出在这种情况下Trudy能够做的某些恶意的事情。

    Trudy可以修改、伪造、丢弃或者重复发送Alice和Bob之间发送的分组。

** 习题
*** P1

    设计并描述在自动柜员机和银行的中央计算机之间使用的一种应用层协议。你的协议应当允许验证用户卡和口令，查询账目结算（这些都在中央计算机中进行维护），支取账目（即向用户支付钱）。你的协议实体应当能够处理取钱时账目中钱不够的常见问题。通过列出自动柜员机和银行中央计算机在报文传输和接收过程中交换的报文和采取的动作来定义你的协议。使用类似于图1-2所示的图，拟定在简单无差错取钱情况下该协议的操作。明确地阐述在该协议中关于底层端到端运输服务所做的假设。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:400px;
    [[./img/fig1-2.png]]

    #+begin_src plantuml :file img/ch1-p1.svg :cmdline -charset utf-8
      @startuml
      !theme vibrant
      participant 自动柜员机 as A
      participant 中央计算机 as C
      autoactivate on

      A->C: HELO <userid>
      note right: 检查用户
      return PASSWD

      A->C: PASSWD <pwd>
      note right: 检查密码
      return OK

      A->C: BALANCE
      note right: 查询余额
      return AMOUNT <amt>

      A->C: WITHDRAWL <amt>
      note right: 检查余额是否足够
      alt 余额足够
              C->A --: OK
      else 余额不足
              C->A --: ERR
      end

      A->C: BYE
      return BYE
      @enduml
    #+end_src

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:400px;
    #+RESULTS:
    [[file:img/ch1-p1.svg]]

*** P2

    式（1-1）给出了经传输速率为R的N段链路发送长度L的一个分组的端到端时延。对于经过N段链路一个接一个地发送P个这样的分组，一般化地表示出这个公式。

    \begin{align}
      d_{端到端} &= N\frac{L}{R} \tag{1-1} \\
    \end{align}

    在时刻 \( N\frac{L}{R} \)，第1个分组被目的地接收，此时第2个分组在最后的路由器；
    在时刻 \( \frac{L}{R}+N\frac{L}{R} \)，第2个分组被目的地接收，此时第3个分组在最后一个路由器；
    在时刻 \( 2\frac{L}{R}+N\frac{L}{R} \)，第3个分组被目的地接收，此时第4个分组在最后一个路由器；
    依此类推，在时刻 \( (P-1)\frac{L}{R}+N\frac{L}{R} \) 第P个分组被目的地接收。

*** P3

    考虑一个应用程序以稳定的速率传输数据（例如，发送方每k个时间单元产生一个N比特的数据单元，其中k较小且固定）。另外，当这个应用程序启动时，它将连续运行相当长的一段时间。回答下列问题，简要论证你的回答：
    1. 是分组交换网还是电路交换网更为适合这种应用？为什么？
    2. 假定使用了分组交换网，并且该网中的所有流量都来自如上所述的这种应用程序。此外，假定该应用程序数据传输速率的总和小于每条链路的各自容量。需要某种形式的拥塞控制吗？为什么？


    1. 电路交换网络将很适合该应用，因为该应用涉及到具有可预测的平滑带宽需求的长会话。由于传输率是已知的，而不是突发的，因此可以为每个应用会话保留带宽，而不会造成重大浪费。此外，建立和断开连接的开销成本可以在典型应用会话的漫长时间内摊销。
    2. 在最坏的情况下，所有的应用程序同时在一个或多个网络链接上传输。然而，由于每条链路都有足够的带宽来处理所有应用程序的数据速率之和，因此不会发生拥堵（很少排队）。鉴于这样充足的链接能力，网络不需要拥堵控制机制。

*** P4

    考虑在图1-13中的电路交换网。回想在每条链路上有4条链路，以顺时针方向标记四台交换机A、B、C和D。
    1. 在该网络中，任何时候能够进行同时连接的最大数量是多少？
    2. 假定所有连接位于交换机A和C之间。能够进行同时连接的最大数量是多少？
    3. 假定我们要在交换机A和C之间建立4条连接，在交换机B和D之间建立另外4条连接。我们能够让这些呼叫通过这4条链路建立路由以容纳所有8条连接吗？

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:300px;
       [[./img/fig1-13.png]]


    1. 交换机之间两两连接，最大数量是4×4=16。
    2. 4+4=8。
    3. 可以，如下图所示，A、C之间利用红色链路连接，B、D之间利用蓝色链路连接。

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:300px;
       [[./img/ch1-p4.png]]

*** P5

    回顾在1.4节中的车队的类比。假定传播速度为100km/h。
    1. 假定车队旅行150km：在一个收费站前面开始，通过第二个收费站，并且正好在第三个收费站后面结束。其端到端时延是多少？
    2. 重复（a），现在假定车队中有8辆汽车而不是10辆。


    1. 按题目的意思收费站之间间隔75km，一共需要经过3个收费站。在时刻47min（通过第一个收费站花费2min，行驶75km花费45min，）车队全部抵达第二个收费站，在时刻94min车队抵达第三个收费站，最后在时刻96min车队通过第三个收费站。
    2. 8辆车通过收费站需要8辆÷5辆/min=1.6min，因此总时间是90+1.6*3=94.8min。

*** P6

    这个习题开始探讨传播时延和传输时延，这是数据网络中的两个重要概念。考虑两台主机A和B由一条速率为Rbps的链路相连。假定这两台主机相隔m米，沿该链路的传播速率为s m/s。主机A向主机B发送长度L比特的分组。
    1. 用m和s来表示传播时延d_{prop}。
    2. 用L和R来确定该分组的传输时间d_{trans}。
    3. 忽略处理和排队时延，得出端到端时延的表达式。
    4. 假定主机A在时刻t=0开始传输该分组。在时刻t=d_{trans}，该分组的最后一个比特在什么地方？
    5. 假定d_{prop}大于d_{trans}。在时刻t=d_{trans}，该分组的第一个比特在何处？
    6. 假定d_{prop}小于d_{trans}。在时刻t=d_{trans}，该分组的第一个比特在何处？
    7. 假定s=2.5x10^{8}，L=120比特，R=56kbps。求出使d_{prop}等于d_{trans}的距离m。


    1. \[ d_\mathrm{prop} = m\mathrm{m} \div s\mathrm{m/s} = \frac{m}{s} \mathrm{s}. \]
    2. \[ d_\mathrm{trans} = L\mathrm{bit} \div R\mathrm{bps} = \frac LR \mathrm{s}. \]
    3. \[ d_\mathrm{端到端} = (\frac ms + \frac LR) \mathrm{s}. \]
    4. 该分组的最后一个比特被路由器推上链路。
    5. 链路。
    6. 目的主机。
    7. \[ \frac ms = \frac LR \implies \frac{m\mathrm{m}}{2.5×10^8\mathrm{m/s}} = \frac{120\mathrm{b}}{56\mathrm{kbps}} \implies m ≈ 536km.\]

*** P7

    在这个习题中，我们考虑从主机A向主机B通过分组交换网发送语音（VoIP）。主机A将模拟语音转换为传输中的64kbps数字比特流。然后主机A将这些比特分为56字节的分组。A和B之间有一条链路：它的传输速率是2Mbps，传播时延是1Oms。一旦A收集了一个分组，就将它向主机B发送。一旦主机B接收到一个完整的分组，它将该分组的比特转换成模拟信号。从比特产生（从位于主机A的初始模拟信号起）的时刻起，到该比特被解码（在主机B上作为模拟信号的一部分），花了多少时间？

    分组由模拟语音转换为数字比特流的时间为56B÷64kbps=7ms；
    传输时间为56B÷2Mbps=0.224ms；
    总时间为7+0.224+10=17.224ms。

*** P8

    假定用户共享一条3Mbps的链路。又设每个用户传输时要求150kbps，但是每个用户仅有10%的时间传输。（参见1.3节中关于“分组交换与电路交换的对比”的讨论。）
    1. 当使用电路交换时，能够支持多少用户？
    2. 对于本习题的后续小题，假定使用分组交换。求出某给定用户正在传输的概率。
    3. 假定有120个用户。求出在任何给定时刻，实际有n个用户在同时传输的概率。（提示：使用二项式分布。）
    4. 求出有21个或更多用户同时传输的概率。


    1. 能够支持3Mbps÷150kbps=20个用户。
    2. p=0.1。
    3. \[ \binom{120}{n}p^n(1-p)^{120-n}. \]
    4. \-

       \[ 1 - \sum_{n=0}^{20} \binom{120}{n}p^n(1-p)^{120-n} ≈ 0.008. \]

       #+begin_src R :exports both
         1 - pbinom(20, size=120, prob=0.1)
       #+end_src

       #+RESULTS:
       : 0.00794119224839696

*** P9

    考虑在1.3节”分组交换与电路交换的对比”的讨论中，给出了一个具有一条1Mbps链路的例子。用户在忙时以100kbps速率产生数据，但忙时仅以p=0.1的概率产生数据。假定用1Gbps链路替代1Mbps的链路。
    1. 当采用电路交换技术时，能被同时支持的最大用户数量N是多少？
    2. 现在考虑分组交换和有M个用户的情况。给出多于N用户发送数据的概率公式（用p、M、N表示）。


    1. N=1Gbps÷100kbps=10000.
    2. \[ \sum_{k=N+1}^M \binom{M}{k}p^k(1-p)^{M-k}. \]

*** P10

    考虑一个长度为L的分组从端系统A开始，经3段链路传送到目的端系统。令d_{i}、s_{i} 和R_{i}，表示链路i的长度、传播速度和传输速率（i=1，2，3）。该分组交换机对每个分组的时延为d_{proc}。假定没有排队时延，用d_{i}、s_{i}、R_{i}（i=1，2，3）和L表示，该分组总的端到端时延是什么？现在假定该分组是1500字节，在所有3条链路上的传播时延是2.5×10^{8}m/s，所有3条链路的传输速率是2Mbps，分组交换机的处理时延是3ms，第一段链路的长度是5000km，第二段链路的长度是4000km，并且最后一段链路的长度是1000km。对于这些值，该端到端时延为多少？

    \begin{align*}
      d_{端到端} &= \sum_{i=1}^3 (\frac{d_i}{s_i} + \frac{L}{R_i}) + 2×d_{proc} \\
      &= 3×(1500B÷2Mbps)+2×3ms+(5000+4000+1000km)÷2.5×10^8m/s \\
      &= 64ms
    \end{align*}

*** P11

    在上述习题中，假定R_{1}=R_{2}=R_{3}=R且d_{proc}=0。进一步假定该分组交换机不存储转发分组，而是在等待分组到达前立即传输它收到的每个比特。这时端到端时延为多少?

    \begin{equation*}
      d_{端到端} = \frac LR + \sum_{i=1}^3 (\frac{d_i}{s_i})
      = 46ms.
    \end{equation*}

*** P12

    一台分组交换机接收一个分组并决定该分组应当转发的出链路。当某分组到达时，另一个分组正在该出链路上被发送到一半，还有4个其他分组正等待传输。这些分组以到达的次序传输。假定所有分组是1500字节并且链路速率是2Mbps。该分组的排队时延是多少？在更一般的情况下，当所有分组的长度是L，传输速率是R，当前正在传输的分组已经传输了x比特，并且已经在队列中有n个分组。其排队时延是多少？

    \begin{align*}
      d_{queue} & = \frac{nL+(L-x)}{R} \\
      & = \frac{4.5×1500B}{2Mbps} \\
      & = 27ms
    \end{align*}

*** P13

    1. 假定有N个分组同时到达一条当前没有分组传输或排队的链路。每个分组长为L，链路传输速率为R。对N个分组而言。其平均排队时延是多少？
    2. 现在假定每隔LN/R秒有N个分组同时到达链路。一个分组的平均排队时延是多少？


    1. 第1个分组的排队时延是0，第二个分组是L/R，第n个分组是(n-1)L/R，因此平均排队时延是

       \begin{align*}
         & (\frac LR + 2\frac LR + \dotsb + (N-1)\frac LR) \div N \\
         = & \frac{LR}{N}(1+2+ \dotsb + (N-1)) \\
         = & (N-1)\frac{L}{2R}.
       \end{align*}

    2. N个L长的分组总的传输时间是NL/R，因此每隔LN/R秒有N个分组同时到达时队列是空的，因此平均排队时延与a相同。

*** P14

    考虑某路由器缓存中的排队时延。令I表示流量强度；即I=La/R。假定排队时延的形式为IL/R(1-I)，其中I<1.
    1. 写出总时延即排队时延加上传输时延的公式。
    2. 以L/R为函数画出总时延的图。


    1. \[ d = \frac{IL}{R(1-I)} +\frac LR = \frac LR\frac{1}{1-I}. \]
    2. 令x=L/R，总时延为

       \begin{align*}
         d & = \frac{x}{1-ax}
         = \begin{cases}
           0, & \text{if $x=0$} \\
           +\infty, & \text{if x$\to \frac 1a$}
         \end{cases}
       \end{align*}

       #+begin_src R :results file graphics :file ch1-p13.png :output-dir img/ :exports both
         delay <- function(a) {
           function(x) 1/(1-a*x)
         }

         coes <- c(0.5, 1, 2, 2.5)
         cols <- c("yellow", "black", "red", "blue")

         for (i in 1:length(coes)) {
           f <- delay(coes[i])
           add <- if( i == 1 ) FALSE else TRUE
           curve(f, 0, 2,
                 ylim = c(0, 20),
                 col = cols[i],
                 xlab = "L/R",
                 ylab = "delay",
                 xaxs = "i",
                 yaxs = "i",
                 add = add)
         }

         lgd <- Map(function(x) {
           paste0("a=", x, collapse = "")
         }, coes)

         legend("bottomright",
                legend = lgd,
                col = cols,
                lwd = 3)
       #+end_src

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:400px;
       #+RESULTS:
       [[file:img/ch1-p13.png]]

*** P15

    令a表示在一条链路上分组的到达率（以分组/秒计），令μ表示一条链路上分组的传输率（以分组/秒计）。基于上述习题中推导出的总时延公式（即排队时延加传输时延），推导出以a和μ，表示的总时延公式。

    \begin{align*}
      μ & = \frac RL, \\
      d & = \frac{L/R}{1-I}
      = \frac{L/R}{1-aL/R}
      = \frac{1/μ}{1-a/μ}
      = \frac{1}{μ-a}.
    \end{align*}

*** P16

    考虑一台路由器缓存前面的一条出链路。在这个习题中，将使用李特尔（Little）公式，这是排队论中的一个著名公式。令N表示在缓存中的分组加上被传输的分组的平均数。令a表示到达该链路的分组速率。令d表示一个分组历经的平均总时延（即排队时延加传输时延）。李特尔公式是N=a×d。假定该缓存平均包含10个分组，并且平均分组排队时延是10ms。该链路的传输速率是100分组/秒。使用李特尔公式，在没有丢包的情况下，平均分组到达率是多少？

    \begin{align*}
      &         &N         &= a\times d \\
      &\implies &(10+1)pkg &= a\times (d_{queue} + d_{trans}) \\
      &\implies &11pkg     &= a\times (10ms + 1pkg÷100pkg/s) \\
      &\implies &a         &= 550pkg/s
    \end{align*}

*** P17

    1. 对于不同的处理速率、传输速率和传播时延，给出1.4.3节中式（1-2）的一般表达式。
    2. 重复（a），不过此时假定在每个节点有平均排队时延d_{queue}。


    1. \-
       \begin{align*}
         d_{end-end} &= N(d_{proc}+d_{trans}+d_{prop}) \tag{1-2} \\
         &= \sum_{i=1}^N N(d_{proc_i}+d_{trans_i}+d_{prop_i}+d_{queue_i})
       \end{align*}

*** P18

    在一天的3个不同的小时内，在同一个大陆上的源和目的地之间执行Traceroule。
    1. 在这3个小时的每个小时中，求出往返时延的均值和方差。
    2. 在这3个小时的每个小时中，求出路径上的路由器数量。在这些时段中，该路径发生变化了吗？
    3. 试图根据源到目的地Traceroule分组通过的情况，辨明ISP网络的数量。具有类似名字和/或类似的IP地址的路由器应当被认为是同一个ISP的一部分。在你的实验中，在相邻的ISP间的对等接口处出现最大的时延了吗？
    4. 对位于不同大陆上的源和目的地重复上述内容。比较大陆内部和大陆之间的这些结果。


    1. 可用节点：

       | 位置                         | 名称                  | 站点                                              |
       |------------------------------+-----------------------+---------------------------------------------------|
       | 美国新泽西州普林斯顿         | Princeton University  | https://www.net.princeton.edu/traceroute.html     |
       | 美国加利福尼亚州旧金山       | ARPNetworks           | http://4or6.com/traceroute.php                    |
       | 法国大东部大区斯特拉斯堡     | SDV                   | http://traceroute.sdv.fr/index.php?v6=0           |
       | 德国萨克森自由州法尔肯施泰因 | Insode                | http://traceroute.insode.de/                      |
       | 德国下萨克森州不伦瑞克       | Gaertner Datensysteme | https://noc.gaertner.de/cgi-bin/looking-glass.cgi |

       美国加利福尼亚州旧金山ARPNetworks → 美国新泽西州普林斯Princeton University

       + \-
         #+begin_example
           traceroute to www.net.princeton.edu (128.112.128.55), 30 hops max, 60 byte packets
           1  104.236.128.253 (104.236.128.253)  4.121 ms  4.103 ms  4.105 ms
           2  138.197.248.222 (138.197.248.222)  1.258 ms  1.367 ms  1.359 ms
           3  ae-13.r06.plalca01.us.bb.gin.ntt.net (157.238.179.217)  2.317 ms  2.403 ms  2.148 ms
           4  ae-12.r25.snjsca04.us.bb.gin.ntt.net (129.250.4.44)  7.778 ms  7.808 ms  7.809 ms
           5  ae-5.r24.snjsca04.us.bb.gin.ntt.net (129.250.3.146)  2.507 ms  2.468 ms  2.498 ms
           6  ae-8.r23.chcgil09.us.bb.gin.ntt.net (129.250.5.16)  52.092 ms  51.157 ms  51.059 ms
           7  ae-0.r22.chcgil09.us.bb.gin.ntt.net (129.250.2.26)  50.564 ms  50.807 ms  50.929 ms
           8  ae-6.r21.nwrknj03.us.bb.gin.ntt.net (129.250.2.167)  69.739 ms  69.536 ms  69.524 ms
           9  ae-2.r00.nwrknj03.us.bb.gin.ntt.net (129.250.6.87)  66.337 ms  66.294 ms  66.216 ms
           10  ae-0.njedge.nwrknj03.us.bb.gin.ntt.net (168.143.228.205)  66.672 ms  66.261 ms  66.126 ms
           11  130.156.34.246 (130.156.34.246)  68.722 ms  68.612 ms  68.643 ms
           12  130.156.251.50 (130.156.251.50)  89.881 ms  78.395 ms  78.111 ms
           13  fw-border-hpcrc-router.princeton.edu (204.153.48.254)  71.115 ms  71.005 ms  70.634 ms
           14  rtr-core-west-router.princeton.edu (128.112.12.13)  70.578 ms  70.509 ms  70.449 ms
           15  core-ns-router.princeton.edu (128.112.12.230)  71.103 ms  71.216 ms  71.562 ms
           16  www.net.princeton.edu (128.112.128.55)  70.354 ms  70.395 ms  70.342 ms
         #+end_example

         #+begin_src R :results output :exports both
           d <- c(70.354, 70.395, 70.342)
           print((paste("均值", mean(d))))
           print((paste("方差", var(d))))
           print((paste("标准差", sd(d))))
         #+end_src

         #+RESULTS:
         : [1] "均值 70.3636666666667"
         : [1] "方差 0.000772333333333243"
         : [1] "标准差 0.0277908857961247"
       + \-
         #+begin_example
           traceroute to www.net.princeton.edu (128.112.128.55), 30 hops max, 60 byte packets
           1  104.236.128.253 (104.236.128.253)  0.508 ms  0.465 ms  0.440 ms
           2  138.197.248.222 (138.197.248.222)  0.513 ms  0.497 ms  0.476 ms
           3  ae-13.r06.plalca01.us.bb.gin.ntt.net (157.238.179.217)  2.067 ms  2.165 ms  2.324 ms
           4  ae-12.r25.snjsca04.us.bb.gin.ntt.net (129.250.4.44)  1.834 ms  1.812 ms  1.794 ms
           5  ae-5.r24.snjsca04.us.bb.gin.ntt.net (129.250.3.146)  3.482 ms  3.507 ms  3.434 ms
           6  ae-8.r23.chcgil09.us.bb.gin.ntt.net (129.250.5.16)  50.558 ms  50.923 ms  50.793 ms
           7  ae-0.r22.chcgil09.us.bb.gin.ntt.net (129.250.2.26)  51.202 ms  50.658 ms  50.503 ms
           8  ae-6.r21.nwrknj03.us.bb.gin.ntt.net (129.250.2.167)  67.456 ms  67.428 ms  67.265 ms
           9  ae-2.r00.nwrknj03.us.bb.gin.ntt.net (129.250.6.87)  66.237 ms  66.249 ms  66.137 ms
           10  ae-0.njedge.nwrknj03.us.bb.gin.ntt.net (168.143.228.205)  66.594 ms  66.543 ms  66.521 ms
           11  130.156.34.246 (130.156.34.246)  68.712 ms  68.749 ms  68.718 ms
           12  130.156.251.50 (130.156.251.50)  69.315 ms  69.449 ms  69.552 ms
           13  fw-border-hpcrc-router.princeton.edu (204.153.48.254)  70.530 ms  70.461 ms  70.463 ms
           14  rtr-core-west-router.princeton.edu (128.112.12.13)  70.571 ms  70.332 ms  70.351 ms
           15  core-ns-router.princeton.edu (128.112.12.230)  71.465 ms  71.273 ms  71.292 ms
           16  www.net.princeton.edu (128.112.128.55)  70.436 ms  70.547 ms  70.345 ms
         #+end_example

         #+begin_src R :results output :exports both
           d <- c(70.436, 70.547, 70.345)
           print((paste("均值", mean(d))))
           print((paste("方差", var(d))))
           print((paste("标准差", sd(d))))
         #+end_src

         #+RESULTS:
         : [1] "均值 70.4426666666667"
         : [1] "方差 0.0102343333333331"
         : [1] "标准差 0.10116488191726"
       + \-
         #+begin_example
           traceroute to www.net.princeton.edu (128.112.128.55), 30 hops max, 60 byte packets
           1  104.236.128.253 (104.236.128.253)  0.501 ms  0.456 ms  0.442 ms
           2  138.197.248.222 (138.197.248.222)  0.493 ms  0.479 ms  0.459 ms
           3  ae-13.r06.plalca01.us.bb.gin.ntt.net (157.238.179.217)  1.512 ms  1.519 ms  1.546 ms
           4  ae-12.r25.snjsca04.us.bb.gin.ntt.net (129.250.4.44)  4.263 ms  4.271 ms  4.159 ms
           5  ae-5.r24.snjsca04.us.bb.gin.ntt.net (129.250.3.146)  2.807 ms  2.837 ms  2.828 ms            (ref:5)
           6  ae-8.r23.chcgil09.us.bb.gin.ntt.net (129.250.5.16)  50.735 ms  50.298 ms  50.237 ms          (ref:6)
           7  ae-0.r22.chcgil09.us.bb.gin.ntt.net (129.250.2.26)  50.988 ms  50.477 ms  50.460 ms          (ref:7)
           8  ae-6.r21.nwrknj03.us.bb.gin.ntt.net (129.250.2.167)  67.766 ms  67.371 ms  68.140 ms         (ref:8)
           9  ae-2.r00.nwrknj03.us.bb.gin.ntt.net (129.250.6.87)  66.668 ms  66.636 ms  66.736 ms
           10  ae-0.njedge.nwrknj03.us.bb.gin.ntt.net (168.143.228.205)  66.287 ms  66.326 ms  66.209 ms
           11  130.156.34.246 (130.156.34.246)  68.728 ms  68.656 ms  68.651 ms
           12  130.156.251.50 (130.156.251.50)  69.353 ms  69.663 ms  69.476 ms
           13  fw-border-hpcrc-router.princeton.edu (204.153.48.254)  70.573 ms  70.608 ms  70.592 ms
           14  rtr-core-west-router.princeton.edu (128.112.12.13)  70.521 ms  70.554 ms  70.641 ms
           15  core-ns-router.princeton.edu (128.112.12.230)  71.360 ms  71.570 ms  71.295 ms
           16  www.net.princeton.edu (128.112.128.55)  70.649 ms  70.457 ms  70.280 ms
         #+end_example

         #+begin_src R :results output :exports both
           d <- c(70.649, 70.457, 70.280)
           print((paste("均值", mean(d))))
           print((paste("方差", var(d))))
           print((paste("标准差", sd(d))))
         #+end_src

         #+RESULTS:
         : [1] "均值 70.462"
         : [1] "方差 0.034059"
         : [1] "标准差 0.18455080601287"

    2. 路由器数量为15，路径没有发生变化。

    3. \-
       | 以主机名和IP的相似程度可以把路由器分为4组 |
       |-------------------------------------------|
       | 1 2                                       |
       | 3 4 5 6 7 8 9 10                          |
       | 11 12                                     |
       | 13 14 15                                  |

       最大时延不仅出现在了在相邻的ISP间的对等接口处，还出现在似乎是同一ISP的路由器[[(5)][5]]、[[(6)][6]]和[[(7)][7]]、[[(8)][8]]之间。

    4. 法国大东部大区斯特拉斯堡SDV → 美国新泽西州普林斯顿Princeton University

       #+begin_example
         traceroute to www.net.princeton.edu (128.112.128.55), 30 hops max, 60 byte packets
          1  vsn0057.vs.mass.systems (10.92.36.120)  0.025 ms  0.010 ms  0.014 ms
          2  ae3-u100.sxb1-cr-nunki.bb.gdinf.net (87.230.112.2)  2.797 ms  2.772 ms  0.299 ms
          3  ae73.edge1.Milan1.Level3.net (212.73.201.217)  15.998 ms  15.973 ms  15.965 ms
          4  Telia-level3-Milan1.Level3.net (4.68.38.238)  9.275 ms  9.547 ms  9.532 ms
          5  prs-bb1-link.ip.twelve99.net (62.115.135.224)  110.670 ms  110.417 ms  110.636 ms
          6  ash-bb2-link.ip.twelve99.net (62.115.112.242)  105.691 ms  106.353 ms  105.810 ms
          7  rest-b1-link.ip.twelve99.net (62.115.125.151)  106.451 ms ash-b1-link.ip.twelve99.net (62.115.143.121)  106.460 ms  106.552 ms
          8  rest-bb1-link.ip.twelve99.net (62.115.125.48)  110.643 ms rest-bb1-link.ip.twelve99.net (62.115.125.38)  109.223 ms rest-bb1-link.ip.twelve99.net (62.115.123.40)  109.115 ms
          9  phm-b2-link.ip.twelve99.net (62.115.121.157)  109.214 ms  110.326 ms  110.327 ms
         10  njedge-svc069531-ic354798.ip.twelve99-cust.net (62.115.189.197)  110.832 ms  109.395 ms  110.291 ms
         11  130.156.33.65 (130.156.33.65)  110.255 ms  110.180 ms  110.145 ms
         12  130.156.252.58 (130.156.252.58)  110.491 ms  110.473 ms  110.443 ms
         13  fw-border-87-router.princeton.edu (204.153.48.2)  112.207 ms  111.945 ms  111.794 ms
         14  rtr-core-east-router.princeton.edu (128.112.12.9)  112.226 ms  112.531 ms  112.316 ms
         15  core-ns-router.princeton.edu (128.112.12.226)  112.260 ms  112.766 ms  112.357 ms
         16  www.net.princeton.edu (128.112.128.55)  112.287 ms  111.335 ms  112.296 ms
       #+end_example

       + \-
         #+begin_src R :results output :exports both
           d <- c(112.287, 111.335, 112.296)
           print((paste("均值", mean(d))))
           print((paste("方差", var(d))))
           print((paste("标准差", sd(d))))
         #+end_src

         #+RESULTS:
         : [1] "均值 111.972666666667"
         : [1] "方差 0.304984333333341"
         : [1] "标准差 0.552253866743676"

       + 路由器的数量为15。

       + \-
         | ISP | 路由器       |
         |-----+--------------|
         |   1 | 1            |
         |   2 | 2            |
         |   3 | 3 4          |
         |   4 | 5 6 7 8 9 10 |
         |   5 | 11 12        |
         |   6 | 13 14 15     |

         这次最大时延确实是出现在相邻的ISP间的对等接口处。

*** P19

    1. 访问站点www.traceroute.org，并从法国两个不同的城市向位于美国的相同的目的主机执行Traceroute。在这两个Traceroute中，有多少条链路是相同的？大西洋沿岸国家的链路相同吗？
    2. 重复（1），但此时选择位于法国的一个城市和位于德国的另一个城市。
    3. 在美国挑选一个城市。然后向位于中国的两个不同城市的主机执行Traceroute。在这两次Traceroute中有多少链路是相同的？在到达中国前这两个Traceroute分开了吗？


    1. 使用[[https://tools.ipip.net/traceroute.php][ipip]]提供的traceroute。

       法国巴黎gcorelabs → 美国新泽西州普林斯顿Princeton University

       #+begin_example
         跳数	IP	主机名	地区（仅供参考）	AS号（仅供参考）	时间（毫秒）
         1	5.188.70.1	gw.gcore.lu	法国法兰西岛大区巴黎 gcore.lu	AS199524	0.3 / 0.9 / 0.2
         2	10.255.30.182	10.255.30.182	局域网		0.2 / 0.3 / 0.2
         3	10.255.30.178	10.255.30.178	局域网		0.3 / 0.4 / 0.4
         4	10.255.30.162	10.255.30.162	局域网		0.4 / 0.7 / 0.3
         5	62.115.155.238	prs-b7-link.ip.twelve99.net	法国法兰西岛大区巴黎 telia.com	AS1299	1.1 / 0.9 / 1.5
         6	62.115.137.90	prs-bb2-link.ip.twelve99.net	法国法兰西岛大区巴黎 telia.com	AS1299	81.7 / 81.5 / 81.8
         7	62.115.122.159	rest-bb1-link.ip.twelve99.net	美国弗吉尼亚州雷斯顿 telia.com	AS1299	82 / 82 / 81.5
         8	62.115.121.157	phm-b2-link.ip.twelve99.net	美国宾夕法尼亚州费城 telia.com	AS1299	82 / 83.2 / 82
         9	62.115.189.197	njedge-svc069531-ic354798.ip.twelve99-cust.net	美国宾夕法尼亚州费城 telia.com	AS1299	82.2 / 82.4 / 81.9
         10	130.156.33.65	130.156.33.65	美国新泽西州 njedge.net	AS21976	82 / 81.9 / 82
         11	130.156.252.58	130.156.252.58	美国新泽西州 njedge.net	AS21976	83 / 82.9 / 83.2
         12	204.153.48.2	fw-border-87-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	83.2 / 83.1 / 83.2
         13	128.112.12.9	rtr-core-east-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	83.9 / 84 / 83.5
         14	128.112.12.226	core-ns-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	84.6 / 83.9 / 84.1
         15	128.112.128.55	www.net.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	83.6 / 83.7 / 84.3
       #+end_example

       法国马赛ZENLAYER-MRS1 → 美国新泽西州普林斯顿Princeton University

       #+begin_example
         跳数	IP	主机名	地区（仅供参考）	AS号（仅供参考）	时间（毫秒）
         1	193.118.62.33	193.118.62.33	法国普罗旺斯－阿尔卑斯－蓝色海岸大区马赛 zenlayer.com	AS21859	7.4 / 2.3 / 2.4
         2	193.118.62.66	193.118.62.66	法国普罗旺斯－阿尔卑斯－蓝色海岸大区马赛 zenlayer.com	AS21859	63.3 / 5.2 / 1.6
         3	104.254.116.102	104.254.116.102	法国普罗旺斯－阿尔卑斯－蓝色海岸大区马赛 zenlayer.com		5.4 / 0.3 / 0.4
         4	104.254.116.94	104.254.116.94	法国普罗旺斯－阿尔卑斯－蓝色海岸大区马赛 zenlayer.com		0.4 / 0.3 / 0.3
         5	62.115.191.16	mei-b3-link.ip.twelve99.net	法国普罗旺斯－阿尔卑斯－蓝色海岸大区马赛 telia.com	AS1299	8 / 0.7 / 0.7
         6	62.115.125.194	mei-b5-link.ip.twelve99.net	法国普罗旺斯－阿尔卑斯－蓝色海岸大区马赛 telia.com	AS1299	0.9 / 1.1 / 0.9
         7	62.115.125.197	mei-b2-link.ip.twelve99.net	法国普罗旺斯－阿尔卑斯－蓝色海岸大区马赛 telia.com	AS1299	0.9 / 0.9 / 0.9
         8	62.115.116.27	mei-b1-link.ip.twelve99.net	法国普罗旺斯－阿尔卑斯－蓝色海岸大区马赛 telia.com	AS1299	0.9 / 0.9 / 1
         9	62.115.124.214	prs-bb2-link.ip.twelve99.net	法国法兰西岛大区巴黎 telia.com	AS1299	94 / 94.2 / 94.2
         10	62.115.122.159	rest-bb1-link.ip.twelve99.net	美国弗吉尼亚州雷斯顿 telia.com	AS1299	93.8 / 93.7 / 93.8
         11	62.115.121.157	phm-b2-link.ip.twelve99.net	美国宾夕法尼亚州费城 telia.com	AS1299	93.9 / 94.1 / 93.9
         12	62.115.189.197	njedge-svc069531-ic354798.ip.twelve99-cust.net	美国宾夕法尼亚州费城 telia.com	AS1299	94.3 / 94.2 / 94.2
         13	130.156.33.65	130.156.33.65	美国新泽西州 njedge.net	AS21976	94.1 / 94.1 / 94.1
         14	130.156.252.58	130.156.252.58	美国新泽西州 njedge.net	AS21976	96.2 / 96.7 / 95.3
         15	204.153.48.2	fw-border-87-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	95.3 / 95.6 / 95.4
         16	128.112.12.9	rtr-core-east-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	95.8 / 96.1 / 96.1
         17	128.112.12.226	core-ns-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	98.5 / 96.3 / 96.3
         18	128.112.128.55	www.net.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	96.2 / 96.2 / 96.4
       #+end_example

       在这两个Traceroute中62.115.122.159~128.112.128.55这8条链路是相同的。

       英国伦敦linode → 美国新泽西州普林斯顿Princeton University

       #+begin_example
         跳数	IP	主机名	地区（仅供参考）	AS号（仅供参考）	时间（毫秒）
         1	212.111.33.230	router2-lon.linode.com	英国伦敦 telecity.com	AS15830	0.7 / 0.6 / 3
         2	109.74.207.28	if-11-1-0-1-0.gw2.lon1.gb.linode.com	英国伦敦 linode.com	AS63949	1.3 / 0.7 / 0.5
         3	62.115.41.64	ldn-b2-link.ip.twelve99.net	英国伦敦 telia.com	AS1299	1.5 / 1.5 / 1.8
         4	62.115.122.188	ldn-bb1-link.ip.twelve99.net	英国伦敦 telia.com	AS1299	1.5 / 1.8 / 1.5
         5	62.115.113.20	nyk-bb2-link.ip.twelve99.net	美国纽约州纽约 telia.com	AS1299	73.5 / 73.3 / 73.4
         6	62.115.137.99	nyk-b2-link.ip.twelve99.net	美国纽约州纽约 telia.com	AS1299	76.6 / 75.8 / 75.8
         7	62.115.54.158	njedge-ic312218-nyk-b2.ip.twelve99-cust.net	美国纽约州纽约 telia.com	AS1299	75.9 / 76.1 / 76.1
         8	130.156.34.246	130.156.34.246	美国新泽西州 njedge.net	AS21976	73.5 / 73.3 / 73.4
         9	130.156.251.50	130.156.251.50	美国新泽西州 njedge.net	AS21976	76.3 / 75.3 / 74.5
         10	204.153.48.254	fw-border-hpcrc-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	76.9 / 76.8 / 78
         11	128.112.12.13	rtr-core-west-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	77.9 / 77.5 / 77.7
         12	128.112.12.230	core-ns-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	75.5 / 75.4 / 75.4
         13	128.112.128.55	www.net.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	75.2 / 75 / 74.9
       #+end_example

       西班牙马德里gcorelabs → 美国新泽西州普林斯顿Princeton University

       #+begin_example
         跳数	IP	主机名	地区（仅供参考）	AS号（仅供参考）	时间（毫秒）
         1	5.189.222.2	vrrp.example.com	西班牙马德里自治区马德里 pinspb.ru	AS199524	0.5 / 0.3 / 0.4
         2	10.255.32.226	10.255.32.226	局域网		0.4 / 0.4 / 0.3
         3	10.255.37.169	10.255.37.169	局域网		4.6 / 1.7 / 1.7
         4	80.239.194.252	mad-b2-link.ip.twelve99.net	西班牙马德里自治区马德里 telia.com	AS1299	1.8 / 17.6 / 1.9
         5	80.91.248.130	prs-bb2-link.ip.twelve99.net	法国法兰西岛大区巴黎 telia.com	AS1299	103.4 / 104.8 / 103.3
         6	62.115.122.159	rest-bb1-link.ip.twelve99.net	美国弗吉尼亚州雷斯顿 telia.com	AS1299	103.7 / 103 / 103
         7	62.115.121.157	phm-b2-link.ip.twelve99.net	美国宾夕法尼亚州费城 telia.com	AS1299	103 / 103.4 / 103.3
         8	62.115.189.197	njedge-svc069531-ic354798.ip.twelve99-cust.net	美国宾夕法尼亚州费城 telia.com	AS1299	103.3 / 103.2 / 103.2
         9	130.156.33.65	130.156.33.65	美国新泽西州 njedge.net	AS21976	103.3 / 103.5 / 103.7
         10	130.156.252.58	130.156.252.58	美国新泽西州 njedge.net	AS21976	104.9 / 104.5 / 104.7
         11	204.153.48.2	fw-border-87-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	104.9 / 105.1 / 104.9
         12	128.112.12.9	rtr-core-east-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	105.3 / 105.5 / 105.5
         13	128.112.12.226	core-ns-router.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	105.7 / 105.7 / 105.6
         14	128.112.128.55	www.net.princeton.edu	美国新泽西州普林斯顿 princeton.edu	AS88	108.7 / 105 / 104.9
       #+end_example

       从法国巴黎、法国马赛、英国伦敦、西班牙马德里到普林斯顿的四个Traceroute可以看出，链路中大部分ISP是相同的，但是路由器IP可能不同。

    2. 见1

    3. 这里从法国向位于美国两个不同城市的主机执行Traceroute。

       法国SDV → www.net.princeton.edu

       #+begin_example
         1	wblindix.sdv.fr      	212.95.66.126      	0.15 ms
         2	border-gateway2.sdv.fr      	212.95.69.227      	0.842 ms
         3	6k-2-sfr-str-e2-3-sdv-plurimedia.customers-sfr-str.ielo.net      	212.85.149.172      	0.792 ms
         4	be3.frpar-th2-n55h2.as29075.net      	185.96.186.74      	6.398 ms
         5	Hu0-0-1-2.frpar-th2-n55h3.as29075.net      	185.18.173.73      	6.495 ms
         6	prs-b5-link.ip.twelve99.net      	62.115.54.161      	7.255 ms
         7	prs-bb2-link.ip.twelve99.net      	213.155.130.22      	87.971 ms
         8	rest-bb1-link.ip.twelve99.net      	62.115.122.159      	87.746 ms
         9	phm-b2-link.ip.twelve99.net      	62.115.121.157      	88.061 ms
         10	njedge-svc069531-ic354798.ip.twelve99-cust.net      	62.115.189.197      	88.402 ms
         11	130.156.33.65      	130.156.33.65      	88.002 ms
         12	130.156.252.58      	130.156.252.58      	99.437 ms
         13	fw-border-87-router.princeton.edu      	204.153.48.2      	89.356 ms
         14	rtr-core-east-router.princeton.edu      	128.112.12.9      	89.649 ms
         15	core-ns-router.princeton.edu      	128.112.12.226      	90.279 ms
         16	www.net.princeton.edu      	128.112.128.55      	90.265 ms
       #+end_example

       法国SDV → www.net.cmu.edu

       #+begin_example
         1	wblindix.sdv.fr      	212.95.66.126      	0.162 ms
         2	border-gateway2.sdv.fr      	212.95.69.227      	0.812 ms
         3	th2-10g-0003.sdv.fr      	212.95.64.54      	6.804 ms
         4	10gigabitethernet-2-2.par2.he.net      	195.42.144.104      	6.317 ms
         5	100ge11-2.core1.nyc4.he.net      	72.52.92.113      	78.134 ms
         6	ve951.core2.nyc4.he.net      	184.104.195.170      	77.423 ms
         7	port-channel4.core3.chi1.he.net      	184.104.196.218      	96.535 ms
         9	216.56.50.86      	216.56.50.86      	105.588 ms
         10	100.121.0.41      	100.121.0.41      	106.773 ms
         11	CORE0-POD-I-CYH.GW.CMU.NET      	128.2.0.249      	107.026 ms
         12	POD-D-DCNS-CORE0.GW.CMU.NET      	128.2.0.210      	107.181 ms
         13	SII-FIRE.GW.CMU.NET      	128.2.5.92      	107.422 ms
         14	WEB-01.NET.CMU.EDU      	128.2.106.134      	108.413 ms
       #+end_example

       有2条链路是相同的，在到达美国之前就分开了。

*** P20

    考虑对应于图1-20b吞吐量的例子。现在假定有M对客户-服务器而不是10对。用R_{s}、R_{c}和R分别表示服务器链路、客户链路和网络链路的速率。假设所有的其他链路都有充足容量，并且除了由这M对客户-服务器产生的流量外，网络中没有其他流量。推导出由R_{s}、R_{c}、R和M表示的通用吞吐量表达式。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:500px;
    [[./img/fig1-20.png]]

    \[ \text{吞吐量} = min\{R_s, R_c, R/M\} \]

*** P21

    考虑图1-19b。现在假定在服务器和客户之间有M条路径。任两条路径都不共享任何链路。路径k（k=1，···，M）由传输速率为R_{1}^{k}，R_{2}^{k}，···，R_{N}^{k}的N条链路组成。如果服务器仅能够使用一条路径向客户发送数据，则该服务器能够取得的最大吞吐量是多少？如果该服务器能够使用所有M条路径发送数据，则该服务器能够取得的最大吞吐址是多少？

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:500px;
    [[./img/fig1-19.png]]

    1. 路径k的吞吐量

       \[ T_k = \min \{R_1^k,R_2^k,\dotsc ,R_N^k \}. \]

       如果仅能使用一条路径，最大吞吐量为：

       \[ \max \{T_1, T_2, \dotsc, T_M\}. \]

    2. 如果使用所有M条路径，最大吞吐量为

       \[ \sum_{k=1}^M T_k. \]

*** P22

    考虑图1-19b。假定服务器与客户之间的每条链路的丢包概率为p，且这些链路的丢包率是独立的。一个（由服务器发送的）分组成功地被接收方收到的概率是多少？如果在从服务器到客户的路径上分组丢失了，则服务器将重传该分组。平均来说，为了使客户成功地接收该分组，服务器将要重传该分组多少次？

    1. 成功收到的概率 \[ p_s = (1-p)^N. \]
    2. 根据（1），分组从服务器成功传送给客户的概率是p_{s}，那么得到一次成功的试验次数服从几何分布，期望是1/p_{s}，因此平均的重传次数是1+1/p_{s}。

*** P23

    考虑图1-19a。假定我们知道沿着从服务器到客户的路径的瓶颈链路是速率为R_{s}bps的第一段链路。假定我们从服务器向客户发送紧密相连的一对分组，且沿这条路径没有其他流量。假定每个分组的长度为L比特，两条链路具有相同的传播时延d_{prop}。
    1. 在目的地，分组的到达间隔时间有多大？也就是说，从第一个分组的最后一个比特到达到第二个分组最后一个比特到达所经过的时间有多长？
    2. 现在假定第二段链路是瓶颈链路（即R_{c}<R_{s}）。第二个分组在第二段链路输入队列中排队是可能的吗？请解释原因。现在假定服务器在发送第一个分组T秒之后再发送第二个分组。为确保在第二段链路之前没有排队，T必须要有多长？试解释原因。


    1. 第一个分组最后一个比特在时刻L/R_{s}+d_{prop}到达路由器，又经过L/R_{c}+d_{prop}时间到达客户。第二个分组最后一个比特在时刻2L/R_{s}+d_{prop}到达路由器，比第一个分组最后一个比特到达路由器的时间晚了L/R_{s}，这个时间大于路由器传输第一个分组所需的时间L/R_{c}（由于R_{s}<R_{c}），因此第二个分组最后一个比特到达路由器时不用排队可以直接开始传输。再经过L/R_{c}+d_{prop}时间第二个分组最后一个比特到达客户。分组到达的间隔为L/R_{s}。
    2. 根据（1），第二个分组最后一个比特比第一个分组最后一个比特到达路由器晚了L/R_{s}时间，当R_{s}>R_{c}时，这个时间是小于L/R_{c}的，也就是说第二个分组最后一个比特到达路由器时，第一个分组还没传输完，这时第一个分组就要排队了。为确保没有排队，T⩾L/R_{c}-L/R_{S}。

*** P24

    假设你希望从波士顿向洛杉矶紧急传送40×10^{12}字节数据。你有一条1OOMbps专用链路可用于传输数据。你是愿意通过这条链路传输数据，还是愿意使用FedEx夜间快递来交付？解释你的理由。

    用链路传输需要的时间是40e12B÷100Mbps≈889h，因此夜间快递更好。

*** P25

    假定两台主机A和B相隔20 000km，由一条直接的R=2Mbps的链路相连。假定跨越该链路的传播速率是2.5×10^{8}m/s。
    1. 计算带宽-时延积R⋅t_{prop}。
    2. 考虑从主机A到主机B发送一个800 000比特的文件。假定该文件作为一个大的报文连续发送。在任何给定的时间，在链路上具有的比特数量最大值是多少？
    3. 给出带宽时延积的一种解释。
    4. 在该链路上一个比特的宽度（以米计）是多少？它比一个足球场更长吗？
    5. 用传播速率s、带宽R和链路m的长度表示，推导出一个比特宽度的一般表示式。


    1. \[ R \cdot t_{prop} = 2Mbps \cdot 20000km \div 2.5e8m/s = 160000 b \]
    2. 链路传输一个比特需要的时间是1/R=0.0005ms，一比特从A传播到B需要的时间是m/s=20000km÷2.5e8m/s=80ms，因此比特数量的最大值是80/0.0005=160 000。
    3. 链路上具有的最大比特数。
    4. 一个比特的宽度是20 000km/160 000=125m，比足球场（长度100~110米）更长。
    5. \[ m/\frac{Rm}{s} = \frac sR. \]

*** P26

    对于习题P25，假定我们能够修改R。对什么样的R值，一个比特的宽度能与该链路的长度一样长？

    \begin{align*}
      &         &\frac sR &= m \\
      &\implies &R&=\frac sm = \frac{2.5e8}{2e7} = 12.5bps.
    \end{align*}

*** P27

    考虑习题P25，但此时链路的速率是R=1Gbps。
    1. 计算带宽-时延积R·d_prop。
    2. 考虑从主机A到主机B发送一个800 000比特的文件。假定该文件作为一个大的报文连续发送。在任何给定的时间，在链路上具有的比特数批最大值是多少？
    3. 在该链路上一个比特的宽度（以米计）是多少？


    1. \[ R \cdot t_{prop} = 1Gbps \cdot 20000km \div 2.5e8m/s = 80Mb. \]
    2. 80Mb.
    3. s/R = 2.5e8m/s÷1Gbps = 0.25m.

*** P28

    再次考虑习题P25。
    1. 假定连续发送，发送该文件需要多长时间？
    2. 假定现在该文件被划分为20个分组，每个分组包含40000比特。假定每个分组被接收方确认，确认分组的传输时间可忽略不计。最后，假定前一个分组被确认后，发送方才能发送分组。发送该文件需要多长时间？
    3. 比较（1）和（2）的结果。


    1. \-
       \begin{align*}
         d_{total} &= d_{trans} + d_{prop} \\
         &= \frac LR + \frac ms \\
         &= 800,000b÷2Mbps + 20,000km÷2.5×10^8m/s \\
         &= 0.48s
       \end{align*}
    2. \-
       \begin{align*}
         d_{total} &= 20×(d_{trans} + 2d_{prop}) \\
         &= 20×(0.02s + 0.08s) \\
         &= 2s
       \end{align*}
    3. 将文件划分为小分组需要花费更多时间，增加的部分主要是由确认分组的传播延时造成的。

*** P29

    假定在同步卫星和它的地球基站之间有一条1OMbps的微波链路。每分钟该卫星拍摄一幅数字照片，并将它发送到基站。假定传播速率是2.4×10^{8}m/s。
    1. 该链路的传播时延是多少？
    2. 带宽时延积R•d_{prop}是多少？
    3. 若x表示该照片的大小。对于这条微波链路，能够连续传输的x最小值是多少？


    1. \[ d_{prop} = m÷s = 35786km÷2.4e8m/s = 150ms. \]
    2. \[ R\cdot d_{prop} = 10Mbps×150ms = 1.5Mb. \]
    3. \[ 1min×10Mbps = 600Mb. \]

*** P30

    考虑1.5节中我们在分层讨论中对航空旅行的类比，随着协议数据单元向协议栈底层流动，首部在增加。随着旅客和行李移动到航线协议栈底部，有与上述首部信息等价的概念吗？

    #+begin_quote
    Let’s suppose the passenger and his/her bags correspond to the data unit arriving to the top of the protocol stack. When the passenger checks in, his/her bags are checked, and a tag is attached to the bags and ticket. This is additional information added in the Baggage layer if Figure 1.20 that allows the Baggage layer to implement the service or separating the passengers and baggage on the sending side, and then reuniting them (hopefully!) on the destination side. When a passenger then passes through security and additional stamp is often added to his/her ticket, indicating that the passenger has passed through a security check. This information is used to ensure (e.g., by later checks for the security information) secure transfer of people.
    #+end_quote

*** P31

    在包括因特网的现代分组交换网中，源主机将长应用层报文（如一个图像或音乐文件）分段为较小的分组并向网络发送。接收方则将这些分组重新装配为初始报文。我们称这个过程为报文分段。图1-27显示了一个报文在报文不分段或报文分段情况下的端到端传输。考虑一个长度为8×10^{6}比特的报文，它在图1-27中从源发送到目的地。假定在该图中的每段链路是2Mbps。忽略传播、排队和处理时延。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:400px;
    [[./img/fig1-27.png]]

    1. 考虑从源到目的地发送该报文且没有报文分段。从源主机到第一台分组交换机移动报文需要多长时间？记住，每台交换机均使用存储转发分组交换，从源主机移动该报文到目的主机需要多长时间？
    2. 现在假定该报文被分段为800个分组，每个分组10000比特长。从源主机移动第一个分组到第一台交换机需要多长时间？从第一台交换机发送第一个分组到第二台交换机，从源主机发送第二个分组到第一台交换机各需要多长时间？什么时候第二个分组能被第一台交换机全部收到？
    3. 当进行报文分段时，从源主机向目的主机移动该文件需要多长时间？将该结果与（1）的答案进行比较并解释之。
    4. 除了减小时延外，使用报文分段还有什么原因？
    5. 讨论报文分段的缺点。


    1. 从源主机到第一台分组交换机移动报文需要的时间为 \(L/R=8×10^6b÷2Mbps=4s\)，从源主机移动该报文到目的主机需要的时间为 \(3×4s=12s.\)
    2. 从源主机移动第一个分组到第一台交换机需要的时间 \(L/R=10000b÷2Mbps=5ms\)；从第一台交换机发送第一个分组到第二台交换机需要5ms；从源主机发送第二个分组到第一台交换机各需要5ms。在时刻10ms第二个分组能被第一台交换机全部收到。
    3. 在时刻15ms第一个分组能被目的地收到，此后每过5ms目的地收到一个分组，在时刻(15+(n-1)×5)ms，第n个分组被目的地收到；因此，从源主机向目的主机移动该文件需要15+799×5 ms=4.01s.
    4. \-
       + 如果不实用报文分段，分组传输中出现了错误会导致整个报文需要重传；
       + 大的分组会导致链路上的小的分组也出现很大的时延。
    5. \-
       + 目的主机必需排序、重组收到的分组。
       + 报文分段后每个分组都要添加头部，如果分组很多，相应地所有报文头部加起来的也会很大。

*** P32

    用本书的Web网站上的报文分段小Java小程序进行实验。该Java程序中的时延与前一个习题中的时延相当吗？链路传播时延是怎样影响分组交换（有报文分段）和报文交换的端到端总时延的？

    [[https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/message-segmentation/index.html][Message Segmentation]]

    | Simulate          |  1 |  2 |  3 |  4 |
    | Message size (kb) | 16 | 16 | 16 | 16 |
    | Package size (kb  | 16 |  4 | 16 |  4 |
    | Trans rate (kbps) |  4 |  4 |  4 |  4 |
    | Prop delay (s)    |  0 |  0 |  1 |  1 |

    1. d_{total} = 3×(16/4) = 12s.
    2. d_{total} = 3×(4/4)+(4-1)×(4/4) = 6s.
    3. d_{total} = 3×(16/4+1) = 15s.
    4. d_{total} = 3×(4/4+1)+(4-1)×(4/4) = 9s.

*** P33

    考虑从主机A到主机B发送一个F比特的大文件。A和B之间有三段链路（和两台交换机），并且该链路不拥塞（即没有排队时延）。主机A将该文件分为每个为S比特的报文段，并为每个报文段增加一个80比特的首部，形成L=80+S比特的分组。每条链路的传输速率为Rbps。求出从A到B移动该文件时延最小的值S。忽略传播时延。

    \begin{align*}
      &         &D              &= 3 L/R + (F/S-1) L/R \\
      &         &\frac{d}{dS} D &= 0 \\
      &\implies &S              &= \sqrt{40F}
    \end{align*}

*** P34

    Skype提供了一种服务，使你能用PC向普通电话打电话。这意味若语音呼叫必须通过因特网和电话网。讨论这是如何做到的。

    #+begin_quote
    电路交换电话网络和互联网通过 "网关 "连接在一起。当Skype用户（连接到互联网）呼叫普通电话时，网关和电话用户之间通过电路交换网络建立了一个电路。Skype用户的语音通过互联网以数据包的形式发送到网关。在网关，语音信号被重新构建，然后通过电路发送。在另一个方向，语音信号通过电路交换网络被发送到网关。网关将语音信号打包，并将语音数据包发送给Skype用户。
    #+end_quote

** Wireshark实验

   [[file:code/ch1-intro/wireshark-intro-v7.0.pdf][Wireshark Lab: Getting Started v7.0]]

   1. List 3 different protocols that appear in the protocol column in the unfiltered packet-listing window in step 7 above.

      TCP, HTTP, TLSv1.2.

   2. How long did it take from when the HTTP GET message was sent until the HTTP OK reply was received?

      3.738087 - 3.465026 = 0.273061s.

   3. \-

      + What is the Internet address of the gaia.cs.umass.edu (also known as wwwnet.cs.umass.edu)?

        128.119.245.12.

      + What is the Internet address of your computer?

        192.168.8.100.

   4. Print the two HTTP messages (GET and OK) referred to in question 2 above.

      #+INCLUDE: "code/ch1-ws-intro/4-export.txt" src c

* 应用层
** 笔记
*** HTTP请求 p.70

    #+begin_src sh
      % telnet gaia.cs.umass.edu 80
      Trying 198.18.1.14...
      Connected to gaia.cs.umass.edu.
      Escape character is '^]'.
      HEAD /kurose_ross/interactive/index.php HTTP/1.1
      Host: gaia.cs.umass.edu

      HTTP/1.1 200 OK
      Date: Thu, 15 Jul 2021 02:51:17 GMT
      Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.14 mod_perl/2.0.11 Perl/v5.16.3
      X-Powered-By: PHP/7.4.14
      Set-Cookie: DevMode=0
      Content-Type: text/html; charset=UTF-8

      Connection closed by foreign host.
    #+end_src

*** 使用SMTP通过Gmail发送邮件 p.78

    [[https://stackoverflow.com/a/11049483/10422197][Stack Overflow]]

    1. 设置账号>安全性>安全性较低的应用的访问权限为开启。
    2. \-
       #+begin_src sh
         % echo -ne '\00user@gmail.com\00password' | base64
         AHVzZXJAZ21haWwuY29tAHBhc3N3b3Jk
         % openssl s_client -connect smtp.gmail.com:465 -crlf -ign_eof
         220 smtp.gmail.com ESMTP r15sm14835219pje.12 - gsmtp
         HELO localhost
         250-smtp.gmail.com at your service, [10.97.101.35]
         250-SIZE 35882577
         250-8BITMIME
         250-AUTH LOGIN PLAIN XOAUTH2 PLAIN-CLIENTTOKEN OAUTHBEARER XOAUTH
         250-ENHANCEDSTATUSCODES
         250-PIPELINING
         250-CHUNKING
         250 SMTPUTF8
         AUTH PLAIN AHVzZXJAZ21haWwuY29tAHBhc3N3b3Jk
         235 2.7.0 Accepted
         MAIL FROM: <user@gmail.com>
         250 2.1.0 OK r15sm14835219pje.12 - gsmtp
         RCPT TO: <dest@outlook.com>
         250 2.1.5 OK r15sm14835219pje.12 - gsmtp
         DATA
         354  Go ahead r15sm14835219pje.12 - gsmtp
         Subject: It work!

         Hello!
         .
         250 2.0.0 OK  1626671492 r15sm14835219pje.12 - gsmtp
         QUIT
         221 2.0.0 closing connection r15sm14835219pje.12 - gsmtp
         read:errno=0
       #+end_src

       #+CAPTION: 命令参数解释
       #+begin_src sh
         echo
         -n	do not append a newline
         -e	enable interpretation of the following backslash escapes
         \00 \0nnn 0 ASCII NULL

         openssl
         The s_client command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS.
         -connect host[:port] The host and port to connect to.
         -crlf   Translate a line feed from the terminal into CR+LF, as required by some servers.
         -ign_eof Inhibit shutting down the connection when end of file is reached in the input.
       #+end_src

*** 使用POP收取Gmail邮件 p.81

    #+begin_src sh
      shichaoxia@XSCMBP bin % openssl s_client -connect pop.gmail.com:995 -crlf -ign_eof
      +OK Gpop ready for requests from 101.93.111.25 f6mb117633262jaj
      USER user@gmail.com
      +OK send PASS
      PASS AdMkfTHj9R3s8V
      +OK Welcome.
      LIST
      +OK 2 messages (1490 bytes)
      1 757
      2 733
      .
      RETR 1
      +OK message follows
      MIME-Version: 1.0
      Date: Mon, 19 Jul 2021 14:28:24 +0800
      Message-ID: <CAMoCzMj7D93jYN3robFDOq+n57tEJONE=ZKvvNGRff1KZKcTkg@mail.gmail.com>
      Subject: =?UTF-8?B?6IGa5Lya?=
      From: =?UTF-8?B?5aSP5LiW6LaF?= <mrcoinking@gmail.com>
      To: mrcoinking@gmail.com
      Content-Type: multipart/alternative; boundary="000000000000688ae205c7740b1a"

      --000000000000688ae205c7740b1a
      Content-Type: text/plain; charset="UTF-8"
      Content-Transfer-Encoding: base64

      5pyJ5LiA5Liq6IGa5Lya6KaB5Y+C5Yqg5ZCX77yfDQoNClRvbQ0K
      --000000000000688ae205c7740b1a
      Content-Type: text/html; charset="UTF-8"
      Content-Transfer-Encoding: base64

      PGRpdiBkaXI9Imx0ciI+5pyJ5LiA5Liq6IGa5Lya6KaB5Y+C5Yqg5ZCX77yfPGRpdj48YnI+PC9k
      aXY+PGRpdj5Ub208L2Rpdj48L2Rpdj4NCg==
      --000000000000688ae205c7740b1a--
      .
      DELE 1
      +OK marked for deletion
      QUIT
      +OK Farewell.
      read:errno=0
    #+end_src

*** UDPClient.py p.107

    #+INCLUDE: "code/ch2_udp_client.py" src python

*** UDPServer.py p.108

    #+INCLUDE: "code/ch2_udp_server.py" src python

*** TCPClient.py p.111

    #+INCLUDE: "code/ch2_tcp_client.py" src python

*** TCPServer.py p.112

    #+INCLUDE: "code/ch2_tcp_server.py" src python

** 复习题
*** R1

    列出5种非专用的因特网应用及它们所使用的应用层协议。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    [[./img/fig2-5.png]]

*** R2

    网络体系结构与应用程序体系结构之间有什么区别？

    从应用程序研发者的角度看，网络体系结构是固定的，并为应用程序提供了特定的服务集合。应用程序体系结构由应用程序研发者设计，规定了如何在各种端系统上组织该应用程序。

*** R3

    对两进程之间的通信会话而言，哪个进程是客户，哪个进程是服务器？

    在一对进程之间的通信会话场景中，发起通信的进程被标识为客户，在会话开始时等待联系的进程是服务器。

*** R4

    对一个P2P文件共享应用，你同意”一个通信会话不存在客户端和服务器端的概念”的说法吗？为什么？

    不同意。在P2P文件共享中，当对等方A请求对等方B发送一个特定的文件时，在这个特定的通信会话中对等方A是客户，而对等方B是服务器。

*** R5

    运行在一台主机上的一个进程，使用什么信息来标识运行在另一台主机上的进程？

    端口号。

*** R6

    假定你想尽快地处理从远程客户到服务器的事务，你将使用UDP还是TCP？为什么？

    UDP。使用UDP处理事务仅需要一个RTT：客户是使用UDP套接字发送请求；服务器使用UDP套接字向客户发送响应。使用TCP则至少需要两个RTT：一个RTT用来建立TCP连接；另一个RTT供客户发送请求、服务器发送响应。

*** R7

    参见图2-4，我们看到在该图中所列出的应用程序没有一个同时既要求无数据丢失又要求定时的。你能设想一个既要求无数据丢失又高度时间敏感的应用程序吗？

    远程手术设备控制程序。

*** R8

    列出一个运输协议能够提供的4种宽泛类型的服务。对于每种服务类型，指出是UDP还是TCP（或这两种协议）提供这样的服务？

    1. 可靠数据传输
       TCP可以在客户和服务器之间传输可靠的字节流；UDP不可以。
    2. 吞吐量
       都不可以。
    3. 定时
       都不可以。
    4. 安全性
       都不可以。

*** R9

    前面讲过TCP能用SSL来强化，以提供进程到进程的安全性服务，包括加密。SSL运行在运输层还是应用层？如果某应用程序研制者想要用SSL来强化UDP，该研制者应当做些什么工作？

    SSL运行在应用层。SSL套接字从应用层获取未加密的数据，对其进行加密，然后将其传递给TCP套接字。如果应用程序开发人员希望用SSL来增强UDP，就必须在应用程序中引入SSL代码。

*** R10

    握手协议的作用是什么？

    如果两个通信实体在向对方发送数据之前首先交换控制数据报文，那么协议就会使用握手。SMTP在应用层使用握手，而HTTP不使用。

*** R11

    为什么HTTP、SMTP及POP3都运行在TCP，而不是UDP上？

    因为这些应用层协议需要传输层按顺序、无差错地交付报文。

*** R12

    考虑一个电子商务网站需要保留每一个客户的购买记录。描述如何使用cookie来完成该功能？

    1. 当请求报文到达该电子商务网站的服务器时，该Web站点将产生一个唯一识别码，并以此作为索引在它的后端数据库中产生一个表项。
    2. 接下来Web服务器用一个包含Set-cookie:首部的HTTP响应报文对用户的浏览器进行响应。
    3. 当客户的浏览器收到了该HTTP响应报文时，它会看到该Set-cookie:首部。该浏览器在它管理的特定cookie文件中添加一行，该行包含服务器的主机名和在Set-cookie:首部中的识别码。
    4. 当用户继续浏览网站时，每请求一个Web页面，其浏览器就会查询该cookie文件并抽取她对这个网站的识别码，并放到HTTP请求报文中包括识别码的cookie首部行中。在这种方式下，服务器可以跟踪用户在站点的活动。

*** R13

    描述Web缓存器是如何减少接收被请求对象的时延的。Web缓存器将减少一个用户请求的所有对象或只是其中的某些对象的时延吗？为什么？

    网络缓存可以使所需的内容离用户“更近”，可能就在用户的主机所连接的同一个局域网中。网络缓存可以减少所有对象的延迟，即使是没有被缓存的对象，因为缓存减少了链接的流量。

*** R14

    Telnet到一台Web服务器并发送一个多行的请求报文。在该请求报文中包含If-modified-since:首部行，迫使响应报文中出现“304 Not Modified”状态代码。

    #+begin_src sh
      % telnet gaia.cs.umass.edu 80
      Trying 198.18.1.221...
      Connected to gaia.cs.umass.edu.
      Escape character is '^]'.
      GET /index.html HTTP/1.1
      Host: gaia.cs.umass.edu
      If-modified-since: Tue, 01 Mar 2016 22:00:00 GMT

      HTTP/1.1 304 Not Modified
      Date: Mon, 19 Jul 2021 09:08:24 GMT
      Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.14 mod_perl/2.0.11 Perl/v5.16.3
      ETag: "a5b-52d015789ee9e"

      Connection closed by foreign host.
    #+end_src

*** R15

    列出几种流行的即时通信应用。它们使用相同的协议作为SMS（Short Message Service）吗？

    | 应用     | 协议    |
    |----------+---------|
    | WhatsApp | XMPP    |
    | Telegram | MTProto |

*** R16

    假定Alice使用一个基于Web的电子邮件账户（例如Hotmai或Gmail）向Bob发报文，而Bob使用POP3从他的邮件服务器访问自己的邮件。讨论该报文是如何从Alice主机到Bob主机的。要列出在两台主机间移动该报文时所使用的各种应用层协议。

    #+begin_src plantuml :file img/ch2-r16.svg :cmdline -charset utf-8
      @startuml
      !theme plain
      left to right direction
      rectangle Alice的主机 as AH
      rectangle Alice的邮件服务器 as AS
      rectangle Bob的主机 as BH
      rectangle Bob的邮件服务器 as BS
      AH --> AS: HTTP
      AS --> BS: SMTP
      BS --> BH: POP3
      @enduml
    #+end_src

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    #+RESULTS:
    [[file:img/ch2-r16.svg]]

*** R17

    将你最近收到的报文首部打印出来。其中有多少Received:首部行？分析该报文的首部行中的每一行。

    #+begin_src sh
      Delivered-To: mrcoinking@gmail.com
      Received: by 2002:a05:6900:1294:0:0:0:0 with SMTP id s20csp4253317yam;
      Mon, 19 Jul 2021 03:46:52 -0700 (PDT)
      X-Google-Smtp-Source: ABdhPJzY9W9JH0ophTk1fSVccvDkQPEVXSd9moEC5KTgCUy4GQRxxLN62hg35D4YD5JE6Pg6DOnk
      X-Received: by 2002:a17:907:1614:: with SMTP id hb20mr26747648ejc.387.1626691612437;
      Mon, 19 Jul 2021 03:46:52 -0700 (PDT)
      ARC-Seal: i=2; a=rsa-sha256; t=1626691612; cv=pass;
      d=google.com; s=arc-20160816;
      b=BHjcOyLyIcO3Hib03bbMjAiPU7wKkwJXzlm9HJcqNITM0ApwfosYOMwAG0ss3fgE05
      s9/AkNSbu6C7JadPS8cC0CwUKOB9rHP2SHEe4sl1Fz9fCNQyFGz9aQOmAWM+ZzsEpORp
      11eQ+JNDvzVE3PHizk6Zd/l0D0zz55muClDP6CTB8gD7t6cqaOWtt5HZxhHdFj1R4I3O
      AB/LhWeKdY5W4/R9OqMoqV1XkCpAYVqF4uQktJzJzyKySV+XTkxyiQlVBFDzNxUaFvIh
      DUj2nHRjQRiKARwJ/+GG6iSQ3hcgERRpBzux2W3sCSKp9XyzXKI0Z5A1j3aMqoV4cr1s
      uZKA==
      ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
      h=mime-version:content-language:accept-language:message-id:date
      :thread-index:thread-topic:subject:to:from:dkim-signature;
      bh=fmsy58jE8ul38iId/7Xm/XOLc5OFTh6Q8DzAhj5OOz4=;
      b=fWIT9tJrFYb6yz5fEfQ7bwOXYj87bY40p/WA2pKqXPCOz3qw4/H5eOYAxPhABs//Ua
      dIby303yIIBBf62puAO+M7eb2AtchWVrrMBt9gtHbtpbLIYEEwHpSBjX/CxNkiFdMW+4
      2ZLHlCwngtys6TrYRwUJ1j5JXDy1u/5YXRqLJ+W2Y1rPq8apsW+gfLY64Esi1oxSB7jn
      kcjiiJNnGsuKHHoadaqy1DjtiCzBigZarQ1VKmnSB6mwbudpmM6fUQ/zUtvgK88qtfUu
      8eBtWWuRlVq4EJQGj6OVIEUTCNhYmZ7Q3gcoIteB/yrcjjVU7z2Yt5aZePxzw2hZ1Ayp
      XUzA==
      ARC-Authentication-Results: i=2; mx.google.com;
      dkim=pass header.i=@outlook.com header.s=selector1 header.b=UqTt1AQt;
      arc=pass (i=1);
      spf=pass (google.com: domain of shichaoxia@outlook.com designates 40.92.62.143 as permitted sender) smtp.mailfrom=shichaoxia@outlook.com;
      dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=outlook.com
      Return-Path: <shichaoxia@outlook.com>
      Received: from AUS01-SY4-obe.outbound.protection.outlook.com (mail-sy4aus01olkn2143.outbound.protection.outlook.com. [40.92.62.143])
      by mx.google.com with ESMTPS id h6si21104650edw.479.2021.07.19.03.46.52
      for <mrcoinking@gmail.com>
          (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);
          Mon, 19 Jul 2021 03:46:52 -0700 (PDT)
          Received-SPF: pass (google.com: domain of shichaoxia@outlook.com designates 40.92.62.143 as permitted sender) client-ip=40.92.62.143;
          Authentication-Results: mx.google.com;
          dkim=pass header.i=@outlook.com header.s=selector1 header.b=UqTt1AQt;
          arc=pass (i=1);
          spf=pass (google.com: domain of shichaoxia@outlook.com designates 40.92.62.143 as permitted sender) smtp.mailfrom=shichaoxia@outlook.com;
          dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=outlook.com
          ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
          b=Rhby+n7k/37aAUBFVt/khy0oEvtB6I/aFAXwZEntAyccz2W7Z0VMkD5nh+PiNVKBZRLAlaTJz1FXPXipQ9kLPdmfjh6HOTQMCBqyJ9nSzRhmeR5bAIeXiM83OLfRg+3nFIobBCU33usq69uJmzvXgZWZoTNTOvYe5slMhulKV/irP+uDc/yncnASuD9ugXjHzem1g7KFfykhtuVuqZxKK3FGAix8BYbpDdIa7JdsFm7U9LmODKUFYIzhgLiKQiTpwRthkFpDqJNzlbZ+YGdnDQin017Fke4WZm8YQs8bZSRhEa1IiXPCWe5nlegacj8gDj60XkKMgQ1x7NqvTvC0pQ==
          ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
          s=arcselector9901;
          h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
          bh=fmsy58jE8ul38iId/7Xm/XOLc5OFTh6Q8DzAhj5OOz4=;
          b=Rh1Xi9Uwa/gdarxYaJra4TLZU+0ZWGkGGN2MVsOpK05CL9/ltBXE2eZr+yBOuR+cgmQ5IEZXsO28aUC/7qZ6ZggkAf1falxZxRllVCVKSuVCuuPGgItoo1eQ6CgUr8n2ncdDCcdftTwCYc4RL0ZEvRZXh0mlp/efWf+udSViUjWRky9AnAX/u7+vXvopAF5zJetx0b4VSmpKtQTiFeMlVTbaobipOYUmSaBbeYTuPhW/AHXTriKEWjPTBteQrBU9wF967A5a7psRpNTBo3EhdyWf2qssM2VQzs9NlG3poaXWvt7m/d6lB20oKQORReilhlQm1MEmVbwJaD+WtGaSrQ==
          ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=none; dmarc=none;
          dkim=none; arc=none
          DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=outlook.com;
          s=selector1;
          h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
          bh=fmsy58jE8ul38iId/7Xm/XOLc5OFTh6Q8DzAhj5OOz4=;
          b=UqTt1AQtMIggtDNY6B99NTCc5YZypkbhlkAfNdS+cM1/EY4yhyZdbNAQHG8iZlz+hiqsVpYKyoog0liOhnuNx1IQZxhDChSxjICKiziFTJhTiy6jot4FKQeHCuoB5dG7bzoPwb/lDx2ke/HI4703dmCWgd7iq+p2A4JCXEIEnuym3K73le1Z+0R3efaHttbGgVFZ0rSJSq9YE9hMH6+M5nXOyFuQe0WODDW2/74XIrI+rRdhWE7oM0myInwNk6GP4OcRtv18xsGsXOCDzutcO07YNhE7Bj1gac+1Mdwxurq5qHSjcLFFcO1bhKhaa6o7uXEgI8M4VFRhPQxnbhmvww==
          Received: from ME3P282MB1459.AUSP282.PROD.OUTLOOK.COM (2603:10c6:220:a6::11)
          by ME4P282MB0952.AUSP282.PROD.OUTLOOK.COM (2603:10c6:220:94::13) with
          Microsoft SMTP Server (version=TLS1_2,
                                 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.4331.23; Mon, 19 Jul
          2021 10:46:49 +0000
          Received: from ME3P282MB1459.AUSP282.PROD.OUTLOOK.COM
          ([fe80::8c3b:e921:3345:e11b]) by ME3P282MB1459.AUSP282.PROD.OUTLOOK.COM
          ([fe80::8c3b:e921:3345:e11b%9]) with mapi id 15.20.4331.033; Mon, 19 Jul 2021
          10:46:49 +0000
          From: Xia Shi-Chao <shichaoxia@outlook.com>
          To: "mrcoinking@gmail.com" <mrcoinking@gmail.com>
          Subject: Test subject xxx!
          Thread-Topic: Test subject xxx!
          Thread-Index: AQHXfItW5GxCI17Vy0uZE+G875iDPg==
          Date: Mon, 19 Jul 2021 10:46:49 +0000
          Message-ID:
          <ME3P282MB1459AEDEB797FB3411DCA0BEDBE19@ME3P282MB1459.AUSP282.PROD.OUTLOOK.COM>
          Accept-Language: zh-CN, en-US
          Content-Language: zh-CN
          X-MS-Has-Attach:
          X-MS-TNEF-Correlator:
          x-tmn: [+aVMvf0XoHBwmnkmkVBdstZrvq4db3oE]
          x-ms-publictraffictype: Email
          x-ms-office365-filtering-correlation-id: aaef0314-2279-4f89-f6c5-08d94aa28333
          x-ms-traffictypediagnostic: ME4P282MB0952:
          x-microsoft-antispam: BCL:0;
          x-microsoft-antispam-message-info:
          Rx/A+Mh1pbQoqX1VUNrRo/uCZFE2Nlt0ZLmrrDTb5Z/VEU5/4itbcYzM1bvlvdA6zmkW5+AsdLwO7Wck6wGMVhzTdC6KNbNE4r2Xcgk0rac23BXshFoD7Tkl+f0p88fJ7KVV6q4XxV6QR+PBlfqwUmRVjMG5k6fxyozabE7r4/iHIjJY8Kq3QjG2KPtnMjcHdEDQIyQgJ0xIuQ9x1v0KhaXGojPjhjAivuWX7u+K4Q1jPRW3M2OMlq1c25FtuA62jeAWLGmaM88l3hkOOH9cdgpNJ/Ol376um+GlAWZa88y5KZ1GSyklzS6b79YOFFnAAoCyhbKdxSn3gjnlJbl1a10fxhh0lB4L/xFwMaEeOd8bcWYxMGfg2a6RHWUTuEpWo7ij37xOgJh/UQtV0YyfTdGCJM7VmDFg+sb7AuoTu2iv9vxUsP4XlHoqE9fhU0f4
          x-ms-exchange-antispam-messagedata-chunkcount: 1
          x-ms-exchange-antispam-messagedata-0:
          MqGrDcs9MMjhe0+liD4+kxzYFAKPfA1dCE/K9FpSKDALTdXZHJJglChVX/oiZCzt309cLi//NS53+oTiMN+etGRdDV7amRpuMSeTx3DRF6v1dmbfaAEFterBZ4RTDzPcapdN/puef/zqmxfFLukgcQ==
          x-ms-exchange-transport-forked: True
          Content-Type: multipart/alternative;
          boundary="_000_ME3P282MB1459AEDEB797FB3411DCA0BEDBE19ME3P282MB1459AUSP_"
          MIME-Version: 1.0
          X-OriginatorOrg: outlook.com
          X-MS-Exchange-CrossTenant-AuthAs: Internal
          X-MS-Exchange-CrossTenant-AuthSource: ME3P282MB1459.AUSP282.PROD.OUTLOOK.COM
          X-MS-Exchange-CrossTenant-RMS-PersistedConsumerOrg: 00000000-0000-0000-0000-000000000000
          X-MS-Exchange-CrossTenant-Network-Message-Id: aaef0314-2279-4f89-f6c5-08d94aa28333
          X-MS-Exchange-CrossTenant-originalarrivaltime: 19 Jul 2021 10:46:49.3813
          (UTC)
          X-MS-Exchange-CrossTenant-fromentityheader: Hosted
          X-MS-Exchange-CrossTenant-id: 84df9e7f-e9f6-40af-b435-aaaaaaaaaaaa
          X-MS-Exchange-CrossTenant-rms-persistedconsumerorg: 00000000-0000-0000-0000-000000000000
          X-MS-Exchange-Transport-CrossTenantHeadersStamped: ME4P282MB0952

          --_000_ME3P282MB1459AEDEB797FB3411DCA0BEDBE19ME3P282MB1459AUSP_
          Content-Type: text/plain; charset="gb2312"
          Content-Transfer-Encoding: base64

          SGksDQoNClRoaXMgaXMgYSB0ZXN0IQ0KDQpUb20NCg==

          --_000_ME3P282MB1459AEDEB797FB3411DCA0BEDBE19ME3P282MB1459AUSP_
          Content-Type: text/html; charset="gb2312"
          Content-Transfer-Encoding: quoted-printable

          <html>
          <head>
          <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dgb2312">
          </head>
          <body>
          <div style=3D"font-family: &quot;segoe ui westeuropean&quot;, &quot;segoe u=
      i&quot;, helvetica, arial, sans-serif; font-size: 9.75pt; color: rgb(0, 0, =
      0);">
          Hi,</div>
          <div style=3D"font-family: &quot;segoe ui westeuropean&quot;, &quot;segoe u=
      i&quot;, helvetica, arial, sans-serif; font-size: 9.75pt; color: rgb(0, 0, =
      0);">
          <br>
          </div>
          <div style=3D"font-family: &quot;segoe ui westeuropean&quot;, &quot;segoe u=
      i&quot;, helvetica, arial, sans-serif; font-size: 9.75pt; color: rgb(0, 0, =
      0);">
          This is a test!</div>
          <div style=3D"font-family: &quot;segoe ui westeuropean&quot;, &quot;segoe u=
      i&quot;, helvetica, arial, sans-serif; font-size: 9.75pt; color: rgb(0, 0, =
      0);">
          <br>
          </div>
          <div style=3D"font-family: &quot;segoe ui westeuropean&quot;, &quot;segoe u=
      i&quot;, helvetica, arial, sans-serif; font-size: 9.75pt; color: rgb(0, 0, =
      0);">
          Tom</div>
          </body>
          </html>

          --_000_ME3P282MB1459AEDEB797FB3411DCA0BEDBE19ME3P282MB1459AUSP_--

    #+end_src

    - Delivered-To :: 邮件在被送达目的地址（由SMTP的 ~RCPT TO~ 命令提供）之前可能在多个服务器之间传递。 ~Delivered-To~ 用于记录这些传递的信息。

      [[https://www.easy365manager.com/rfc-5321-and-rfc-5322/][RFC 5321 and RFC 5322]]
      [[https://datatracker.ietf.org/doc/draft-crocker-email-deliveredto/][Delivered-To Email Header Field]]

    - Received :: [[https://www.rfc-editor.org/rfc/rfc5321#section-4.4][RFC5321]]: When an SMTP server receives a message for delivery or further processing, it MUST insert trace ("time stamp" or "Received") information at the beginning of the message content.


    [[https://linuxhint.com/email_header_analysis/][Email Header Analysis]]
    [[https://toolbox.googleapps.com/apps/messageheader/][Google Admin Toolbox Messageheader]]

*** R18

    从用户的观点看，POP3协议中下载并删除模式和下载并保留模式有什么区别吗？

    下载并删除模式在用户代理下载邮件后会将邮件服务器邮箱里的邮件删除，下载保留模式不会删除。

*** R19

    一个机构的Web服务器和邮件服务器可以有完全相同的主机名别名（例如，foo.com）吗？包含邮件服务器主机名的RR有什么样的类型？

    可以，一条类型为MX的记录。

*** R20

    仔细检查收到的电子邮件，查找由使用.edu电子邮件地址的用户发送的报文首部。从其首部，能够确定发送该报文的主机的IP地址吗？对于由Gmail账号发送的报文做相同的事。

    #+begin_quote
    You should be able to see the sender's IP address for a user with an .edu email address. But you will not be able to see the sender's IP address if the user uses a gmail account.
    #+end_quote

    | Hop | Delay     | From                                                                     | By                                                                                                  | With                                   | Time (UTC)           |
    |   1 | *         | named                                                                    | gmailapi.google.com                                                                                 | HTTPREST                               | 7/20/2021 4:47:30 AM |
    |   2 | 1 Second  | mail-yb1-f172.google.com                                                 | SMTP                                                                                                | 7/20/2021 4:47:31 AM                   |                      |
    |   3 | 0 seconds | mail-yb1-f172.google.com 209.85.219.172                                  | VI1EUR06FT043.mail.protection.outlook.com 10.13.6.134                                               | Microsoft SMTP Server (version=TLS1.2) | 7/20/2021 4:47:31 AM |
    |   4 | 0 seconds | VI1EUR06FT043.eop-eur06.prod.protection.outlook.com                      | 2a01:111:e400:fc37::4f	VI1EUR06HT153.eop-eur06.prod.protection.outlook.com 2a01:111:e400:fc37::474 | Microsoft SMTP Server (version=TLS1.2) | 7/20/2021 4:47:31 AM |
    |   5 | 2 seconds | VI1EUR06HT153.eop-eur06.prod.protection.outlook.com 2603:10c6:220:80::15 | ME3P282MB1459.AUSP282.PROD.OUTLOOK.COM                                                              | HTTPS                                  | 7/20/2021 4:47:33    |

*** R21

    在BitTorrent中，假定Alice向Bob提供一个30秒间隔的文件块吞吐量。Bob将必须进行回报，在相同的间隔中向Alice提供文件块吗？为什么？

    Bob不是必须在相同间隔中向Alice提供文件块。根据对换算法，Bob向以最高速率流入的四个邻居和一个随机的邻居发送块，因此Alice可能在其中也可能不在。

*** R22

    考虑一个新对等方Alice加入BitTorrent而不拥有任何文件块。没有任何块，因此她没有任何东西可上载，她无法成为任何其他对等方的前4位上载者。那么Alice将怎样得到她的第一个文件块呢？

    Alice决定了要请求的块之后，向其临近对等方发出请求。这些被请求的对等方由于要每30秒要向一个随机的邻居发送块，因此Alice迟早会得到块。假设Alice向k个邻居发送了请求，每个邻居响应Alice的概率是p，那么Alice在一次请求中得到块的概率是q=1-(1-p)^k，得到块的请求次数的期望是1/q，请求时间的期望是30/q。

*** R23

    覆盖网络是什么？它包括路由器吗？在覆盖网络中边是什么？

    #+begin_quote
    参与文件共享系统的节点和节点之间的逻辑链接组成了P2P文件共享系统中的覆盖网络。如果A和B之间有一个半永久性的TCP连接，就有一个从节点A到节点B的逻辑链接（图论术语中的 "边"）。
    #+end_quote

*** R24

    CDN通常采用两种不同的服务器放置方法之一。列举并简单描述它们。

    1. 深入
       + 该原则是通过在遍及全球的接入ISP中部署服务器集群来深入到ISP的接入网中。其目标是靠近端用户，通过减少端用户和CDN集群之间）链路和路由器的数量，从而改善了用户感受的时延和吞吐量。
       + 因为这种高度分布式设计，维护和管理集群的任务成为挑战。
    2. 邀请做客
       + 该原则是通过在少量关键位置建造大集群来邀请到ISP做客。这些CDN通常将它们的集群放置在因特网交换点（IXP）。
       + 与深入设计原则相比，邀请做客设计通常产生较低的维护和管理开销，可能以对端用户的较高时延和较低吞吐量为代价。

*** R25

    除了如时延、丢包和带宽性能等网络相关的考虑外，设计一种CDN服务器选择策略时还有其他重要因素。它们是什么？

    #+begin_quote
    除了与网络有关的因素外，还有一些重要的因素需要考虑，如负载平衡、昼夜效应、网络内各DNS服务器之间的变化、很少访问的视频的有限可用性，以及缓解可能因热门视频内容而产生的热点的需要。

    [[https://engineering.purdue.edu/~isl/ICDCS11.pdf][Torres, Ruben, et al. "Dissecting video server selection strategies in the YouTube CDN." The 31st IEEE International Conference on. Distributed Computing Systems (ICDCS), 2011.]]

    另一个需要考虑的因素是ISP交付成本--可以选择集群，以便使用特定的ISP来承载CDN到客户的流量，同时考虑到ISP和集群运营商之间合同关系中的不同成本结构。
    #+end_quote

*** R26

    2.7节中所描述的UDP服务器仅需要一个套接字，而TCP服务器需要两个套接字。为什么？如果TCP服务器支持n个并行连接，每条连接来自不同的客户主机，那么TCP服务器将需要多少个套接字？

    #+begin_quote
    对于UDP服务器，没有欢迎套接字，所有来自不同客户的数据都通过这一个套接字进入服务器。对于TCP服务器，有一个欢迎套接字，每次客户启动与服务器的连接时，都会创建一个新的套接字。因此，为了支持n个并行连接，服务器将需要n+1个套接字。
    #+end_quote

*** R27 <<CH2R27>>

    对于2.7节所描述的运行在TCP之上的客户-服务器应用程序，服务器程序为什么必须先于客户程序运行？对于运行在UDP之上的客户-服务器应用程序，客户程序为什么可以先于服务器程序运行？

    对于TCP应用程序，一旦客户程序被执行，它就会尝试与服务器建立一个TCP连接。如果TCP服务器没有运行，那么客户端将无法建立连接。

    #+begin_src sh
      Traceback (most recent call last):
      File "TCPClient.py", line 7, in <module>
      clientSocket.connect((serverName, serverPort))
      ConnectionRefusedError: [Errno 61] Connection refused
    #+end_src

    对于UDP应用程序，客户端在执行时不会立即启动连接。

** 习题
*** P1

    是非判断题。
    1. 假设用户请求由一些文本和3幅图像组成的Web页面。对于这个页面，客户将发送一个请求报文并接收4个响应报文。
    2. 两个不同的Web页面（例如，www.mit.edu/research.html及www.mit.edu/students.html）可以通过同一个持续连接发送。
    3. 在浏览器和初始服务器之间使用非持续连接的话，一个TCP报文段是可能携带两个不同的HTTP服务请求报文的。
    4. 在HTTP响应报文中的Date:首部指出了该响应中对象最后一次修改的时间。
    5. HTTP响应报文决不会具有空的报文体。


    1. 发送4个请求报文，接收4个响应报文。
    2. 正确。
    3. 使用非持续连接，每个请求/响应对经一个单独的TCP连接发送。
    4. Date:首部行指示服务器产生并发送该响应报文的日期和时间。
    5. 错误。

*** P2

    SMS、iMessage和WhatsApp都是智能手机即时通信系统。在因特网上进行一些研究后，为这些系统分别写一段它们所使用协议的文字。然后撰文解释它们的差异所在。

    #+begin_quote
    The Short Message Service is realised by the use of the Mobile Application Part (MAP) of the SS7 protocol, with Short Message protocol elements being transported across the network as fields within the MAP messages.
    --[[https://en.wikipedia.org/wiki/Short_Message_Service_technical_realisation_(GSM)#Protocol][Short Message Service technical realisation (GSM)]]
    #+end_quote

    #+begin_quote
    The iMessage protocol is based on the Apple Push Notification service (APNs)—a proprietary, binary protocol.[19] It sets up a Keep-Alive connection with the Apple servers. Every connection has its own unique code, which acts as an identifier for the route that should be used to send a message to a specific device. The connection is encrypted with TLS using a client-side certificate, that is requested by the device on the activation of iMessage.
    --[[https://en.wikipedia.org/wiki/IMessage#Technology][iMessage]]
    #+end_quote

    #+begin_quote
    WhatsApp uses a customized version of the open standard Extensible Messaging and Presence Protocol (XMPP).[157] Upon installation, it creates a user account using one's phone number as the username (Jabber ID: [phone number]@s.whatsapp.net).
    --[[https://en.wikipedia.org/wiki/WhatsApp#Technical][WhatsApp]]
    #+end_quote

    #+begin_quote
    The original and "native" transport protocol for XMPP is Transmission Control Protocol (TCP), using open-ended XML streams over long-lived TCP connections. As an alternative to the TCP transport, the XMPP community has also developed an HTTP transport for web clients as well as users behind restricted firewalls.
    --[[https://en.wikipedia.org/wiki/XMPP#XMPP_via_HTTP][XMPP]]
    #+end_quote

    #+begin_quote
    iMessage and WhatsApp are different than SMS because they use data plan to send messages and they work on TCP/IP networks, but SMS use the text messaging plan we purchase from our wireless carrier. Moreover, iMessage and WhatsApp support sending photos, videos, files, etc., while the original SMS can only send text message. Finally, iMessage and WhatsApp can work via WiFi, but SMS cannot.
    #+end_quote

*** P3

    考虑一个要获取给定URL的Web文档的HTTP客户。该HTTP服务器的IP地址开始时并不知道。在这种情况下，除了HTTP外，还需要什么运输层和应用层协议？

    还需要的运输层协议：HTTP、DNS，应用层协议：TCP、UDP。

*** P4

    考虑当浏览器发送一个HTTP GET报文时，通过Wireshark俘获到下列ASCII字符串（即这是一个HTTP GET报文的实际内容）。字符<cr><lf>是回车和换行符（即下面文本中的斜体字符串<er>表示了单个回车符，该回车符包含在HTTP首部中的相应位置）。回答下列问题，指出你在下面HTTP GET报文中找到答案的地方。

    #+begin_example
      GET /cs453/index.html HTTP/1.1<cr><lf>
      Host: gaia.cs.umass.edu<cr><lf>
      User-Agent: Mozilla/5.0 ( Windows;U; Windows NT 5.1; en-US; rv:1.7.2) Gec ko/20040804 Netscape/7.2 (ax) <cr><lf>
      Accept:ex t/xml, application/xml, application/xhtml+xml, text/html;q=0.9, text/plain;q=0.8, image/png,*/*;q=0.5 <cr><lf>
      Accept-Language: en-us, en;q=0.5<cr><lf>
      Accept-Encoding: zip, deflate<cr><lf>
      Accept-Charset: ISO -8859-1, utf-8;q=0.7,*;q=0.7<cr><lf>
      Keep-Alive: 300<cr><lf>
      Connection:keep-alive<cr><lf>
      <cr><lf>
    #+end_example

    1. 由浏览器请求的文档的URL是什么？
    2. 该浏览器运行的是HTTP的何种版本？
    3. 该浏览器请求的是一条非持续连接还是一条持续连接？
    4. 该浏览器所运行的主机的IP地址是什么？
    5. 发起该报文的浏览器的类型是什么？在一个HTTP请求报文中，为什么需要浏览器类型？


    1. gaia.cs.umass.edu/cs453/index.html
    2. HTTP/1.1
    3. 持续连接
    4. One would need information from the IP datagrams (that carried the TCP segment that carried the HTTP GET request) to answer this question.
    5. Mozilla/5.0。服务器可以有效地为不同类型的用户代理实际发送相同对象的不同版本。

*** P5

    下面文本中显示的是来自服务器的回答，以响应上述问题中HTTP GET报文。回答下列问题，指出你在下面报文中找到答案的地方。

    #+begin_example
      HTTP/1.1 200 OK<cr><lf>
      Date: Tue, 07 Mar 2008 12:39:45GMT<cr><lf>
      Server: Apache/2.0.52 (Fedora) <cr><lf>
      Last-Modified: Sat, 10 Dec2005 18:27:46 GMT<cr><lf>
      ETag: ”526c3-f22-a88a4c80”<cr><lf>
      AcceptRanges: bytes<cr><lf>
      Content-Length: 3874<cr><lf>
      Keep-Alive: timeout=max=100<cr><lf>
      Connection: Keep-Alive<cr><lf>
      Content-Type: text/html; charset= ISO-8859-1<cr><lf>
      <cr><lf>
      <!doctype html public ”//w3c//dtd html 4.0 transitional//en”><lf>
      <html><lf>
      <head><lf>
      <meta http-equiv=”Content-Type” content=”text/html; charset=iso-8859-1”><lf>
      <meta name=”GENERATOR” content=”Mozilla/4.79 [en] (Windows NT 5.0; U) Netscape]”><lf>
      <title>CMPSCI 453 / 591 /NTU-ST550ASpring 2005 homepage</title><lf>
      </head><lf>
      <much more document text following here (not shown)>
    #+end_example

    1. 服务器能否成功地找到那个文档？该文档提供回答是什么时间？
    2. 该文档最后修改是什么时间？
    3. 文档中被返回的字节有多少？
    4. 文档被返回的前5个字节是什么？该服务器同意一条持续连接吗？


    1. 能，Tue, 07 Mar 2008 12:39:45GMT
    2. Sat, 10 Dec2005 18:27:46 GMT
    3. 3874
    4. <!doc，是

*** P6

    获取HTTP/1.1规范（RFC2616）。回答下面问题:
    1. 解释在客户和服务器之间用于指示关闭待续连接的信令机制。客户、服务器或两者都能发送信令通知连接关闭吗？
    2. HTTP提供了什么加密服务？
    3. 一个客户能够与一个给定的服务器打开3条或更多条并发连接吗？
    4. 如果一个服务器或一个客户检测到连接已经空闲一段时间，该服务器或客户可以关闭两者之间的传输连接。一侧开始关闭连接而另一侧通过该连接传输数据是可能的吗？请解释。


    [[https://datatracker.ietf.org/doc/html/rfc2616][RFC2616]]
    1. Persistent connections provide a mechanism by which a client and a server can signal the close of a TCP connection. This signaling takes place using the Connection header field (section 14.10). Once a close has been signaled, the client MUST NOT send any more requests on that connection. --[[https://datatracker.ietf.org/doc/html/rfc2616#section-8.1.2][8.1.2]]
    2. HTTP没有提供加密服务。
    3. Clients that use persistent connections SHOULD limit the number of simultaneous connections that they maintain to a given server. A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy. --[[https://datatracker.ietf.org/doc/html/rfc2616#section-8.1.4][8.1.4]]
    4. A client, server, or proxy MAY close the transport connection at any time. For example, a client might have started to send a new request at the same time that the server has decided to close the "idle" connection. From the server's point of view, the connection is being closed while it was idle, but from the client's point of view, a request is in progress.

       This means that clients, servers, and proxies MUST be able to recover from asynchronous close events. Client software SHOULD reopen the transport connection and retransmit the aborted sequence of requests without user interaction so long as the request sequence is idempotent (see section 9.1.2). Non-idempotent methods or sequences MUST NOT be automatically retried, although user agents MAY offer a human operator the choice of retrying the request(s). Confirmation by user-agent software with semantic understanding of the application MAY substitute for user confirmation. The automatic retry SHOULD NOT be repeated if the second sequence of requests fails. --[[https://datatracker.ietf.org/doc/html/rfc2616#section-8.1.4][8.1.4]]

*** P7

    假定你在浏览器中点击一条超链接获得Web页面。相关联的URL的IP地址没有缓存在本地主机上，因此必须使用DNS lookup以获得该IP地址。如果主机从DNS得到IP地址之前已经访问了n个DNS服务器；相继产生的RTT依次为RTT_{1}、…、RTT_{n}。进一步假定与链路相关的Web页面只包含一个对象，即由少量的HTML文本组成。令RTT_{0}表示本地主机和包含对象的服务器之间的RTT值。假定该对象传输时间为零，则从该客户点击该超链接到它接收到该对象需要多长时间？

    查询IP地址需要的时间为
    \[ RTT_1 + RTT_2 +\dotsb + RTT_n. \]

    建立TCP连接然后请求并接收对象需要的时间为
    \[ 2RTT_0. \]

    因此总时间为

    \[ 2RTT_0 + RTT_1 + RTT_2 +\dotsb + RTT_n. \]

*** P8

    参照习题P7，假定在同一服务器上某HTML文件引用了8个非常小的对象。忽略发送时间，在下列情况下需要多长时间：
    1. 没有并行TCP连接的非持续HTTP。
    2. 配置有5个并行连接的非持续HTTP。
    3. 持续HTTP。


    1. \[ \sum_1^n RTT_k + 2RTT_0 + 8\times 2RTT_0. \]
    2. \[ \sum_1^n RTT_k + 2RTT_0 + \lceil \frac85 \rceil \times 2RTT_0. \]
    3. \[ \sum_1^n RTT_k + 2RTT_0 + 8RTT_0 \]

*** P9

    考虑图2-12，其中有一个机构的网络和因特网相连。假定对象的平均长度为850 000比特，从这个机构网的浏览器到初始服务器的平均请求率是每秒16个请求。还假定从接入链路的因特网一侧的路由器转发一个HTTP请求开始，到接收到其响应的平均时间是3秒（参见2.2.5节）。将总的平均响应时间建模为平均接人时延（即从因特网路由器到机构路由器的时延）和平均因特网时延之和。对于平均接入时延，使用Δ/(1-Δβ)，式中Δ是跨越接入链路发送一个对象的平均时间，β是对象对该接入链路的平均到达率。
    1. 求出总的平均响应时间。
    2. 现在假定在这个机构LAN中安装了一个缓存器。假定命中率为0.4，求出总的响应时间。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:300px;
    [[./img/fig2-12.png]]

    1. \-
       \begin{align*}
         Δ &= L/R = 850kb/req ÷ 15Mbps ≈ 0.0567s/req, \\
         Δβ &= βL/R = \text{流量强度} = 16req/s × 0.0567s/req = 0.907, \\
         \text{平均响应时间} &= \text{平均接入时延} + \text{平均因特网时延} \\
         &= 0.0567/(1-0.907) + 3 \\
         &≈ 3.61s.
       \end{align*}
    2. 命中的请求直接从缓存器获取，剩下需要流经英特网的流量强度为原来的0.6，这部分请求的平均接入时延为
       \[ 0.0567/(1-0.6×0.907) ≈ 0.124s. \]
       平均响应时间为
       \[ 0.124s + 3s = 3.124s. \]
       因此总的平均响应时间为
       \[ 3.124s×0.6 + 0.01s×0.4 = 1.878s. \]

*** P10

    考虑一条10米短链路，某发送方经过它能够以150bps速率双向传输。假定包含数据的分组是100 000比特长，仅包含控制（如ACK或握手）的分组是200比特长。假定N个并行连接每个都获得1/N的链路带宽。现在考虑HTTP协议，并且假定每个下载对象是1OOKb长，这些初始下载对象包含10个来自相同发送方的引用对象。在这种情况下，经非持续HTTP的并行实例的并行下载有意义吗？现在考虑持续HTTP。你期待这比非持续的情况有很大增益吗？评价并解释你的答案。

    10米的短链路可以忽略掉传播时延，采用非持续并行HTTP下载需要的时间为
    \[ 3 × 200÷150 + 100k÷150 + 3 × 200÷15 + 100k÷15 ≈ 7377s. \]

    采用持续HTTP下载需要的时间为
    \[ 2 × 200÷150 + 11 × (200÷150 + 100k÷150) = 7351s. \]

    非持续并行HTTP浪费的带宽是11个握手分组的RTT，而控制分组比较小，因此差异不大。

*** P11

    考虑在前一个习题中引出的情况。现在假定该链路由Bob和4个其他用户所共享。Bob使用非持续HTTP的并行实例，而其他4个用户使用无并行下载的非待续HTTP。
    1. Bob的并行连接能够帮助他更快地得到Web页面吗？
    2. 如果所有5个用户打开5个非持续HTTP并行实例，那么Bob的并行连接仍将是有好处的吗？为什么？


    1. \-
       + Bob不使用并行连接和其他4个用户同时下载，每个人的链路带宽是150bps÷5=50bps，因此需要的时间为
       \[ 11×(3×200÷50 + 100k÷50)=22132s. \]
       + Bob使用5个并行连接时需要的时间为
       \[ 3×200÷50 + 100k÷50 + 2×(3×200÷16.7+100k÷16.7) ≈ 14060s. \]
    2. 是的，Bob获得的带宽 \(= \frac{\text{Bob的并行连接数}}{\text{总连接数}}×\text{总带宽}. \)

*** P12

    写一个简单的TCP程序，使服务器接收来自客户的行并将其打印在服务器的标准输出上。（可以通过修改本书中的TCPServer.py程序实现上述任务。）编译井执行你的程序。在另一台有浏览器的机器上，设置浏览器的代理服务器为你正在运行服务器程序的机器，同时适当地配笠端口号。这时你的浏览器向服务器发送GET请求报文，你的服务器应当在其标准输出上显示该报文。使用这个平台来确定你的浏览器是否对本地缓存的对象产生了条件GET报文。

    #+INCLUDE: "code/ch2p12_tcp_server.py" src python

*** P13

    SMTP中的MAIL FROM与该邮件报文自身中的From:之间有什么不同？

    SMTP中的MAIL FROM:是SMTP客户向SMTP服务器发送的信息，用于识别邮件的发送者。邮件信息上的From:本身不是SMTP信息，而只是邮件信息正文中的一行。

*** P14

    SMTP是怎样标识一个报文体结束的？HTTP是怎样做的呢？HTTP能够使用与SMTP标识一个报文体结束相同的方法吗？试解释。

    SMTP：客户通过发送一个只包含一个句点的行，向服务器指示该报文结束了。
    HTTP：Content­Length:首部行指示了被发送对象中的字节数。
    不能使用相同的方法，因为HTTP消息可能包含二进制数据，而在SMTP中，消息体必须是7比特ASCII码格式。

*** P15

    阅读用于SMTP的RFC 5321。MTA代表什么？考虑下面收到的垃圾邮件（从一份真实垃圾邮件修改得到）。假定这封垃圾邮件的唯一始作佣者是恶意的，而其他主机是诚实的，指出产生了这封垃圾邮件的恶意主机。

    #+begin_src sh -n
      From - Fri Nov 07 13:41:30 2008
      Return-Path: <tennis5@pp33head.com>
      Received: from barmail.cs.umass.edu (barmail.cs.umass.edu [128.119.240.3]) by cs.umass.edu (8.13.1/8.12.6) for <hg@cs.umass.edu>; Fri, 7 Nov 2008 13:27:10 -0500
      Received: from asusus-4b96 (localhost [127.0.0.1]) by barmail.cs.umass.edu (Spam Firewall) for <hg@cs.umass.edu>; Fri, 7 Nov 2008 13:27:07 -0500 (EST)
      Received: from asusus-4b96 ([58.88.21.177]) by barmail.cs.umass.edu for <hg@cs.umass.edu>; Fri, 07 Nov 2008 13:27:07 -0500 (EST) (ref:2)
      Received: from [58.88.21.177] by inbnd55.exchangeddd.com; Sat, 8 Nov 2008 01:27:07 +0700 (ref:1)
      From: ”Jonny” <tennis5@pp33head.com>
      To: <hg@cs.umass.edu>

      Subject: How to secure your savings
    #+end_src

    SMTP servers and clients provide a mail transport service and therefore act as "Mail Transfer Agents" (MTAs). --[[https://datatracker.ietf.org/doc/html/rfc5321#section-2.3.3][RFC 5321 2.3.3]]

    [[https://helpspot.pobox.com/index.php?pg=kb.page&id=253][The elements of a Received: header]]

    + *Received: from*
    + _the name the sending computer gave for itself_ ( _the name associated with that computer's IP address_ [its IP address])
    + *by*
    + the receiving computer's name (the software that computer uses)
    + *with* protocol
    + *id* id assigned by local computer for logging;
    + timestamp


    The elements in *bold* are the literal words in the header. The _underlined_ elements are the ones that can be manipulated by spammers and scammers.

    正常情况下，第[[(1)]]条记录的接收方 ~inbnd55.exchangeddd.com~ 应该是第[[(2)]]条的发送方。但实际情况是，第二条的发送方是 ~asusus-4b96~ ，这个 ~asusus-4b96~ 隐藏了自己的发送方。因此，这个 ~asusus-4b96~ 就是垃圾邮件的作者。

*** P16

    阅读POP3的RFC，即RFC 1939。UIDL POP3命令的目的是什么？

    #+begin_quote
    The unique-id of a message is an arbitrary server-determined string which uniquely identifies a message within a maildrop and which persists across sessions.

    While it is generally preferable for server implementations to store arbitrarily assigned unique-ids in the maildrop, this specification is intended to permit unique-ids to be calculated as a hash of the message.
    -- [[https://www.ietf.org/rfc/rfc1939.txt][RFC 1939]]
    #+end_quote

*** P17

    考虑用POP3访问你的电子邮件。

    1. 假定你已经配置以下载并删除模式运行的POP邮件客户。完成下列事务：
       #+begin_src sh
         C: list
         S: 1 498
         S: 2 912
         S: .
         C: retr 1
         S: blah blah ...
         S: ..........blah
         S: .
         ?
         ?
       #+end_src

    2. 假定你已经配置以下载并保持模式运行的POP邮件客户。完成下列事务：
       #+begin_src sh
         C: list
         S: 1 498
         S: 2 912
         S: .
         C: retr 1
         S: blah blah ...
         S: ..........blah
         S: .
         ？
         ？
       #+end_src

    3. 假定你已经配置以下载并保持模式运行的POP邮件客户。使用（2）中的记录，假定你检索报文1和2，退出POP，5分钟以后，你再访问POP以检索新电子邮件。假定在这5分钟间隔内，没有新报文发送给你。给出第二种POP会话的记录。

*** P18

    如题:
    1. 什么是whois数据库？
    2. 使用因特网上的各种whois数据库，获得两台DNS服务器的名字。指出你使用的是哪个whois数据库。
    3. 你本地机器上使用nslookup向3台DNS服务器发送DNS查询：你的本地DNS服务器和两台你在（2）中发现的DNS服务器。尝试对类型A、NS和MX报告进行查询。总结你的发现。
    4. 使用nslookup找出一台具有多个IP地址的Web服务器。你所在的机构（学校或公司）的Web服务器具有多个IP地址吗？
    5. 使用ARIN whois数据库，确定你所在大学使用的IP地址范围。
    6. 描述一个攻击者在发动攻击前，能够怎样利用whois数据库和nslookup工具来执行对一个机构的侦察。
    7. 讨论为什么whois数据库应当为公众所用。


    1. WHOIS is a query and response protocol that is widely used for querying databases that store the registered users or assignees of an Internet resource, such as a domain name, an IP address block or an autonomous system, but is also used for a wider range of other information. The protocol stores and delivers database content in a human-readable format.[1] The current iteration of the WHOIS protocol was drafted by the Internet Society, and is documented in RFC 3912. --[[https://en.wikipedia.org/wiki/WHOIS][WHOIS From Wikipedia]]
    2. NS07.DOMAINCONTROL.COM NS1.QQ.COM whois.cloud.tencent.com/domain
    3. \-
       [[https://www.cnblogs.com/EasonJim/p/10017100.html][域名DNS解析工具ping/nslookup/dig/host]]
       #+begin_src sh
         % host -t A 163.com
         163.com has address 198.18.5.96
         % host -t NS 163.com
         163.com name server ns1.nease.net.
         163.com name server ns8.166.com.
         163.com name server ns5.nease.net.
         163.com name server ns4.nease.net.
         163.com name server ns6.nease.net.
         163.com name server ns3.nease.net.
         163.com name server ns2.166.com.
         % host -t MX 163.com
         163.com mail is handled by 50 163mx00.mxmail.netease.com.
         163.com mail is handled by 10 163mx02.mxmail.netease.com.
         163.com mail is handled by 10 163mx01.mxmail.netease.com.
         163.com mail is handled by 10 163mx03.mxmail.netease.com.
         % host -t A 163.com ns1.qq.com
         Using domain server:
         Name: ns1.qq.com
         Address: 198.18.5.121#53
         Aliases:

         Host 163.com not found: 5(REFUSED)
       #+end_src
    4. \-
       #+begin_src sh
         % dig amazon.com

         ; <<>> DiG 9.10.6 <<>> amazon.com
         ;; global options: +cmd
         ;; Got answer:
         ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 42497
         ;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 6, ADDITIONAL: 8

         ;; QUESTION SECTION:
         ;amazon.com.			IN	A

         ;; ANSWER SECTION:
         amazon.com.		401	IN	A	54.239.28.85
         amazon.com.		401	IN	A	176.32.103.205
         amazon.com.		401	IN	A	205.251.242.103

         ;; AUTHORITY SECTION:
         amazon.com.		2784	IN	NS	pdns1.ultradns.net.
         amazon.com.		2784	IN	NS	ns2.p31.dynect.net.
         amazon.com.		2784	IN	NS	ns1.p31.dynect.net.
         amazon.com.		2784	IN	NS	ns4.p31.dynect.net.
         amazon.com.		2784	IN	NS	ns3.p31.dynect.net.
         amazon.com.		2784	IN	NS	pdns6.ultradns.co.uk.

         ;; ADDITIONAL SECTION:
         pdns1.ultradns.net.	2414	IN	A	204.74.108.1
         ns4.p31.dynect.net.	85678	IN	A	204.13.251.31
         ns3.p31.dynect.net.	84329	IN	A	208.78.71.31
         ns2.p31.dynect.net.	85270	IN	A	204.13.250.31
         ns1.p31.dynect.net.	79027	IN	A	208.78.70.31
         pdns6.ultradns.co.uk.	2740	IN	A	204.74.115.1
         pdns1.ultradns.net.	2367	IN	AAAA	2001:502:f3ff::1
         pdns6.ultradns.co.uk.	3016	IN	AAAA	2610:a1:1017::1

         ;; Query time: 2 msec
         ;; SERVER: 192.168.2.1#53(192.168.2.1)
         ;; WHEN: Thu Jul 29 11:13:51 CST 2021
         ;; MSG SIZE  rcvd: 377

         %
       #+end_src
    5. \-
       #+begin_src sh
         $ whois 128.2.10.163
         % IANA WHOIS server
         % for more information on IANA, visit http://www.iana.org
         % This query returned 1 object

         refer:        whois.arin.net

         inetnum:      128.0.0.0 - 128.255.255.255
         organisation: Administered by ARIN
         status:       LEGACY

         whois:        whois.arin.net

         changed:      1993-05
         source:       IANA

         # whois.arin.net

         NetRange:       128.2.0.0 - 128.2.255.255
         CIDR:           128.2.0.0/16
         NetName:        CMU-NET
         NetHandle:      NET-128-2-0-0-1
         Parent:         NET128 (NET-128-0-0-0-0)
         NetType:        Direct Assignment
         OriginAS:       AS9
         Organization:   Carnegie Mellon University (CARNEG-Z)
         RegDate:        1984-04-17
         Updated:        2012-04-02
         Ref:            https://rdap.arin.net/registry/ip/128.2.0.0


         OrgName:        Carnegie Mellon University
         OrgId:          CARNEG-Z
         Address:        Cyert Hall 215
         Address:        5000 Forbes Avenue
         City:           Pittsburgh
         StateProv:      PA
         PostalCode:     15213
         Country:        US
         RegDate:        2009-12-01
         Updated:        2020-03-27
         Ref:            https://rdap.arin.net/registry/entity/CARNEG-Z
       #+end_src
    6. 攻击者可以使用whois数据库和nslookup工具来确定目标机构的IP地址范围、DNS服务器地址等。
    7. 通过分析攻击数据包的源地址，受害者可以使用whois来获得攻击来自的域的信息，并可能通知源域的管理员。

*** P19

    在本习题中，我们使用在Unix和Linux主机上可用的dig工具来探索DNS服务器的等级结构。图2-18讲过，在DNS等级结构中较高的DNS服务器授权对该等级结构中较低DNS服务器的DNS请求，这是通过向DNS客户发送回那台较低层次的DNS服务器的名字来实现的。先阅读dig的帮助页，再回答下列问题。
    1. 从一台根DNS服务器（从根服务器[a-m].root-server.net之一）开始，通过使用dig得到你所在系的Web服务器的IP地址，发起一系列查询。显示回答你的查询的授权链中的DNS服务器的名字列表。
    2. 对几个流行Web站点如google.com、yahoo.com或amazon.com，重复上一小题。


    #+CAPTION:
    #+NAME: fig2-18
    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:300px;
    [[./img/fig2-18.png]]

    1. \-
       #+begin_src sh
         % dig shichaoxia.com +trace

         ; <<>> DiG 9.10.6 <<>> shichaoxia.com +trace
         ;; global options: +cmd
            .			85537	IN	NS	i.root-servers.net.
            .			85537	IN	NS	a.root-servers.net.
            .			85537	IN	NS	l.root-servers.net.
            .			85537	IN	NS	m.root-servers.net.
            .			85537	IN	NS	g.root-servers.net.
            .			85537	IN	NS	h.root-servers.net.
            .			85537	IN	NS	f.root-servers.net.
            .			85537	IN	NS	d.root-servers.net.
            .			85537	IN	NS	c.root-servers.net.
            .			85537	IN	NS	j.root-servers.net.
            .			85537	IN	NS	e.root-servers.net.
            .			85537	IN	NS	k.root-servers.net.
            .			85537	IN	NS	b.root-servers.net.
         ;; Received 811 bytes from 192.168.2.1#53(192.168.2.1) in 1 ms

            com.			172800	IN	NS	a.gtld-servers.net.
            com.			172800	IN	NS	b.gtld-servers.net.
            com.			172800	IN	NS	c.gtld-servers.net.
            com.			172800	IN	NS	d.gtld-servers.net.
            com.			172800	IN	NS	e.gtld-servers.net.
            com.			172800	IN	NS	f.gtld-servers.net.
            com.			172800	IN	NS	g.gtld-servers.net.
            com.			172800	IN	NS	h.gtld-servers.net.
            com.			172800	IN	NS	i.gtld-servers.net.
            com.			172800	IN	NS	j.gtld-servers.net.
            com.			172800	IN	NS	k.gtld-servers.net.
            com.			172800	IN	NS	l.gtld-servers.net.
            com.			172800	IN	NS	m.gtld-servers.net.
            com.			86400	IN	DS	30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766
            com.			86400	IN	RRSIG	DS 8 1 86400 20210810150000 20210728140000 26838 . hduKd0LYz1zToFQsR5rzy3/EVMy9u018rmjgVwmah+FNUnDtOXTnlNtH 7RgifGSTcfLyZzkbHtiFr3LAjZ7SusPNcNZ9JN3/W+VBK+bIBVl3HLm2 2jYLCOWXwzcj6Eh9Ns02Bb18z19YiGjaUqTCnXrNu/xVsboS3snb39Zh kPeqpooTuLzhXXGyBFtujNb0ylqr04hPajlbGt0L+y9xtdpb0wdw6VC1 OYcRDOOOs4fcMmUQQljKEXOJDFx8ZOkRl+IQgmhNVUExTusm4VOvWJCt owRUQzsKmdkM6Zjt9j+NbiQtaaP1QKY+IKvB8rmb0XviFmRkGgMWipc4 CMYAdQ==
         ;; Received 1174 bytes from 199.9.14.201#53(b.root-servers.net) in 429 ms

            shichaoxia.com.		172800	IN	NS	ns07.domaincontrol.com.
            shichaoxia.com.		172800	IN	NS	ns08.domaincontrol.com.
            CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM
            CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20210804042506 20210728031506 39343 com. JbHorESe6bPfTnE7XaDClJq8MAv0wq1AxJO/4JZCLV4iyV5qEMZF1UZp bun8Fu5VHLDxq5aK7PG8AN868DEpCCcCPW6e6ZBfrAvW/5/nsYTJVrog 5xRaHuDwkV90iJpTdKxO1z7kfL8t4cMoAZofS5Idekfg0zNPMZvmnuuf JTTXbLDTzmfgGn/SJDPRA2mn6Coxn14IwaP32yLViHKgpQ==
            7M0BP9VTEHA5TC2H5VRLQ3QV3PB8OV9L.com. 86400 IN NSEC3 1 1 0 - 7M0CLFBKS8DDVS9RV7TU06AL3VQP3C8R  NS DS RRSIG
            7M0BP9VTEHA5TC2H5VRLQ3QV3PB8OV9L.com. 86400 IN RRSIG NSEC3 8 2 86400 20210804051749 20210728040749 39343 com. Dw2TH+tAqcuS8sMe4waYysa4LaX7pWg7fCMTWT2agS956wJt/ICnpwpi biwoCAHcjSUrTmDc91/WI4KoqEiyU3BNGh/afnX7TG1hx5XFc8ifv1MU pj5ZlPb0PfDnq1ItmN2msmr4nKNiJ7gCardn1teWs/ZzvpCeuMQ42I+m jw4bV154cbS9WFv0AG52RoweTdtM9zaUGEoNVi1HHNO3Dg==
         ;; Received 732 bytes from 192.41.162.30#53(l.gtld-servers.net) in 188 ms

            shichaoxia.com.		600	IN	A	34.102.136.180
            shichaoxia.com.		3600	IN	NS	ns08.domaincontrol.com.
            shichaoxia.com.		3600	IN	NS	ns07.domaincontrol.com.
         ;; Received 111 bytes from 173.201.71.4#53(ns08.domaincontrol.com) in 181 ms

            %
       #+end_src

    2. \-
       #+begin_src sh
         % dig google.com +trace

         ; <<>> DiG 9.10.6 <<>> google.com +trace
         ;; global options: +cmd
            .			85351	IN	NS	i.root-servers.net.
            .			85351	IN	NS	a.root-servers.net.
            .			85351	IN	NS	l.root-servers.net.
            .			85351	IN	NS	m.root-servers.net.
            .			85351	IN	NS	g.root-servers.net.
            .			85351	IN	NS	h.root-servers.net.
            .			85351	IN	NS	f.root-servers.net.
            .			85351	IN	NS	d.root-servers.net.
            .			85351	IN	NS	c.root-servers.net.
            .			85351	IN	NS	j.root-servers.net.
            .			85351	IN	NS	e.root-servers.net.
            .			85351	IN	NS	k.root-servers.net.
            .			85351	IN	NS	b.root-servers.net.
         ;; Received 811 bytes from 192.168.2.1#53(192.168.2.1) in 2 ms

            com.			172800	IN	NS	a.gtld-servers.net.
            com.			172800	IN	NS	b.gtld-servers.net.
            com.			172800	IN	NS	c.gtld-servers.net.
            com.			172800	IN	NS	d.gtld-servers.net.
            com.			172800	IN	NS	e.gtld-servers.net.
            com.			172800	IN	NS	f.gtld-servers.net.
            com.			172800	IN	NS	g.gtld-servers.net.
            com.			172800	IN	NS	h.gtld-servers.net.
            com.			172800	IN	NS	i.gtld-servers.net.
            com.			172800	IN	NS	j.gtld-servers.net.
            com.			172800	IN	NS	k.gtld-servers.net.
            com.			172800	IN	NS	l.gtld-servers.net.
            com.			172800	IN	NS	m.gtld-servers.net.
            com.			86400	IN	DS	30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766
            com.			86400	IN	RRSIG	DS 8 1 86400 20210810150000 20210728140000 26838 . hduKd0LYz1zToFQsR5rzy3/EVMy9u018rmjgVwmah+FNUnDtOXTnlNtH 7RgifGSTcfLyZzkbHtiFr3LAjZ7SusPNcNZ9JN3/W+VBK+bIBVl3HLm2 2jYLCOWXwzcj6Eh9Ns02Bb18z19YiGjaUqTCnXrNu/xVsboS3snb39Zh kPeqpooTuLzhXXGyBFtujNb0ylqr04hPajlbGt0L+y9xtdpb0wdw6VC1 OYcRDOOOs4fcMmUQQljKEXOJDFx8ZOkRl+IQgmhNVUExTusm4VOvWJCt owRUQzsKmdkM6Zjt9j+NbiQtaaP1QKY+IKvB8rmb0XviFmRkGgMWipc4 CMYAdQ==
         ;; Received 1170 bytes from 199.7.83.42#53(l.root-servers.net) in 24 ms

            google.com.		60	IN	A	8.7.198.46
         ;; Received 54 bytes from 192.41.162.30#53(l.gtld-servers.net) in 13 ms

            % dig yahoo.com +trace

            ; <<>> DiG 9.10.6 <<>> yahoo.com +trace
         ;; global options: +cmd
            .			85332	IN	NS	i.root-servers.net.
            .			85332	IN	NS	a.root-servers.net.
            .			85332	IN	NS	l.root-servers.net.
            .			85332	IN	NS	m.root-servers.net.
            .			85332	IN	NS	g.root-servers.net.
            .			85332	IN	NS	h.root-servers.net.
            .			85332	IN	NS	f.root-servers.net.
            .			85332	IN	NS	d.root-servers.net.
            .			85332	IN	NS	c.root-servers.net.
            .			85332	IN	NS	j.root-servers.net.
            .			85332	IN	NS	e.root-servers.net.
            .			85332	IN	NS	k.root-servers.net.
            .			85332	IN	NS	b.root-servers.net.
         ;; Received 811 bytes from 192.168.2.1#53(192.168.2.1) in 3 ms

            com.			172800	IN	NS	a.gtld-servers.net.
            com.			172800	IN	NS	b.gtld-servers.net.
            com.			172800	IN	NS	c.gtld-servers.net.
            com.			172800	IN	NS	d.gtld-servers.net.
            com.			172800	IN	NS	e.gtld-servers.net.
            com.			172800	IN	NS	f.gtld-servers.net.
            com.			172800	IN	NS	g.gtld-servers.net.
            com.			172800	IN	NS	h.gtld-servers.net.
            com.			172800	IN	NS	i.gtld-servers.net.
            com.			172800	IN	NS	j.gtld-servers.net.
            com.			172800	IN	NS	k.gtld-servers.net.
            com.			172800	IN	NS	l.gtld-servers.net.
            com.			172800	IN	NS	m.gtld-servers.net.
            com.			86400	IN	DS	30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766
            com.			86400	IN	RRSIG	DS 8 1 86400 20210810150000 20210728140000 26838 . hduKd0LYz1zToFQsR5rzy3/EVMy9u018rmjgVwmah+FNUnDtOXTnlNtH 7RgifGSTcfLyZzkbHtiFr3LAjZ7SusPNcNZ9JN3/W+VBK+bIBVl3HLm2 2jYLCOWXwzcj6Eh9Ns02Bb18z19YiGjaUqTCnXrNu/xVsboS3snb39Zh kPeqpooTuLzhXXGyBFtujNb0ylqr04hPajlbGt0L+y9xtdpb0wdw6VC1 OYcRDOOOs4fcMmUQQljKEXOJDFx8ZOkRl+IQgmhNVUExTusm4VOvWJCt owRUQzsKmdkM6Zjt9j+NbiQtaaP1QKY+IKvB8rmb0XviFmRkGgMWipc4 CMYAdQ==
         ;; Received 1169 bytes from 198.97.190.53#53(h.root-servers.net) in 314 ms

            yahoo.com.		172800	IN	NS	ns1.yahoo.com.
            yahoo.com.		172800	IN	NS	ns5.yahoo.com.
            yahoo.com.		172800	IN	NS	ns2.yahoo.com.
            yahoo.com.		172800	IN	NS	ns3.yahoo.com.
            yahoo.com.		172800	IN	NS	ns4.yahoo.com.
            CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM
            CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20210804042506 20210728031506 39343 com. JbHorESe6bPfTnE7XaDClJq8MAv0wq1AxJO/4JZCLV4iyV5qEMZF1UZp bun8Fu5VHLDxq5aK7PG8AN868DEpCCcCPW6e6ZBfrAvW/5/nsYTJVrog 5xRaHuDwkV90iJpTdKxO1z7kfL8t4cMoAZofS5Idekfg0zNPMZvmnuuf JTTXbLDTzmfgGn/SJDPRA2mn6Coxn14IwaP32yLViHKgpQ==
            GPIOQSOL8RGEVQ13DFAMNDNPA5VTHUEJ.com. 86400 IN NSEC3 1 1 0 - GPIOVE5CC3CA0D1H14G1GI4J0835GEKB  NS DS RRSIG
            GPIOQSOL8RGEVQ13DFAMNDNPA5VTHUEJ.com. 86400 IN RRSIG NSEC3 8 2 86400 20210804051835 20210728040835 39343 com. lfzIQ5PC5O6qeiPxT8aSGHK1ITV0efIye01IZxkAxpZa8l7fzND2tQ9t RFt3ZXuFg0I5nvTja3yIoHNZII99h1/gkSrWBhJ4Cw5Zg7kP/pUUpErB 37DM4/6S8uhoskX2qSpVJBikE1VT04rA0wR5iu/Rjoj9QQVDmf/KFMNR R9RLtVEyIxK6FW+Tih8ePbTuygmOFB2AMxqoIo4J3ktCaw==
         ;; Received 869 bytes from 192.54.112.30#53(h.gtld-servers.net) in 208 ms

            yahoo.com.		1800	IN	A	74.6.143.26
            yahoo.com.		1800	IN	A	74.6.231.21
            yahoo.com.		1800	IN	A	74.6.231.20
            yahoo.com.		1800	IN	A	98.137.11.163
            yahoo.com.		1800	IN	A	74.6.143.25
            yahoo.com.		1800	IN	A	98.137.11.164
            yahoo.com.		172800	IN	NS	ns1.yahoo.com.
            yahoo.com.		172800	IN	NS	ns2.yahoo.com.
            yahoo.com.		172800	IN	NS	ns3.yahoo.com.
            yahoo.com.		172800	IN	NS	ns4.yahoo.com.
            yahoo.com.		172800	IN	NS	ns5.yahoo.com.
         ;; Received 416 bytes from 68.180.131.16#53(ns1.yahoo.com) in 171 ms

            % dig amazon.com +trace

            ; <<>> DiG 9.10.6 <<>> amazon.com +trace
         ;; global options: +cmd
            .			85286	IN	NS	i.root-servers.net.
            .			85286	IN	NS	a.root-servers.net.
            .			85286	IN	NS	l.root-servers.net.
            .			85286	IN	NS	m.root-servers.net.
            .			85286	IN	NS	g.root-servers.net.
            .			85286	IN	NS	h.root-servers.net.
            .			85286	IN	NS	f.root-servers.net.
            .			85286	IN	NS	d.root-servers.net.
            .			85286	IN	NS	c.root-servers.net.
            .			85286	IN	NS	j.root-servers.net.
            .			85286	IN	NS	e.root-servers.net.
            .			85286	IN	NS	k.root-servers.net.
            .			85286	IN	NS	b.root-servers.net.
         ;; Received 811 bytes from 192.168.2.1#53(192.168.2.1) in 10 ms

            com.			172800	IN	NS	a.gtld-servers.net.
            com.			172800	IN	NS	b.gtld-servers.net.
            com.			172800	IN	NS	c.gtld-servers.net.
            com.			172800	IN	NS	d.gtld-servers.net.
            com.			172800	IN	NS	e.gtld-servers.net.
            com.			172800	IN	NS	f.gtld-servers.net.
            com.			172800	IN	NS	g.gtld-servers.net.
            com.			172800	IN	NS	h.gtld-servers.net.
            com.			172800	IN	NS	i.gtld-servers.net.
            com.			172800	IN	NS	j.gtld-servers.net.
            com.			172800	IN	NS	k.gtld-servers.net.
            com.			172800	IN	NS	l.gtld-servers.net.
            com.			172800	IN	NS	m.gtld-servers.net.
            com.			86400	IN	DS	30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766
            com.			86400	IN	RRSIG	DS 8 1 86400 20210810150000 20210728140000 26838 . hduKd0LYz1zToFQsR5rzy3/EVMy9u018rmjgVwmah+FNUnDtOXTnlNtH 7RgifGSTcfLyZzkbHtiFr3LAjZ7SusPNcNZ9JN3/W+VBK+bIBVl3HLm2 2jYLCOWXwzcj6Eh9Ns02Bb18z19YiGjaUqTCnXrNu/xVsboS3snb39Zh kPeqpooTuLzhXXGyBFtujNb0ylqr04hPajlbGt0L+y9xtdpb0wdw6VC1 OYcRDOOOs4fcMmUQQljKEXOJDFx8ZOkRl+IQgmhNVUExTusm4VOvWJCt owRUQzsKmdkM6Zjt9j+NbiQtaaP1QKY+IKvB8rmb0XviFmRkGgMWipc4 CMYAdQ==
         ;; Received 1170 bytes from 192.58.128.30#53(j.root-servers.net) in 209 ms

            amazon.com.		172800	IN	NS	pdns1.ultradns.net.
            amazon.com.		172800	IN	NS	pdns6.ultradns.co.uk.
            amazon.com.		172800	IN	NS	ns1.p31.dynect.net.
            amazon.com.		172800	IN	NS	ns3.p31.dynect.net.
            amazon.com.		172800	IN	NS	ns2.p31.dynect.net.
            amazon.com.		172800	IN	NS	ns4.p31.dynect.net.
            CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM
            CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20210804042506 20210728031506 39343 com. JbHorESe6bPfTnE7XaDClJq8MAv0wq1AxJO/4JZCLV4iyV5qEMZF1UZp bun8Fu5VHLDxq5aK7PG8AN868DEpCCcCPW6e6ZBfrAvW/5/nsYTJVrog 5xRaHuDwkV90iJpTdKxO1z7kfL8t4cMoAZofS5Idekfg0zNPMZvmnuuf JTTXbLDTzmfgGn/SJDPRA2mn6Coxn14IwaP32yLViHKgpQ==
            K200LV67UEV5N6PKCVAFB6LH7AOATTMA.com. 86400 IN NSEC3 1 1 0 - K201DAGIUALSSFGADN4DHE7N9Q0IROJ1  NS DS RRSIG
            K200LV67UEV5N6PKCVAFB6LH7AOATTMA.com. 86400 IN RRSIG NSEC3 8 2 86400 20210803043037 20210727032037 39343 com. MbOTx4oAy7msW5CJarPQ61lDToMsXW7oeYigQrUtGjyV0BXcLz4FJbNy 3TwrjB3z63hFUw433Jda4RGzCmQ5xAtTjL64govMb2TIkOg9vJkYxpvZ NiOOICNsRbPShiQnuc9OZTikoKYp+wt1FGJTDnLZDE04CLQn1eKau+EM sL0tOdi1oVZN1qRdiGJpp4vnFa6udXczQroK5h/HRooyYw==
         ;; Received 737 bytes from 192.52.178.30#53(k.gtld-servers.net) in 184 ms

            amazon.com.		60	IN	A	205.251.242.103
            amazon.com.		60	IN	A	176.32.103.205
            amazon.com.		60	IN	A	54.239.28.85
            amazon.com.		3600	IN	NS	ns4.p31.dynect.net.
            amazon.com.		3600	IN	NS	ns3.p31.dynect.net.
            amazon.com.		3600	IN	NS	pdns6.ultradns.co.uk.
            amazon.com.		3600	IN	NS	ns1.p31.dynect.net.
            amazon.com.		3600	IN	NS	ns2.p31.dynect.net.
            amazon.com.		3600	IN	NS	pdns1.ultradns.net.
         ;; Received 239 bytes from 208.78.70.31#53(ns1.p31.dynect.net) in 328 ms

            %
       #+end_src

*** P20

    假定你能够访问所在系的本地DNS服务器中的缓存。你能够提出一种方法来粗略地确定在你所在系的用户中最为流行的Web服务器（你所在系以外）吗？解释原因。
    #+begin_quote
    我们可以定期对本地DNS服务器中的DNS缓存进行快照。在DNS缓存中出现频率最高的Web服务器是最受欢迎的服务器。这是因为如果有更多的用户对某个网络服务器感兴趣，那么用户对该服务器的DNS请求就会更频繁地发送。因此，该网络服务器将更频繁地出现在DNS缓存中。

    [[https://conferences.sigcomm.org/imc/2003/papers/p311-wills1.pdf][Wills, Craig E., Mikhail Mikhailov, and Hao Shang. "Inferring relative popularity of internet applications by actively querying dns caches." Proceedings of the 3rd ACM SIGCOMM conference on Internet measurement. 2003.]]
    #+end_quote

*** P21

    假设你所在系具有一台用于系里所有计算机的本地DNS服务器。你是普通用户（即你不是网络/系统管理员）。你能够确定是否在几秒前从你系里的一台计算机可能访问过一台外部Web站点吗？解释原因。

    #+begin_quote
    是的，我们可以用dig来查询本地DNS服务器中的那个网站。

    例如，"dig cnn.com"将返回找到cnn.com的查询时间。如果cnn.com在几秒钟前刚被访问过，那么cnn.com的条目就被缓存在本地DNS缓存中，所以查询时间为0毫秒。否则，查询时间就会很大。
    #+end_quote

*** P22

    考虑向N个对等方分发F=15Gb的一个文件。该服务器具有u_{s}=30Mbps的上载速率，每个对等方具有d_{i}=2Mbps的下载速率和上载速率u。对于N=10、100和1000并且u=300kbps、700kbps和2Mbps，对于N和u的每种组合绘制出确定最小分发时间的图表。需要分别针对客户-服务器分发和P2P分发两种情况制作。


    #+CAPTION: 客户-服务器分发时间（s）
    | N \ u(kbps) |    300 |    700 |  20000 |
    |-------------+--------+--------+--------|
    |          10 |   7500 |   7500 |   7500 |
    |         100 |  50000 |  50000 |  50000 |
    |        1000 | 500000 | 500000 | 500000 |

    N=10,u=300kbps时，D=max{10×15Gb/30Mbps,15Gb/2Mbps}=7500s

    #+CAPTION: P2P分发时间（s）
    | N \ u(kbps) |   300 |   700 | 20000 |
    |-------------+-------+-------+-------|
    |          10 |  7500 |  7500 |  7500 |
    |         100 | 25000 | 15000 |  6520 |
    |        1000 | 45500 | 20500 |  7390 |

    N=10,u=300kbps时，D=max{15Gb/30Mbps,15Gb/2Mbps,10×15Gb/(30Mbps+10×300kbps)}=7500s

*** P23

    考虑使用一种客户-服务器体系结构向N个对等方分发一个F比特的文件。假定一种某服务器能够同时向多个对等方传输的流体模型，只要组合速率不超过u_{s}，则以不同的速率向每个对等方传输。
    1. 假定u_{s}/N⩽d_{min}。定义一个具有NF/u_{s}分发时间的分发方案。
    2. 假定u_{s}/N⩾d_{min}。定义一个具有F/d_{min}分发时间的分发方案。
    3. 得出最小分发时间通常是由max{NF/u_{s}, F/d_{min}}所决定的结论。


    服务器以u=u_{s}/N的速率向每个客户传输文件；客户以速率d=d_{min}下载。传输完成的时间取决于慢的一方：如果u小，则结果是F/u=NF/u_{s}；如果d小，则结果是F/d=F/d_{min}。

*** P24

    考虑使用P2P体系结构向N个用户分发F比特的一个文件。假定一种流体模型。为了简化起见，假定d_{min}很大，因此对等方下载带宽不会成为瓶颈。
    1. 假定u_{s}⩽(u_{s}+u_{1}+...+u_{N})/N。定义一个具有F/u_{s}分发时间的分发方案。
    2. 假定u_{s}⩾(u_{s}+u_{1}+...+u_{N})/N。定义一个具有NF/(u_{s}+u_{1}+...+u_{N})分发时间的分发方案。
    3. 得出最小分发时间通常是由max{F/u_{s}, NF/(u_{s}+u_{1}+...+u_{N})}所决定的结论。


    1. 设u=u_{1}+u_{2}+...u_{n}，有

       \[ u_s ⩽ \frac{u_s+u}{N}, \]
       \[ (N-1)u_s ⩽ u. \]

       将文件分成N块，第i块的文件大小是(u_{i}/u)F，服务器以速率r_{i}=(u_{i}/u)u_{s}向第i个对等方传输文件的第i块。接收到文件块的对等方向其余N-1个对等方以r_{i}速率发送该块。对等方i的总发送速率为

       \[ (N-1)r_{i} = \frac{(N-1)u_s}{u}u_i ⩽ u_i, \]

       满足u_i的传输要求。

       对等方i的总接收速率为

       \[ r_i + \sum_{\substack{1⩽k⩽N\\k \not =i}}r_k = u_s. \]

       因此每个对等方接收文件的时间为 \(F/u_{s}\)。

    2. 设 \(u=u_{1}+u_{2}+...u_{n}\)。

       将文件分为 \(N+1\) 部分，服务器向节点 \(i\) 以速率 \(r_{i}=u_i/(N-1)\) 发送第 \(i\) 部分。每个节点接收到比特后就以 \(r_i\) 的速率向其余 \(N-1\) 个节点发送文件。另外，服务器还以 \(r_{N+1}=(u_s-u/(N-1))/N\) 的速率向 \(N\) 个节点发送第 \(N+1\) 部分。

       服务器的总发送速率为

       \[ r_1 +\dotsb + r_N + Nr_{N+1} = u/(N-1) + u_s + u/(N-1) = u_s, \]

       满足要求。

       每个节点的总发送速率为

       \[ (N-1)r_i = u_i, \]

       满足要求。

       每个节点的总接收速率为

       \[ r_i + r_{N+1} + \sum_{\substack{1⩽k⩽N\\k \not =i}}r_k = u/(N-1) + (u_s-u/(N-1))/N = (u_s+u)/N, \]

       因此需要的时间是 \(NF/(u_s+u)\)。

*** P25

    考虑在一个有N个活跃对等方的覆盖网络中，每对对等方有一条活跃的TCP连接。此外，假定该TCP连接通过总共M台路由器。在对应的覆盖网络中，有多少节点和边？

    N个节点，N(N-1)/2条边。

*** P26

    假定Bob加入BitTorrent，但他不希望向任何其他对等方上载任何数据（因此称为搭便车）。
    1. Bob声称他能够收到由该社区共享的某文件的完整副本。Bob所言是可能的吗？为什么？
    2. Bob进一步声称他还能够更为有效地进行他的"搭便车”，方法是利用所在系的计算机实验室中的多台计算机（具有不同的IP地址）。他怎样才能做到这些呢？


    1. 有可能，只要在洪流中待的够久，Bob总有可能通过接收随机疏通获得文件块。
    2. 他可以在每个主机上运行一个客户端，让每个客户端搭便车，并将从不同主机上收集到的数据块合并成一个文件。

*** P27

    考虑一个具有N个视频版本（具有N个不同的速率和质拉）和N个音频版本（具有N个不同的速率和质量）的DASH系统。假设我们想允许播放者在任何时间选择N个视频版本和N个音频版本之一：
    1. 如果我们生成音频与视频混合的文件，因此服务器在任何时间仅发送一个媒体流，该服务器将需要存储多少个文件（每个文件有一个不同的URL）？
    2. 如果该服务器分别发送音频流和视频流并且与客户同步这些流，该服务器将需要存储多少个文件？


    1. \( N \)
    2. \( N+N \)

*** P28

    在一台主机上安装编译TCPCLient和UDPClient Python程序，在另一台主机上安装编译TCPServer和UDPServer程序。
    1. 假设你在运行TCPServer之前运行TCPClient，将发生什么现象？为什么？
    2. 假设你在运行UDPServer之前运行UDPClient，将发生什么现象？为什么？
    3. 如果你对客户端和服务器端使用了不同的端口，将发生什么现象？


    见[[CH2R27][R27]]。

*** P29

    假定在UDPClient.py中在创建套接字后增加了下面一行：
    ~clientSocket.bind((''，5432))~
    有必要修改UDPServer.py吗？UDPClient和UDPServer中的套接字端口号是多少？在变化之前它们是多少？

    #+INCLUDE: "code/ch2p29_udp_server.py" src python

    #+INCLUDE: "code/ch2p29_udp_client.py" src python

    运行程序后，服务器程序打印的结果：

    #+begin_src sh
      UDP server up and listening
      Message from Client: b'Hello UDP Server'
      Client IP Address: ('127.0.0.1', 57156)
    #+end_src

    增加 ~clientSocket.bind((''，5432))~ 这一行之后没必要修改服务器程序。在修改之前客户程序的端口是系统随机指定的57156，而增加之后是手动设置为5432。服务器程序的端口都是20001。

*** P30

    你能够配置浏览器以打开对某Web站点的多个井行连接吗？有大批的并行TCP连接的优点和缺点是什么？

    Chromium内核的浏览器设置：chrome://flags/#enable-parallel-downloading。

    优点是提升下载速度，缺点是占用更多物理带宽。

*** P31

    我们已经看到因特网TCP套接字将数据处理为字节流，而UDP套接字识别报文边界。面向字节API与显式识别和维护应用程序定义的报文边界的API相比，试给出一个优点和一个缺点。

    #+begin_quote
    对于远程登录（telnet和ssh）这样的应用，面向字节流的协议是非常自然的，因为在这些应用中没有消息边界的概念。当用户输入一个字符时，我们只需将该字符放入TCP连接中。

    在其他应用中，我们可能会发送一系列的消息，这些消息之间有固有的界限。例如，当一个SMTP邮件服务器向另一个SMTP邮件服务器发送几条连续的邮件信息时。由于TCP没有指示边界的机制，应用程序必须自己添加指示，以便应用程序的接收方能够区分一个消息和另一个消息。如果每条消息被放入一个不同的UDP报文段，接收端就能区分各种消息，而不需要应用程序的发送方添加任何指示。
    #+end_quote

*** P32

    什么是Apache Web服务器？它值多少钱？它当前有多少功能？为回答这个问题，你也许要看一下维基百科。

    #+begin_quote
    Apache HTTP Server（简称Apache）是Apache软件基金会的一个开放源码的网页服务器软件，可以在大多数电脑操作系统中运行。由于其跨平台和安全性[注 1]，被广泛使用，是最流行的Web服务器软件之一。它快速、可靠并且可通过简单的API扩展，将Perl／Python等解释器编译到服务器中。

    Apache支持许多特性，大部分通过编译的模块实现。这些特性从服务端的编程语言支持到身份认证方案。一些通用的语言接口支持Perl，Python，Tcl， 和PHP。流行的认证模块包括mod_access，mod_auth和mod_digest。其他的例子有SSL和TLS支持（mod_ssl），代理服务器（proxy）模块，很有用的URL重写（由mod_rewrite实现），定制日志文件（mod_log_config），以及过滤支持（mod_include和mod_ext_filter）。Apache日志可以通过网页浏览器使用免费的脚本AWStats或Visitors来进行分析。
    --[[https://zh.wikipedia.org/wiki/Apache_HTTP_Server][Apache HTTP服务器]]
    #+end_quote

** 套接字编程作业
*** 作业1：Web服务器

    在这个编程作业中，你将用Python语言开发一个简单的Web服务器，它仅能处理一个请求。具体而言，你的Web服务器将:（1）当一个客户（浏览器）联系时创建一个连接套接字；（2）从这个连接接收HTIP请求；（3）解释该请求以确定所请求的特定文件；（4）从服务器的文件系统获得请求的文件；（5）创建一个由请求的文件组成的HTTP响应报文，报文前面有首部行；（6）经TCP连接向请求的浏览器发送响应。如果浏览器请求一个在该服务器中不存在的文件，服务器应当返回一个"404 Not Found"差错报文。在配套网站中，我们提供了用于该服务器的框架代码。你的任务是完善该代码，运行你的服务器，通过在不同主机上运行的浏览器发送请求来测试该服务器。如果运行你服务器的主机上已经有一个Web服务器在运行，你应当为该Web服务器使用一个不同于80端口的其他端口。

    [[file:code/ch2-web-server/socket1-webserver.pdf][Socket Programming Assignment 1: Web Server]]

**** Hand in

     - You will develop a web server that handles one HTTP request at a time.
     - Your web server should accept and parse the HTTP request, get the requested file from the server’s file system, create an HTTP response message consisting of the requested file preceded by header lines, and then send the response directly to the client.
     - If the requested file is not present in the server, the server should send an HTTP “404 Not Found” message back to the client.


     #+INCLUDE: code/ch2-web-server/http_server.py src python

     #+begin_src shell
       ❯ python http_server.py
       --> Ready to serve...
       --> Receive a request:
       GET /hello.html HTTP/1.1
       Host: localhost:12000
       Connection: keep-alive
       Cache-Control: max-age=0
       sec-ch-ua: "Chromium";v="94", "Microsoft Edge";v="94", ";Not A Brand";v="99"
       sec-ch-ua-mobile: ?0
       sec-ch-ua-platform: "macOS"
       Upgrade-Insecure-Requests: 1
       User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 Edg/94.0.992.50
       Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       Sec-Fetch-Site: none
       Sec-Fetch-Mode: navigate
       Sec-Fetch-User: ?1
       Sec-Fetch-Dest: document
       Accept-Encoding: gzip, deflate, br
       Accept-Language: en,zh-CN;q=0.9,zh;q=0.8


       --> Found local file:
       <!DOCTYPE html>
       <html>
         <head>
           <title>Hello Title</title>
         </head>

         <body>
           Hello!
         </body>
       </html>

       --> Ready to serve...
       --> Receive a request:
       GET /a.html HTTP/1.1
       Host: localhost:12000
       Connection: keep-alive
       sec-ch-ua: "Chromium";v="94", "Microsoft Edge";v="94", ";Not A Brand";v="99"
       sec-ch-ua-mobile: ?0
       sec-ch-ua-platform: "macOS"
       Upgrade-Insecure-Requests: 1
       User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 Edg/94.0.992.50
       Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       Sec-Fetch-Site: none
       Sec-Fetch-Mode: navigate
       Sec-Fetch-User: ?1
       Sec-Fetch-Dest: document
       Accept-Encoding: gzip, deflate, br
       Accept-Language: en,zh-CN;q=0.9,zh;q=0.8


       --> Local file does not exist
       --> Ready to serve...
     #+end_src

**** Optional Exercises

     1. Currently, the web server handles only one HTTP request at a time. Implement a multithreaded server that is capable of serving multiple requests simultaneously. Using threading, first create a main thread in which your modified server listens for clients at a fixed port. When it receives a TCP connection request from a client, it will set up the TCP connection through another port and services the client request in a separate thread. There will be a separate TCP connection in a separate thread for each request/response pair.

        #+INCLUDE: code/ch2-web-server/oe1_http_server.py src python

     2. Instead of using a browser, write your own HTTP client to test your server. Your client will connect to the server using a TCP connection, send an HTTP request to the server, and display the server response as an output. You can assume that the HTTP request sent is a GET method. The client should take command line arguments specifying the server IP address or host name, the port at which the server is listening, and the path at which the requested object is stored at the server. The following is an input command format to run the client.

        ~client.py server_host server_port filename~

        #+INCLUDE: code/ch2-web-server/oe2_http_client.py src python

        #+begin_src shell
          ❯ python oe2_http_client.py localhost 12000 hello.html
          HTTP/1.1 200 OK
          <!DOCTYPE html>
          <html>
            <head>
              <title>Hello Title</title>
            </head>

            <body>
              Hello!
            </body>
          </html>
        #+end_src

        #+begin_src shell
          ❯ python http_server.py
          --> Ready to serve...
          --> Receive a request:
          GET /hello.html HTTP/1.1
          Host: localhost:12000


          --> Found local file:
          <!DOCTYPE html>
          <html>
            <head>
              <title>Hello Title</title>
            </head>

            <body>
              Hello!
            </body>
          </html>

          --> Sent the file
          --> Ready to serve...
        #+end_src

*** 作业2：UDP ping程序

    在这个编程作业中，你将用Python编写一个客户ping程序。该客户将发送一个简单的ping报文，接收一个从服务器返回的对应pong报文，并确定从该客户发送ping报文到接收到pong报文为止的时延。该时延称为往返时延（RTT）。由该客户和服务器提供的功能类似于在现代操作系统中可用的标准ping程序。然而，标准的ping使用互联网控制报文协议（ICMP）（我们将在第5章中学习ICMP）。此时我们将创建一个非标准（但简单）的基于UDP的ping程序。
    你的ping程序经UDP向目标服务器发送10个ping报文。对于每个报文，当对应的pong报文返回时，你的客户要确定和打印RTT。因为UDP是一个不可靠的协议，由客户发送的分组可能会丢失。为此，客户不能无限期地等待对ping报文的回答。客户等待服务器回答的时间至多为1秒；如果没有收到回答，客户假定该分组丢失并相应地打印一条报文。在此作业中，你将给出服务器的完整代码（在配套网站中可找到）。你的任务是编写客户代码，该代码与服务器代码非常类似。建议你先仔细学习服务器的代码，然后编写你的客户代码，可以随意地从服务器代码中剪贴代码行。

    [[file:code/ch2-udp/socket2-udppinger.pdf][Socket Programming Assignment 2: UDP]]

**** Hand in

     + The client should send 10 pings to the server.
     + You should get the client wait up to one second for a reply; if no reply is received within one second, your client program should assume that the packet was lost during transmission across the network.
     + send the ping message using UDP
     + print the response message from server, if any
     + calculate and print the round trip time (RTT), in seconds, of each packet, if server responses
     + otherwise, print “Request timed out”

**** Optional Exercises

     1. Currently, the program calculates the round-trip time for each packet and prints it out individually. Modify this to correspond to the way the standard ping program works. You will need to report the minimum, maximum, and average RTTs at the end of all pings from the client. In addition, calculate the packet loss rate (in percentage).

        #+INCLUDE: code/ch2-udp/ping_client.py src python

        #+begin_src shell
          ❯ python ping_client.py
          Ping 01 15:35:12.787722, time=0.321ms
          Ping 02 15:35:12.788158, time=0.173ms
          Ping 03 15:35:12.788359, time=0.12ms
          Ping 04 15:35:12.788503, time=0.121ms
          Ping 05 15:35:12.788648, time=0.124ms
          Ping 06 15:35:12.788795, Request timed out
          Ping 07 15:35:13.793915, time=0.418ms
          Ping 08 15:35:13.794384, Request timed out
          Ping 09 15:35:14.799174, Request timed out
          Ping 10 15:35:15.803596, Request timed out
          --- 127.0.0.1 ping statistics ---
          10 packets transmitted, 6 packets received, 40.0% packet loss
          round-trip min/avg/max/stddev = 0.12/0.213/0.418/0.116 ms
        #+end_src

     2. Another similar application to the UDP Ping would be the UDP Heartbeat. The Heartbeat can be used to check if an application is up and running and to report one-way packet loss. The client sends a sequence number and current timestamp in the UDP packet to the server, which is listening for the Heartbeat (i.e., the UDP packets) of the client. Upon receiving the packets, the server calculates the time difference and reports any lost packets. If the Heartbeat packets are missing for some specified period of time, we can assume that the client application has stopped. Implement the UDP Heartbeat (both client and server). You will need to modify the given UDPPingerServer.py, and your UDP ping client.

        #+INCLUDE: code/ch2-udp/heartbeat_server.py src python
        #+INCLUDE: code/ch2-udp/heartbeat_client.py src python

        #+begin_src sh
          % python heartbeat_server.py
          Ready to serve...
          hb_seq=1 time=0.265ms
          hb_seq=2 lost
          hb_seq=3 time=0.205ms
          hb_seq=4 time=0.26ms
          Client stopped
          hb_seq=3 time=0.3ms
          hb_seq=4 lost
          hb_seq=5 time=0.292ms
          hb_seq=6 time=0.284ms
          hb_seq=7 lost
          hb_seq=8 lost
          hb_seq=9 lost
          hb_seq=10 time=0.457ms
          hb_seq=11 time=0.279ms
          hb_seq=12 time=0.293ms
          hb_seq=13 time=0.261ms
        #+end_src

*** 作业3：邮件客户

    这个编程作业的目的是创建一个向任何接收方发送电子邮件的简单邮件客户。你的客户将必须与邮件服务器（如谷歌的电子邮件服务器）创建一个TCP连接，使用SMTP协议与邮件服务器进行交谈，经该邮件服务器向某接收方（如你的朋友）发送一个电子邮件报文，最后关闭与该邮件服务器的TCP连接。对本作业，配套Web站点为你的客户提供了框架代码。你的任务是完善该代码并通过向不同的用户账户发送电子邮件来测试你的客户。你也可以尝试通过不同的服务器（例如谷歌的邮件服务器和你所在大学的邮件服务器）进行发送。

    [[file:code/ch2-smtp/socket3-smtp.pdf][Socket Progrmming Assignment 3: SMTP]]

**** Hand in

     Your task is to develop a simple mail client that sends email to any recipient. Your client will need to connect to a mail server, dialogue with the mail server using the SMTP protocol, and send an email message to the mail server.

**** Optional Exercises

     1. Mail servers like Google mail (address: smtp.gmail.com, port: 587) requires your client to add a Transport Layer Security (TLS) or Secure Sockets Layer (SSL) for authentication and security reasons, before you send MAIL FROM command. Add TLS/SSL commands to your existing ones and implement your client using Google mail server at above address and port.

     2. Your current SMTP mail client only handles sending text messages in the email body. Modify your client such that it can send emails with both text and images.


     #+INCLUDE: code/ch2-smtp/mail_client.py src python

     #+begin_src sh
       % python mail_client.py base64_codeEc0ejZzOFY= mrcoinking@gmailcom shichaoxia@outlook.com $'Hi,\r\n\r\nHello' a.jpeg
       <- b'220 smtp.gmail.com ESMTP ls16sm5331505pjb.49 - gsmtp\r\n'
       ---> b'HELO Alice\r\n'
       <- b'250 smtp.gmail.com at your service\r\n'
       ---> b'AUTH PLAIN base64_codeEc0ejZzOFY= \r\n'
       <- b'235 2.7.0 Accepted\r\n'
       ---> b'MAIL FROM: <mrcoinking@gmailcom>\r\n'
       <- b'250 2.1.0 OK ls16sm5331505pjb.49 - gsmtp\r\n'
       ---> b'RCPT TO: <shichaoxia@outlook.com>\r\n'
       <- b'250 2.1.5 OK ls16sm5331505pjb.49 - gsmtp\r\n'
       ---> b'DATA\r\n'
       <- b'354  Go ahead ls16sm5331505pjb.49 - gsmtp\r\n'
       ---> b'MIME-Version: 1.0\r\nContent-Type: multipart/mixed; boundary="simple boundary\r\n\r\n'
       ---> b'--simple boundary\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Disposition: inline\r\n\r\n'
       ---> b'Hi,\r\n\r\nHello\r\n\r\n'
       ---> b'--simple boundary\r\nContent-Type: image/jpeg\r\nContent-Transfer-Encoding: BASE64\r\nContent-Disposition: inline\r\n\r\n'
       ---> b'base64_codeAQAASABIAAD/4QDfJMVKFds/8Am5QJf/wf/9k='
       ---> b'\r\n--simple boundary--'
       ---> b'\r\n.\r\n'
       <- b'250 2.0.0 OK  1628159614 ls16sm5331505pjb.49 - gsmtp\r\n'
       ---> b'QUIT\r\n'
       <- b'221 2.0.0 closing connection ls16sm5331505pjb.49 - gsmtp\r\n'
     #+end_src

    *参考*

    + [[*使用SMTP通过Gmail发送邮件 p.78]]
    + [[https://datatracker.ietf.org/doc/html/rfc1521#page-66][A Complex Multipart Example --RFC1521]]
    + 在命令行字符串中插入换行的问题（[[https://stackoverflow.com/a/26517782/10422197][stackoverflow]]）

      #+begin_src sh
        % python mail_client.py 'Subject: DDDXXXX\n\nHello'
        b'Subject: Title\\n\\nHello'
        % python mail_client.py $'Subject: Title\n\nHello'
        b'Subject: Title\n\nHello'
      #+end_src

*** 作业4：多线程Web代理服务器

    在这个编程作业中，你将研发一个简单的Web代理服务器。当你的代理服务器从一个浏览器接收到对某对象的HTTP请求，它生成对相同对象的一个新HTTP请求并向初始服务器发送。当该代理从初始服务器接收到具有该对象的HTTP响应时，它生成一个包括该对象的新HTTP响应，并发送给该客户。这个代理将是多线程的，使其在相同时间能够处理多个诮求。
    对本作业而言，配套Web网站对该代理服务器提供了框架代码。你的任务是完善该代码，然后测试你的代理，方法是让不同的浏览器经过你的代理来请求Web对象。

    [[file:code/ch2-proxy-server/socket4-proxyserver.pdf][Socket Programming Assignment 4: HTTP Web Proxy Server]]

**** Hand in

     You can also directly configure your web browser to use your proxy. With this approach, to get a web page using the proxy server, you simply provide the URL of the page you want.

     For e.g. http://www.google.com

     #+INCLUDE: code/ch2-proxy-server/proxy_server.py src python

     #+begin_src sh
       % python proxy_server.py 127.0.0.1 12008
       >>> args: Namespace(server_ip='127.0.0.1', port=12008)
       >>> Ready to serve...
       >>> Received a connection from: ('127.0.0.1', 53325)
       >>> Received request message:
       GET /www.dianping.com HTTP/1.1
       Host: 127.0.0.1:12008
       Upgrade-Insecure-Requests: 1
       Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
       User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15
       Accept-Language: en-us
       Accept-Encoding: gzip, deflate
       Connection: keep-alive


       >>> path: /www.dianping.com
       >>> rel_path: www.dianping.com
       >>> Try to read from cache file
       >>> Failed to read cache file
       >>> Try to connect origin host
       >>> hostn: dianping.com
       Send request:
       b'GET / HTTP/1.0\r\n\r\n'
       >>> resp: b'HTTP/1.1 2'...
       >>> Cache response to ./www.dianping.com
       >>> Ready to serve...
       >>> Received a connection from: ('127.0.0.1', 53327)
       >>> Received request message:
       GET /www.dianping.com HTTP/1.1
       Host: 127.0.0.1:12008
       Upgrade-Insecure-Requests: 1
       Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
       User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15
       Accept-Language: en-us
       Accept-Encoding: gzip, deflate
       Connection: keep-alive


       >>> path: /www.dianping.com
       >>> rel_path: www.dianping.com
       >>> Try to read from cache file
       >>> Cache File content:
       ['HTTP/1.1 200 OK\n', 'Server: openresty\n', 'Date: Thu, 12 Aug 2021 07:44:11 GMT\n', 'Content-Type: text/html; charset=utf-8\n', 'Content-Length: 6789\n', 'Last-Modified: Wed, 31 Jul 2019 07:08:07 GMT\n', 'Connection: close\n', 'Vary: Accept-Encoding\n', 'ETag: "5d413e57-1a85"\n', 'Expires: Wed, 12 Aug 2020 07:44:11 GMT\n']...
       Read from cache
       >>> Ready to serve...
     #+end_src

** Wireshark实验：HTTP

   在实验1中，我们已经初步使用了Wireshark分组嗅探器，现在准备使用Wireshark来研究运行中的协议。在本实验中，我们将研究HTTP协议的儿个方面:基本的GET/回答交互，HTTP报文格式，检索大HTML文件，检索具有内嵌URL的HTML文件，持续和非持续连接，HTTP鉴别和安全性。

   [[file:code/ch2-ws-http/wireshark-http-v7.0.pdf][Wireshark Lab: HTTP v7.0]]

*** 1. The Basic HTTP GET/response interaction

    1. Is your browser running HTTP version 1.0 or 1.1? What version of HTTP is the server running?
    2. What languages (if any) does your browser indicate that it can accept to the server?
    3. What is the IP address of your computer? Of the gaia.cs.umass.edu server?
    4. What is the status code returned from the server to your browser?
    5. When was the HTML file that you are retrieving last modified at the server?
    6. How many bytes of content are being returned to your browser?
    7. By inspecting the raw data in the packet content window, do you see any headers within the data that are not displayed in the packet-listing window? If so, name one.


    #+begin_src sh -n
      No.     Time           Source                Destination           Protocol Length Info
          199 8.457561       192.168.1.72          128.119.245.12        HTTP     586    GET /wireshark-labs/HTTP-wireshark-file1.html HTTP/1.1

      Frame 199: 586 bytes on wire (4688 bits), 586 bytes captured (4688 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 128.119.245.12
      Transmission Control Protocol, Src Port: 51508, Dst Port: 80, Seq: 1, Ack: 1, Len: 520
      Hypertext Transfer Protocol
          GET /wireshark-labs/HTTP-wireshark-file1.html HTTP/1.1\r\n
          Host: gaia.cs.umass.edu\r\n
          Connection: keep-alive\r\n
          Upgrade-Insecure-Requests: 1\r\n
          User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.73\r\n
          Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n
          Accept-Encoding: gzip, deflate\r\n
          Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\r\n
          \r\n
          [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html]
          [HTTP request 1/2]
          [Response in frame: 261]
          [Next request in frame: 268]

      No.     Time           Source                Destination           Protocol Length Info
          261 8.691763       128.119.245.12        192.168.1.72          HTTP     552    HTTP/1.1 200 OK  (text/html)

      Frame 261: 552 bytes on wire (4416 bits), 552 bytes captured (4416 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 51508, Seq: 1, Ack: 521, Len: 486
      Hypertext Transfer Protocol
          HTTP/1.1 200 OK\r\n
          Date: Fri, 13 Aug 2021 02:30:45 GMT\r\n
          Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n
          Last-Modified: Thu, 12 Aug 2021 05:59:01 GMT\r\n
          ETag: "80-5c9566e787afe"\r\n
          Accept-Ranges: bytes\r\n
          Content-Length: 128\r\n
          Keep-Alive: timeout=5, max=100\r\n
          Connection: Keep-Alive\r\n
          Content-Type: text/html; charset=UTF-8\r\n
          \r\n
          [HTTP response 1/2]
          [Time since request: 0.234202000 seconds]
          [Request in frame: 199]
          [Next request in frame: 268]
          [Next response in frame: 276]
          [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html]
          File Data: 128 bytes
      Line-based text data: text/html (4 lines)
    #+end_src

    1. Line 11, 31. HTTP/1.1
    2. Line 16. Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6
    3. Line 6. Src: 192.168.1.72, Dst: 128.119.245.12
    4. Line 31. 200 OK
    5. Line 34. Last-Modified: Thu, 12 Aug 2021 05:59:01 GMT
    6. Line 37. Content-Length: 128
    7. packet-listing window 只显示了请求行

*** 2. The HTTP CONDITIONAL GET/response interaction

    8. [@8]Inspect the contents of the first HTTP GET request from your browser to the server. Do you see an “IF-MODIFIED-SINCE” line in the HTTP GET?
    9. Inspect the contents of the server response. Did the server explicitly return the contents of the file? How can you tell?
    10. Now inspect the contents of the second HTTP GET request from your browser to the server. Do you see an “IF-MODIFIED-SINCE:” line in the HTTP GET? If so, what information follows the “IF-MODIFIED-SINCE:” header?
    11. What is the HTTP status code and phrase returned from the server in response to this second HTTP GET? Did the server explicitly return the contents of the file? Explain.


    #+begin_src sh -n
      No.     Time           Source                Destination           Protocol Length Info
          259 21.077378      192.168.1.72          128.119.245.12        HTTP     586    GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1

      Frame 259: 586 bytes on wire (4688 bits), 586 bytes captured (4688 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 128.119.245.12
      Transmission Control Protocol, Src Port: 54686, Dst Port: 80, Seq: 1, Ack: 1, Len: 520
      Hypertext Transfer Protocol
          GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1\r\n
          Host: gaia.cs.umass.edu\r\n
          Connection: keep-alive\r\n
          Upgrade-Insecure-Requests: 1\r\n
          User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.73\r\n
          Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n
          Accept-Encoding: gzip, deflate\r\n
          Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\r\n
          \r\n
          [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]
          [HTTP request 1/3]
          [Response in frame: 266]
          [Next request in frame: 268]

      No.     Time           Source                Destination           Protocol Length Info
          266 21.473567      128.119.245.12        192.168.1.72          HTTP     796    HTTP/1.1 200 OK  (text/html)

      Frame 266: 796 bytes on wire (6368 bits), 796 bytes captured (6368 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 54686, Seq: 1, Ack: 521, Len: 730
      Hypertext Transfer Protocol
          HTTP/1.1 200 OK\r\n
          Date: Fri, 13 Aug 2021 04:03:23 GMT\r\n
          Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n
          Last-Modified: Thu, 12 Aug 2021 05:59:01 GMT\r\n
          ETag: "173-5c9566e78732e"\r\n
          Accept-Ranges: bytes\r\n
          Content-Length: 371\r\n
          Keep-Alive: timeout=5, max=100\r\n
          Connection: Keep-Alive\r\n
          Content-Type: text/html; charset=UTF-8\r\n
          \r\n
          [HTTP response 1/3]
          [Time since request: 0.396189000 seconds]
          [Request in frame: 259]
          [Next request in frame: 268]
          [Next response in frame: 271]
          [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]
          File Data: 371 bytes
      Line-based text data: text/html (10 lines)
          \n
          <html>\n
          \n
          Congratulations again!  Now you've downloaded the file lab2-2.html. <br>\n
          This file's last modification date will not change.  <p>\n
          Thus  if you download this multiple times on your browser, a complete copy <br>\n
          will only be sent once by the server due to the inclusion of the IN-MODIFIED-SINCE<br>\n
          field in your browser's HTTP GET request to the server.\n
          \n
          </html>\n
    #+end_src

    #+begin_src sh +n
      No.     Time           Source                Destination           Protocol Length Info
          294 25.273673      192.168.1.72          128.119.245.12        HTTP     698    GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1

      Frame 294: 698 bytes on wire (5584 bits), 698 bytes captured (5584 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 128.119.245.12
      Transmission Control Protocol, Src Port: 54686, Dst Port: 80, Seq: 987, Ack: 1215, Len: 632
      Hypertext Transfer Protocol
          GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1\r\n
          Host: gaia.cs.umass.edu\r\n
          Connection: keep-alive\r\n
          Cache-Control: max-age=0\r\n
          Upgrade-Insecure-Requests: 1\r\n
          User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.73\r\n
          Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n
          Accept-Encoding: gzip, deflate\r\n
          Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\r\n
          If-None-Match: "173-5c9566e78732e"\r\n
          If-Modified-Since: Thu, 12 Aug 2021 05:59:01 GMT\r\n
          \r\n
          [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]
          [HTTP request 3/3]
          [Prev request in frame: 268]
          [Response in frame: 295]

      No.     Time           Source                Destination           Protocol Length Info
          295 25.907813      128.119.245.12        192.168.1.72          HTTP     305    HTTP/1.1 304 Not Modified

      Frame 295: 305 bytes on wire (2440 bits), 305 bytes captured (2440 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 54686, Seq: 1215, Ack: 1619, Len: 239
      Hypertext Transfer Protocol
          HTTP/1.1 304 Not Modified\r\n
          Date: Fri, 13 Aug 2021 04:03:27 GMT\r\n
          Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n
          Connection: Keep-Alive\r\n
          Keep-Alive: timeout=5, max=98\r\n
          ETag: "173-5c9566e78732e"\r\n
          \r\n
          [HTTP response 3/3]
          [Time since request: 0.634140000 seconds]
          [Prev request in frame: 268]
          [Prev response in frame: 271]
          [Request in frame: 294]
          [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]
    #+end_src

    8. [@8]No
    9. Line 37, 40.
       Content-Length: 371
       Content-Type: text/html; charset=UTF-8
    10. Line 34, 78.
        Time follows the “IF-MODIFIED-SINCE:” header is exactly same as previous received file.
    11. Line 93. 304 Not Modified

*** 3. Retrieving Long Documents

    12. [@12]How many HTTP GET request messages did your browser send? Which packet number in the trace contains the GET message for the Bill or Rights?
    13. Which packet number in the trace contains the status code and phrase associated with the response to the HTTP GET request?
    14. What is the status code and phrase in the response?
    15. How many data-containing TCP segments were needed to carry the single HTTP response and the text of the Bill of Rights?


    #+begin_src sh -n
      No.     Time           Source                Destination           Protocol Length Info
           33 9.554387       192.168.1.72          128.119.245.12        HTTP     465    GET /wireshark-labs/HTTP-wireshark-file3.html HTTP/1.1

      Frame 33: 465 bytes on wire (3720 bits), 465 bytes captured (3720 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 128.119.245.12
      Transmission Control Protocol, Src Port: 57878, Dst Port: 80, Seq: 1, Ack: 1, Len: 399
      Hypertext Transfer Protocol
          GET /wireshark-labs/HTTP-wireshark-file3.html HTTP/1.1\r\n
          Host: gaia.cs.umass.edu\r\n
          Upgrade-Insecure-Requests: 1\r\n
          Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n
          User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15\r\n
          Accept-Language: zh-cn\r\n
          Accept-Encoding: gzip, deflate\r\n
          Connection: keep-alive\r\n
          \r\n
          [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html]
          [HTTP request 1/1]
          [Response in frame: 38]

      No.     Time           Source                Destination           Protocol Length Info
           38 9.865603       128.119.245.12        192.168.1.72          HTTP     607    HTTP/1.1 200 OK  (text/html)

      Frame 38: 607 bytes on wire (4856 bits), 607 bytes captured (4856 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 57878, Seq: 4321, Ack: 400, Len: 541
      [4 Reassembled TCP Segments (4861 bytes): #35(1440), #36(1440), #37(1440), #38(541)]
          [Frame: 35, payload: 0-1439 (1440 bytes)]
          [Frame: 36, payload: 1440-2879 (1440 bytes)]
          [Frame: 37, payload: 2880-4319 (1440 bytes)]
          [Frame: 38, payload: 4320-4860 (541 bytes)]
          [Segment count: 4]
          [Reassembled TCP length: 4861]
          [Reassembled TCP Data: 485454502f312e3120323030204f4b0d0a446174653a204672692c203133204175672032…]
      Hypertext Transfer Protocol
          HTTP/1.1 200 OK\r\n
          Date: Fri, 13 Aug 2021 06:27:57 GMT\r\n
          Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n
          Last-Modified: Fri, 13 Aug 2021 05:59:01 GMT\r\n
          ETag: "1194-5c96a8c545fd2"\r\n
          Accept-Ranges: bytes\r\n
          Content-Length: 4500\r\n
          Keep-Alive: timeout=5, max=100\r\n
          Connection: Keep-Alive\r\n
          Content-Type: text/html; charset=UTF-8\r\n
          \r\n
          [HTTP response 1/1]
          [Time since request: 0.311216000 seconds]
          [Request in frame: 33]
          [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html]
          File Data: 4500 bytes
      Line-based text data: text/html (98 lines)
    #+end_src

    12. [@12]Line 2. 1 request, number 33.
    13. Line 23. number 38.
    14. Line 38. 200 OK
    15. Line 29-36. 4

*** 4. HTML Documents with Embedded Objects

    16. [@16]How many HTTP GET request messages did your browser send? To which Internet addresses were these GET requests sent?
    17. Can you tell whether your browser downloaded the two images serially, or whether they were downloaded from the two web sites in parallel? Explain.


    #+begin_src sh -n
      No.     Time           Source                Destination           Protocol Length Info
      1090 5.525870       192.168.1.72          128.119.245.12        HTTP     465    GET /wireshark-labs/HTTP-wireshark-file4.html HTTP/1.1

      Frame 1090: 465 bytes on wire (3720 bits), 465 bytes captured (3720 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 128.119.245.12
      Transmission Control Protocol, Src Port: 58171, Dst Port: 80, Seq: 1, Ack: 1, Len: 399
      Hypertext Transfer Protocol
      GET /wireshark-labs/HTTP-wireshark-file4.html HTTP/1.1\r\n
      Host: gaia.cs.umass.edu\r\n
      Upgrade-Insecure-Requests: 1\r\n
      Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n
      User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15\r\n
      Accept-Language: zh-cn\r\n
      Accept-Encoding: gzip, deflate\r\n
      Connection: keep-alive\r\n
      \r\n
      [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file4.html]
      [HTTP request 1/1]
      [Response in frame: 1097]
    #+end_src

    #+begin_src sh +n
      No.     Time           Source                Destination           Protocol Length Info
      1097 5.835839       128.119.245.12        192.168.1.72          HTTP     1367   HTTP/1.1 200 OK  (text/html)

      Frame 1097: 1367 bytes on wire (10936 bits), 1367 bytes captured (10936 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 58171, Seq: 1, Ack: 400, Len: 1301
      Hypertext Transfer Protocol
      HTTP/1.1 200 OK\r\n
      Date: Fri, 13 Aug 2021 06:55:59 GMT\r\n
      Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n
      Last-Modified: Fri, 13 Aug 2021 05:59:01 GMT\r\n
      ETag: "3ae-5c96a8c54b1da"\r\n
      Accept-Ranges: bytes\r\n
      Content-Length: 942\r\n
      Keep-Alive: timeout=5, max=100\r\n
      Connection: Keep-Alive\r\n
      Content-Type: text/html; charset=UTF-8\r\n
      \r\n
      [HTTP response 1/1]
      [Time since request: 0.309969000 seconds]
      [Request in frame: 1090]
      [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file4.html]
      File Data: 942 bytes
      Line-based text data: text/html (23 lines)
    #+end_src

    #+begin_src sh +n
      No.     Time           Source                Destination           Protocol Length Info
      1105 6.143539       192.168.1.72          178.79.137.164        HTTP     458    GET /8E_cover_small.jpg HTTP/1.1

      Frame 1105: 458 bytes on wire (3664 bits), 458 bytes captured (3664 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 178.79.137.164
      Transmission Control Protocol, Src Port: 58173, Dst Port: 80, Seq: 1, Ack: 1, Len: 392
      Hypertext Transfer Protocol
      GET /8E_cover_small.jpg HTTP/1.1\r\n
      Host: kurose.cslash.net\r\n
      Connection: keep-alive\r\n
      Accept: image/webp,image/png,image/svg+xml,image/*;q=0.8,video/*;q=0.8,*/*;q=0.5\r\n
      User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15\r\n
      Accept-Language: zh-cn\r\n
      Referer: http://gaia.cs.umass.edu/\r\n
      Accept-Encoding: gzip, deflate\r\n
      \r\n
      [Full request URI: http://kurose.cslash.net/8E_cover_small.jpg]
      [HTTP request 1/1]
      [Response in frame: 1112]
    #+end_src

    #+begin_src sh +n
      No.     Time           Source                Destination           Protocol Length Info
      1106 6.143774       192.168.1.72          128.119.245.12        HTTP     491    GET /pearson.png HTTP/1.1

      Frame 1106: 491 bytes on wire (3928 bits), 491 bytes captured (3928 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 128.119.245.12
      Transmission Control Protocol, Src Port: 58172, Dst Port: 80, Seq: 1, Ack: 1, Len: 425
      Hypertext Transfer Protocol
      GET /pearson.png HTTP/1.1\r\n
      Host: gaia.cs.umass.edu\r\n
      Connection: keep-alive\r\n
      Accept: image/webp,image/png,image/svg+xml,image/*;q=0.8,video/*;q=0.8,*/*;q=0.5\r\n
      User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15\r\n
      Accept-Language: zh-cn\r\n
      Referer: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file4.html\r\n
      Accept-Encoding: gzip, deflate\r\n
      \r\n
      [Full request URI: http://gaia.cs.umass.edu/pearson.png]
      [HTTP request 1/1]
      [Response in frame: 1110]
    #+end_src

    #+begin_src sh +n
      No.     Time           Source                Destination           Protocol Length Info
      1110 6.462949       128.119.245.12        192.168.1.72          HTTP     798    HTTP/1.1 200 OK  (PNG)

      Frame 1110: 798 bytes on wire (6384 bits), 798 bytes captured (6384 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 58172, Seq: 2881, Ack: 426, Len: 732
      [3 Reassembled TCP Segments (3612 bytes): #1108(1440), #1109(1440), #1110(732)]
       Hypertext Transfer Protocol
       HTTP/1.1 200 OK\r\n
       Date: Fri, 13 Aug 2021 06:55:59 GMT\r\n
       Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n
       Last-Modified: Sat, 06 Aug 2016 10:08:14 GMT\r\n
       ETag: "cc3-539645c7f1ee7"\r\n
       Accept-Ranges: bytes\r\n
       Content-Length: 3267\r\n
       Keep-Alive: timeout=5, max=100\r\n
       Connection: Keep-Alive\r\n
       Content-Type: image/png\r\n
       \r\n
       [HTTP response 1/1]
       [Time since request: 0.319175000 seconds]
       [Request in frame: 1106]
       [Request URI: http://gaia.cs.umass.edu/pearson.png]
       File Data: 3267 bytes
       Portable Network Graphics
    #+end_src

    #+begin_src sh +n
      No.     Time           Source                Destination           Protocol Length Info
      1112 6.462951       178.79.137.164        192.168.1.72          HTTP     237    HTTP/1.1 301 Moved Permanently

      Frame 1112: 237 bytes on wire (1896 bits), 237 bytes captured (1896 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 178.79.137.164, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 58173, Seq: 1, Ack: 393, Len: 171
      Hypertext Transfer Protocol
      HTTP/1.1 301 Moved Permanently\r\n
      Location: https://kurose.cslash.net/8E_cover_small.jpg\r\n
      Content-Length: 0\r\n
      Date: Fri, 13 Aug 2021 06:56:00 GMT\r\n
      Server: lighttpd/1.4.47\r\n
      \r\n
      [HTTP response 1/1]
      [Time since request: 0.319412000 seconds]
      [Request in frame: 1105]
      [Request URI: http://kurose.cslash.net/8E_cover_small.jpg]
    #+end_src

    16. [@16]
        | No. | addr              |
        |   1 | gaia.cs.umass.edu |
        |   2 | kurose.cslash.net |
        |   3 | gaia.cs.umass.edu |
    17. Parallel. The second image was requested before the first image came back.

*** 5. HTTP Authentication

    18. [@18]What is the server’s response (status code and phrase) in response to the initial HTTP GET message from your browser?
    19. When your browser’s sends the HTTP GET message for the second time, what new field is included in the HTTP GET message?


    #+begin_src sh -n
      No.     Time           Source                Destination           Protocol Length Info
          136 5.377209       192.168.1.72          128.119.245.12        HTTP     480    GET /wireshark-labs/protected_pages/HTTP-wiresharkfile5.html HTTP/1.1

      Frame 136: 480 bytes on wire (3840 bits), 480 bytes captured (3840 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 128.119.245.12
      Transmission Control Protocol, Src Port: 53753, Dst Port: 80, Seq: 1, Ack: 1, Len: 414
      Hypertext Transfer Protocol
          GET /wireshark-labs/protected_pages/HTTP-wiresharkfile5.html HTTP/1.1\r\n
          Host: gaia.cs.umass.edu\r\n
          Upgrade-Insecure-Requests: 1\r\n
          Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n
          User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15\r\n
          Accept-Language: zh-cn\r\n
          Accept-Encoding: gzip, deflate\r\n
          Connection: keep-alive\r\n
          \r\n
          [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wiresharkfile5.html]
          [HTTP request 1/1]
          [Response in frame: 138]

      No.     Time           Source                Destination           Protocol Length Info
          138 5.732322       128.119.245.12        192.168.1.72          HTTP     783    HTTP/1.1 401 Unauthorized  (text/html)

      Frame 138: 783 bytes on wire (6264 bits), 783 bytes captured (6264 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 53753, Seq: 1, Ack: 415, Len: 717
      Hypertext Transfer Protocol
          HTTP/1.1 401 Unauthorized\r\n
          Date: Fri, 13 Aug 2021 10:49:55 GMT\r\n
          Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n
          WWW-Authenticate: Basic realm="wireshark-students only"\r\n
          Content-Length: 381\r\n
          Keep-Alive: timeout=5, max=100\r\n
          Connection: Keep-Alive\r\n
          Content-Type: text/html; charset=iso-8859-1\r\n
          \r\n
          [HTTP response 1/1]
          [Time since request: 0.355113000 seconds]
          [Request in frame: 136]
          [Request URI: http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wiresharkfile5.html]
          File Data: 381 bytes
      Line-based text data: text/html (12 lines)
    #+end_src

    #+begin_src sh +n
      No.     Time           Source                Destination           Protocol Length Info
          234 17.053565      192.168.1.72          128.119.245.12        HTTP     539    GET /wireshark-labs/protected_pages/HTTP-wiresharkfile5.html HTTP/1.1

      Frame 234: 539 bytes on wire (4312 bits), 539 bytes captured (4312 bits) on interface en1, id 0
      Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
      Internet Protocol Version 4, Src: 192.168.1.72, Dst: 128.119.245.12
      Transmission Control Protocol, Src Port: 53751, Dst Port: 80, Seq: 1, Ack: 1, Len: 473
      Hypertext Transfer Protocol
          GET /wireshark-labs/protected_pages/HTTP-wiresharkfile5.html HTTP/1.1\r\n
          Host: gaia.cs.umass.edu\r\n
          Connection: keep-alive\r\n
          Upgrade-Insecure-Requests: 1\r\n
          Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n
          User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15\r\n
          Accept-Language: zh-cn\r\n
          Accept-Encoding: gzip, deflate\r\n
          Authorization: Basic d2lyZXNoYXJrLXN0dWRlbnRzOm5ldHdvcms=\r\n
          \r\n
          [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wiresharkfile5.html]
          [HTTP request 1/1]
          [Response in frame: 236]

      No.     Time           Source                Destination           Protocol Length Info
          236 17.415586      128.119.245.12        192.168.1.72          HTTP     595    HTTP/1.1 404 Not Found  (text/html)

      Frame 236: 595 bytes on wire (4760 bits), 595 bytes captured (4760 bits) on interface en1, id 0
      Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
      Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.72
      Transmission Control Protocol, Src Port: 80, Dst Port: 53751, Seq: 1, Ack: 474, Len: 529
      Hypertext Transfer Protocol
          HTTP/1.1 404 Not Found\r\n
          Date: Fri, 13 Aug 2021 10:50:07 GMT\r\n
          Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n
          Content-Length: 253\r\n
          Keep-Alive: timeout=5, max=100\r\n
          Connection: Keep-Alive\r\n
          Content-Type: text/html; charset=iso-8859-1\r\n
          \r\n
          [HTTP response 1/1]
          [Time since request: 0.362021000 seconds]
          [Request in frame: 234]
          [Request URI: http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wiresharkfile5.html]
          File Data: 253 bytes
      Line-based text data: text/html (7 lines)
    #+end_src

    18. [@18]Line 30. 401 Unauthorized
    19. Line 61. Authorization: Basic d2lyZXNoYXJrLXN0dWRlbnRzOm5ldHdvcms=

** Wireshark实验：DNS

    在本实验中，我们仔细观察DNS的客户端（DNS是用于将因特网主机名转换为IP地址的协议）。2.4节讲过，在DNS中客户角色是相当简单的：客户向它的本地DNS服务器发送一个请求，并接收返回的响应。在此过程中发生的很多事情均不为DNS客户所见，如等级结构的DNS服务器互相通信递归地或迭代地解析该客户的DNS请求。然而，从DNS客户的角度而言，该协议是相当简单的，即向本地DNS服务器发送一个请求，从该服务器接收一个响应。在本实验中我们观察运转中的DNS。

    [[file:code/ch2-ws-dns/wireshark-dns-v7.0.pdf][Wireshark Lab: DNS v7.0]]

*** 1. nslookup

    1. Run nslookup to obtain the IP address of a Web server in Asia. What is the IP address of that server?

       #+begin_src sh
         ❯ nslookup www.gov.sg
         Server:		240e:3b7:2e91:9310:26f5:a2ff:feb3:b754
         Address:	240e:3b7:2e91:9310:26f5:a2ff:feb3:b754#53

         Non-authoritative answer:
         Name:	www.gov.sg
         Address: 104.78.26.99
       #+end_src

    2. Run nslookup to determine the authoritative DNS servers for a university in Europe.

       #+begin_src sh
         ❯ nslookup -type=NS manchester.ac.uk
         Server:		240e:3b7:2e91:9310:26f5:a2ff:feb3:b754
         Address:	240e:3b7:2e91:9310:26f5:a2ff:feb3:b754#53

         Non-authoritative answer:
         manchester.ac.uk	nameserver = curlew.cs.man.ac.uk.
         manchester.ac.uk	nameserver = utserv.mcc.ac.uk.
         manchester.ac.uk	nameserver = ns4.ja.net.
         manchester.ac.uk	nameserver = gannet.scg.man.ac.uk.

         Authoritative answers can be found from:
         utserv.mcc.ac.uk	internet address = 130.88.200.6
         gannet.scg.man.ac.uk	internet address = 130.88.94.110
         curlew.cs.man.ac.uk	internet address = 130.88.13.7
         ns4.ja.net	has AAAA address 2001:630:0:47::42
       #+end_src

    3. Run nslookup so that one of the DNS servers obtained in Question 2 is queried for the mail servers for Yahoo! mail. What is its IP address?

       #+begin_src sh
         ❯ nslookup -type=mx yahoo.com curlew.cs.man.ac.uk
         Server:		curlew.cs.man.ac.uk
         Address:	130.88.13.7#53

         ,** server can't find yahoo.com: REFUSED

         ❯ nslookup -type=mx yahoo.com
         Server:		240e:3b7:2e91:9310:26f5:a2ff:feb3:b754
         Address:	240e:3b7:2e91:9310:26f5:a2ff:feb3:b754#53

         Non-authoritative answer:
         yahoo.com	mail exchanger = 1 mta5.am0.yahoodns.net.
         yahoo.com	mail exchanger = 1 mta6.am0.yahoodns.net.
         yahoo.com	mail exchanger = 1 mta7.am0.yahoodns.net.

         Authoritative answers can be found from:
         yahoo.com	nameserver = ns5.yahoo.com.
         yahoo.com	nameserver = ns1.yahoo.com.
         yahoo.com	nameserver = ns3.yahoo.com.
         yahoo.com	nameserver = ns2.yahoo.com.
         yahoo.com	nameserver = ns4.yahoo.com.
         ns3.yahoo.com	internet address = 27.123.42.42
         ns5.yahoo.com	internet address = 202.165.97.53
         ns4.yahoo.com	internet address = 98.138.11.157
         ns1.yahoo.com	internet address = 68.180.131.16
         ns2.yahoo.com	internet address = 68.142.255.16
         ns3.yahoo.com	has AAAA address 2406:8600:f03f:1f8::1003
         ns5.yahoo.com	has AAAA address 2406:2000:1d0::7961:686f:6f21
         ns1.yahoo.com	has AAAA address 2001:4998:130::1001
         ns2.yahoo.com	has AAAA address 2001:4998:140::1002
       #+end_src

*** 2. ipconfig

    [[https://setapp.com/how-to/how-to-flush-dns-cache][Flush DNS cache on your Mac]]

    #+begin_src sh
      ❯ ifconfig en1
      en1: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
        options=400<CHANNEL_IO>
        ether b8:09:8a:51:06:4a
        inet6 fe80::1049:ae72:7e7f:3f95%en1 prefixlen 64 secured scopeid 0x5
        inet6 240e:3b7:2e91:9310:1483:c86e:aefc:f5fe prefixlen 64 autoconf secured
        inet6 240e:3b7:2e91:9310:31bd:41e3:6d1e:3522 prefixlen 64 autoconf temporary
        inet 192.168.1.72 netmask 0xffffff00 broadcast 192.168.1.255
        nd6 options=201<PERFORMNUD,DAD>
        media: autoselect
        status: active
    #+end_src

    #+begin_src sh
      ❯ scutil --dns
      DNS configuration

      resolver #1
      nameserver[0] : 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754
      nameserver[1] : 192.168.1.1
      if_index : 5 (en1)
      flags    : Request A records, Request AAAA records
      reach    : 0x00020002 (Reachable,Directly Reachable Address)

      resolver #2
      domain   : local
      options  : mdns
      timeout  : 5
      flags    : Request A records, Request AAAA records
      reach    : 0x00000000 (Not Reachable)
      order    : 300000

      resolver #3
      domain   : 254.169.in-addr.arpa
      options  : mdns
      timeout  : 5
      flags    : Request A records, Request AAAA records
      reach    : 0x00000000 (Not Reachable)
      order    : 300200

      resolver #4
      domain   : 8.e.f.ip6.arpa
      options  : mdns
      timeout  : 5
      flags    : Request A records, Request AAAA records
      reach    : 0x00000000 (Not Reachable)
      order    : 300400

      resolver #5
      domain   : 9.e.f.ip6.arpa
      options  : mdns
      timeout  : 5
      flags    : Request A records, Request AAAA records
      reach    : 0x00000000 (Not Reachable)
      order    : 300600

      resolver #6
      domain   : a.e.f.ip6.arpa
      options  : mdns
      timeout  : 5
      flags    : Request A records, Request AAAA records
      reach    : 0x00000000 (Not Reachable)
      order    : 300800

      resolver #7
      domain   : b.e.f.ip6.arpa
      options  : mdns
      timeout  : 5
      flags    : Request A records, Request AAAA records
      reach    : 0x00000000 (Not Reachable)
      order    : 301000

      DNS configuration (for scoped queries)

      resolver #1
      nameserver[0] : 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754
      nameserver[1] : 192.168.1.1
      if_index : 5 (en1)
      flags    : Scoped, Request A records, Request AAAA records
      reach    : 0x00020002 (Reachable,Directly Reachable Address)
    #+end_src

*** 3. Tracing DNS with Wireshark

    4. [@4]Locate the DNS query and response messages. Are then sent over UDP or TCP?

       #+begin_src sh -n
         No.     Time           Source                Destination           Protocol Length Info
              84 7.351051       192.168.1.72          192.168.1.1           DNS      72     Standard query 0x55fd HTTPS www.ietf.org

         Frame 84: 72 bytes on wire (576 bits), 72 bytes captured (576 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 192.168.1.1
         User Datagram Protocol, Src Port: 62126, Dst Port: 53
         Domain Name System (query)
             Transaction ID: 0x55fd
             Flags: 0x0100 Standard query
             Questions: 1
             Answer RRs: 0
             Authority RRs: 0
             Additional RRs: 0
             Queries
             [Response In: 96]

         No.     Time           Source                Destination           Protocol Length Info
              85 7.351648       192.168.1.72          192.168.1.1           DNS      72     Standard query 0x796e AAAA www.ietf.org

         Frame 85: 72 bytes on wire (576 bits), 72 bytes captured (576 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 192.168.1.1
         User Datagram Protocol, Src Port: 51085, Dst Port: 53
         Domain Name System (query)
             Transaction ID: 0x796e
             Flags: 0x0100 Standard query
             Questions: 1
             Answer RRs: 0
             Authority RRs: 0
             Additional RRs: 0
             Queries
             [Response In: 91]

         No.     Time           Source                Destination           Protocol Length Info
              86 7.351648       192.168.1.72          192.168.1.1           DNS      72     Standard query 0x6b64 A www.ietf.org

         Frame 86: 72 bytes on wire (576 bits), 72 bytes captured (576 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 192.168.1.1
         User Datagram Protocol, Src Port: 62644, Dst Port: 53
         Domain Name System (query)
             Transaction ID: 0x6b64
             Flags: 0x0100 Standard query
             Questions: 1
             Answer RRs: 0
             Authority RRs: 0
             Additional RRs: 0
             Queries
             [Response In: 97]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
              91 7.359142       192.168.1.1           192.168.1.72          DNS      483    Standard query response 0x796e AAAA www.ietf.org CNAME www.ietf.org.cdn.cloudflare.net AAAA 2606:4700::6810:2c63 AAAA 2606:4700::6810:2d63 NS ns2.cloudflare.net NS ns3.cloudflare.net NS ns4.cloudflare.net NS ns1.cloudflare.net NS ns5.cloudflare.net A 173.245.59.31 A 198.41.222.131 A 198.41.222.31 A 198.41.223.131 A 198.41.223.31 AAAA 2400:cb00:2049:1::adf5:3b1f AAAA 2400:cb00:2049:1::c629:de83 AAAA 2400:cb00:2049:1::c629:de1f AAAA 2400:cb00:2049:1::c629:df83 AAAA 2400:cb00:2049:1::c629:df1f

         Frame 91: 483 bytes on wire (3864 bits), 483 bytes captured (3864 bits) on interface en1, id 0
         Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
         Internet Protocol Version 4, Src: 192.168.1.1, Dst: 192.168.1.72
         User Datagram Protocol, Src Port: 53, Dst Port: 51085
         Domain Name System (response)
             Transaction ID: 0x796e
             Flags: 0x8180 Standard query response, No error
             Questions: 1
             Answer RRs: 3
             Authority RRs: 5
             Additional RRs: 10
             Queries
             Answers
                 www.ietf.org: type CNAME, class IN, cname www.ietf.org.cdn.cloudflare.net
                 www.ietf.org.cdn.cloudflare.net: type AAAA, class IN, addr 2606:4700::6810:2c63
                 www.ietf.org.cdn.cloudflare.net: type AAAA, class IN, addr 2606:4700::6810:2d63
             Authoritative nameservers
                 cloudflare.net: type NS, class IN, ns ns2.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns3.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns4.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns1.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns5.cloudflare.net
             Additional records
                 ns1.cloudflare.net: type A, class IN, addr 173.245.59.31
                 ns2.cloudflare.net: type A, class IN, addr 198.41.222.131
                 ns3.cloudflare.net: type A, class IN, addr 198.41.222.31
                 ns4.cloudflare.net: type A, class IN, addr 198.41.223.131
                 ns5.cloudflare.net: type A, class IN, addr 198.41.223.31
                 ns1.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::adf5:3b1f
                 ns2.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de83
                 ns3.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de1f
                 ns4.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df83
                 ns5.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df1f
             [Request In: 85]
             [Time: 0.007494000 seconds]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
              92 7.359670       192.168.1.72          192.168.1.1           DNS      91     Standard query 0xf84c HTTPS www.ietf.org.cdn.cloudflare.net

         Frame 92: 91 bytes on wire (728 bits), 91 bytes captured (728 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 192.168.1.1
         User Datagram Protocol, Src Port: 53578, Dst Port: 53
         Domain Name System (query)
             Transaction ID: 0xf84c
             Flags: 0x0100 Standard query
             Questions: 1
             Answer RRs: 0
             Authority RRs: 0
             Additional RRs: 0
             Queries
             [Response In: 99]

         No.     Time           Source                Destination           Protocol Length Info
              93 7.359746       192.168.1.72          192.168.1.1           DNS      91     Standard query 0x8e7d A www.ietf.org.cdn.cloudflare.net

         Frame 93: 91 bytes on wire (728 bits), 91 bytes captured (728 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 192.168.1.1
         User Datagram Protocol, Src Port: 55742, Dst Port: 53
         Domain Name System (query)
             Transaction ID: 0x8e7d
             Flags: 0x0100 Standard query
             Questions: 1
             Answer RRs: 0
             Authority RRs: 0
             Additional RRs: 0
             Queries
             [Response In: 98]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
              96 7.519505       192.168.1.1           192.168.1.72          DNS      497    Standard query response 0x55fd HTTPS www.ietf.org CNAME www.ietf.org.cdn.cloudflare.net HTTPS NS ns5.cloudflare.net NS ns2.cloudflare.net NS ns1.cloudflare.net NS ns4.cloudflare.net NS ns3.cloudflare.net A 173.245.59.31 A 198.41.222.131 A 198.41.222.31 A 198.41.223.131 A 198.41.223.31 AAAA 2400:cb00:2049:1::adf5:3b1f AAAA 2400:cb00:2049:1::c629:de83 AAAA 2400:cb00:2049:1::c629:de1f AAAA 2400:cb00:2049:1::c629:df83 AAAA 2400:cb00:2049:1::c629:df1f

         Frame 96: 497 bytes on wire (3976 bits), 497 bytes captured (3976 bits) on interface en1, id 0
         Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
         Internet Protocol Version 4, Src: 192.168.1.1, Dst: 192.168.1.72
         User Datagram Protocol, Src Port: 53, Dst Port: 62126
         Domain Name System (response)
             Transaction ID: 0x55fd
             Flags: 0x8180 Standard query response, No error
             Questions: 1
             Answer RRs: 2
             Authority RRs: 5
             Additional RRs: 10
             Queries
             Answers
                 www.ietf.org: type CNAME, class IN, cname www.ietf.org.cdn.cloudflare.net
                 www.ietf.org.cdn.cloudflare.net: type HTTPS, class IN
             Authoritative nameservers
                 cloudflare.net: type NS, class IN, ns ns5.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns2.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns1.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns4.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns3.cloudflare.net
             Additional records
                 ns1.cloudflare.net: type A, class IN, addr 173.245.59.31
                 ns2.cloudflare.net: type A, class IN, addr 198.41.222.131
                 ns3.cloudflare.net: type A, class IN, addr 198.41.222.31
                 ns4.cloudflare.net: type A, class IN, addr 198.41.223.131
                 ns5.cloudflare.net: type A, class IN, addr 198.41.223.31
                 ns1.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::adf5:3b1f
                 ns2.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de83
                 ns3.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de1f
                 ns4.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df83
                 ns5.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df1f
             [Request In: 84]
             [Time: 0.168454000 seconds]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
              97 7.525307       192.168.1.1           192.168.1.72          DNS      459    Standard query response 0x6b64 A www.ietf.org CNAME www.ietf.org.cdn.cloudflare.net A 104.16.45.99 A 104.16.44.99 NS ns2.cloudflare.net NS ns1.cloudflare.net NS ns5.cloudflare.net NS ns4.cloudflare.net NS ns3.cloudflare.net A 173.245.59.31 A 198.41.222.131 A 198.41.222.31 A 198.41.223.131 A 198.41.223.31 AAAA 2400:cb00:2049:1::adf5:3b1f AAAA 2400:cb00:2049:1::c629:de83 AAAA 2400:cb00:2049:1::c629:de1f AAAA 2400:cb00:2049:1::c629:df83 AAAA 2400:cb00:2049:1::c629:df1f

         Frame 97: 459 bytes on wire (3672 bits), 459 bytes captured (3672 bits) on interface en1, id 0
         Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
         Internet Protocol Version 4, Src: 192.168.1.1, Dst: 192.168.1.72
         User Datagram Protocol, Src Port: 53, Dst Port: 62644
         Domain Name System (response)
             Transaction ID: 0x6b64
             Flags: 0x8180 Standard query response, No error
             Questions: 1
             Answer RRs: 3
             Authority RRs: 5
             Additional RRs: 10
             Queries
             Answers
                 www.ietf.org: type CNAME, class IN, cname www.ietf.org.cdn.cloudflare.net
                 www.ietf.org.cdn.cloudflare.net: type A, class IN, addr 104.16.45.99
                 www.ietf.org.cdn.cloudflare.net: type A, class IN, addr 104.16.44.99
             Authoritative nameservers
                 cloudflare.net: type NS, class IN, ns ns2.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns1.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns5.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns4.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns3.cloudflare.net
             Additional records
                 ns1.cloudflare.net: type A, class IN, addr 173.245.59.31
                 ns2.cloudflare.net: type A, class IN, addr 198.41.222.131
                 ns3.cloudflare.net: type A, class IN, addr 198.41.222.31
                 ns4.cloudflare.net: type A, class IN, addr 198.41.223.131
                 ns5.cloudflare.net: type A, class IN, addr 198.41.223.31
                 ns1.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::adf5:3b1f
                 ns2.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de83
                 ns3.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de1f
                 ns4.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df83
                 ns5.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df1f
             [Request In: 86]
             [Time: 0.173659000 seconds]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
              98 7.525317       192.168.1.1           192.168.1.72          DNS      433    Standard query response 0x8e7d A www.ietf.org.cdn.cloudflare.net A 104.16.44.99 A 104.16.45.99 NS ns2.cloudflare.net NS ns1.cloudflare.net NS ns4.cloudflare.net NS ns5.cloudflare.net NS ns3.cloudflare.net A 173.245.59.31 A 198.41.222.131 A 198.41.222.31 A 198.41.223.131 A 198.41.223.31 AAAA 2400:cb00:2049:1::adf5:3b1f AAAA 2400:cb00:2049:1::c629:de83 AAAA 2400:cb00:2049:1::c629:de1f AAAA 2400:cb00:2049:1::c629:df83 AAAA 2400:cb00:2049:1::c629:df1f

         Frame 98: 433 bytes on wire (3464 bits), 433 bytes captured (3464 bits) on interface en1, id 0
         Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
         Internet Protocol Version 4, Src: 192.168.1.1, Dst: 192.168.1.72
         User Datagram Protocol, Src Port: 53, Dst Port: 55742
         Domain Name System (response)
             Transaction ID: 0x8e7d
             Flags: 0x8180 Standard query response, No error
             Questions: 1
             Answer RRs: 2
             Authority RRs: 5
             Additional RRs: 10
             Queries
             Answers
                 www.ietf.org.cdn.cloudflare.net: type A, class IN, addr 104.16.44.99
                 www.ietf.org.cdn.cloudflare.net: type A, class IN, addr 104.16.45.99
             Authoritative nameservers
                 cloudflare.net: type NS, class IN, ns ns2.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns1.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns4.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns5.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns3.cloudflare.net
             Additional records
                 ns1.cloudflare.net: type A, class IN, addr 173.245.59.31
                 ns2.cloudflare.net: type A, class IN, addr 198.41.222.131
                 ns3.cloudflare.net: type A, class IN, addr 198.41.222.31
                 ns4.cloudflare.net: type A, class IN, addr 198.41.223.131
                 ns5.cloudflare.net: type A, class IN, addr 198.41.223.31
                 ns1.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::adf5:3b1f
                 ns2.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de83
                 ns3.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de1f
                 ns4.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df83
                 ns5.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df1f
             [Request In: 93]
             [Time: 0.165571000 seconds]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
              99 7.530981       192.168.1.1           192.168.1.72          DNS      471    Standard query response 0xf84c HTTPS www.ietf.org.cdn.cloudflare.net HTTPS NS ns4.cloudflare.net NS ns3.cloudflare.net NS ns1.cloudflare.net NS ns2.cloudflare.net NS ns5.cloudflare.net A 173.245.59.31 A 198.41.222.131 A 198.41.222.31 A 198.41.223.131 A 198.41.223.31 AAAA 2400:cb00:2049:1::adf5:3b1f AAAA 2400:cb00:2049:1::c629:de83 AAAA 2400:cb00:2049:1::c629:de1f AAAA 2400:cb00:2049:1::c629:df83 AAAA 2400:cb00:2049:1::c629:df1f

         Frame 99: 471 bytes on wire (3768 bits), 471 bytes captured (3768 bits) on interface en1, id 0
         Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
         Internet Protocol Version 4, Src: 192.168.1.1, Dst: 192.168.1.72
         User Datagram Protocol, Src Port: 53, Dst Port: 53578
         Domain Name System (response)
             Transaction ID: 0xf84c
             Flags: 0x8180 Standard query response, No error
             Questions: 1
             Answer RRs: 1
             Authority RRs: 5
             Additional RRs: 10
             Queries
             Answers
                 www.ietf.org.cdn.cloudflare.net: type HTTPS, class IN
             Authoritative nameservers
                 cloudflare.net: type NS, class IN, ns ns4.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns3.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns1.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns2.cloudflare.net
                 cloudflare.net: type NS, class IN, ns ns5.cloudflare.net
             Additional records
                 ns1.cloudflare.net: type A, class IN, addr 173.245.59.31
                 ns2.cloudflare.net: type A, class IN, addr 198.41.222.131
                 ns3.cloudflare.net: type A, class IN, addr 198.41.222.31
                 ns4.cloudflare.net: type A, class IN, addr 198.41.223.131
                 ns5.cloudflare.net: type A, class IN, addr 198.41.223.31
                 ns1.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::adf5:3b1f
                 ns2.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de83
                 ns3.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:de1f
                 ns4.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df83
                 ns5.cloudflare.net: type AAAA, class IN, addr 2400:cb00:2049:1::c629:df1f
             [Request In: 92]
             [Time: 0.171311000 seconds]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
             332 8.698384       192.168.1.72          192.168.1.1           DNS      78     Standard query 0x7e16 HTTPS analytics.ietf.org

         Frame 332: 78 bytes on wire (624 bits), 78 bytes captured (624 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 192.168.1.1
         User Datagram Protocol, Src Port: 64413, Dst Port: 53
         Domain Name System (query)
             Transaction ID: 0x7e16
             Flags: 0x0100 Standard query
             Questions: 1
             Answer RRs: 0
             Authority RRs: 0
             Additional RRs: 0
             Queries
             [Response In: 533]

         No.     Time           Source                Destination           Protocol Length Info
             333 8.698456       192.168.1.72          192.168.1.1           DNS      78     Standard query 0x5e8e AAAA analytics.ietf.org

         Frame 333: 78 bytes on wire (624 bits), 78 bytes captured (624 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 192.168.1.1
         User Datagram Protocol, Src Port: 63705, Dst Port: 53
         Domain Name System (query)
             Transaction ID: 0x5e8e
             Flags: 0x0100 Standard query
             Questions: 1
             Answer RRs: 0
             Authority RRs: 0
             Additional RRs: 0
             Queries
             [Response In: 606]

         No.     Time           Source                Destination           Protocol Length Info
             334 8.698510       192.168.1.72          192.168.1.1           DNS      78     Standard query 0xf20a A analytics.ietf.org

         Frame 334: 78 bytes on wire (624 bits), 78 bytes captured (624 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 192.168.1.1
         User Datagram Protocol, Src Port: 51303, Dst Port: 53
         Domain Name System (query)
             Transaction ID: 0xf20a
             Flags: 0x0100 Standard query
             Questions: 1
             Answer RRs: 0
             Authority RRs: 0
             Additional RRs: 0
             Queries
             [Response In: 660]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
             533 8.891728       192.168.1.1           192.168.1.72          DNS      131    Standard query response 0x7e16 HTTPS analytics.ietf.org SOA ns0.amsl.com

         Frame 533: 131 bytes on wire (1048 bits), 131 bytes captured (1048 bits) on interface en1, id 0
         Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
         Internet Protocol Version 4, Src: 192.168.1.1, Dst: 192.168.1.72
         User Datagram Protocol, Src Port: 53, Dst Port: 64413
         Domain Name System (response)
             Transaction ID: 0x7e16
             Flags: 0x8180 Standard query response, No error
             Questions: 1
             Answer RRs: 0
             Authority RRs: 1
             Additional RRs: 0
             Queries
             Authoritative nameservers
                 ietf.org: type SOA, class IN, mname ns0.amsl.com
             [Request In: 332]
             [Time: 0.193344000 seconds]

         No.     Time           Source                Destination           Protocol Length Info
             606 8.955778       192.168.1.1           192.168.1.72          DNS      411    Standard query response 0x5e8e AAAA analytics.ietf.org AAAA 2001:1900:3001:11::2d NS ns1.yyz1.afilias-nst.info NS ns0.amsl.com NS ns1.mia1.afilias-nst.info NS ns1.ams1.afilias-nst.info NS ns1.sea1.afilias-nst.info NS ns1.hkg1.afilias-nst.info A 65.22.9.1 A 65.22.6.79 A 4.31.198.39 A 65.22.8.1 AAAA 2a01:8840:9::1 AAAA 2001:1900:3001:11::27 AAAA 2a01:8840:8::1

         Frame 606: 411 bytes on wire (3288 bits), 411 bytes captured (3288 bits) on interface en1, id 0
         Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
         Internet Protocol Version 4, Src: 192.168.1.1, Dst: 192.168.1.72
         User Datagram Protocol, Src Port: 53, Dst Port: 63705
         Domain Name System (response)
             Transaction ID: 0x5e8e
             Flags: 0x8180 Standard query response, No error
             Questions: 1
             Answer RRs: 1
             Authority RRs: 6
             Additional RRs: 7
             Queries
             Answers
                 analytics.ietf.org: type AAAA, class IN, addr 2001:1900:3001:11::2d
             Authoritative nameservers
                 ietf.org: type NS, class IN, ns ns1.yyz1.afilias-nst.info
                 ietf.org: type NS, class IN, ns ns0.amsl.com
                 ietf.org: type NS, class IN, ns ns1.mia1.afilias-nst.info
                 ietf.org: type NS, class IN, ns ns1.ams1.afilias-nst.info
                 ietf.org: type NS, class IN, ns ns1.sea1.afilias-nst.info
                 ietf.org: type NS, class IN, ns ns1.hkg1.afilias-nst.info
             Additional records
                 ns1.yyz1.afilias-nst.info: type A, class IN, addr 65.22.9.1
                 ns1.ams1.afilias-nst.info: type A, class IN, addr 65.22.6.79
                 ns0.amsl.com: type A, class IN, addr 4.31.198.39
                 ns1.sea1.afilias-nst.info: type A, class IN, addr 65.22.8.1
                 ns1.yyz1.afilias-nst.info: type AAAA, class IN, addr 2a01:8840:9::1
                 ns0.amsl.com: type AAAA, class IN, addr 2001:1900:3001:11::27
                 ns1.sea1.afilias-nst.info: type AAAA, class IN, addr 2a01:8840:8::1
             [Request In: 333]
             [Time: 0.257322000 seconds]
       #+end_src
       #+begin_src sh +n
         No.     Time           Source                Destination           Protocol Length Info
             660 8.979479       192.168.1.1           192.168.1.72          DNS      455    Standard query response 0xf20a A analytics.ietf.org A 4.31.198.45 NS ns1.hkg1.afilias-nst.info NS ns0.amsl.com NS ns1.yyz1.afilias-nst.info NS ns1.ams1.afilias-nst.info NS ns1.sea1.afilias-nst.info NS ns1.mia1.afilias-nst.info A 65.22.7.1 A 65.22.6.79 A 65.22.9.1 A 65.22.6.1 AAAA 2a01:8840:7::1 AAAA 2001:500:6::79 AAAA 2a01:8840:9::1 AAAA 2a01:8840:6::1 AAAA 2a01:8840:8::1

         Frame 660: 455 bytes on wire (3640 bits), 455 bytes captured (3640 bits) on interface en1, id 0
         Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
         Internet Protocol Version 4, Src: 192.168.1.1, Dst: 192.168.1.72
         User Datagram Protocol, Src Port: 53, Dst Port: 51303
         Domain Name System (response)
             Transaction ID: 0xf20a
             Flags: 0x8180 Standard query response, No error
             Questions: 1
             Answer RRs: 1
             Authority RRs: 6
             Additional RRs: 9
             Queries
             Answers
                 analytics.ietf.org: type A, class IN, addr 4.31.198.45
             Authoritative nameservers
                 ietf.org: type NS, class IN, ns ns1.hkg1.afilias-nst.info
                 ietf.org: type NS, class IN, ns ns0.amsl.com
                 ietf.org: type NS, class IN, ns ns1.yyz1.afilias-nst.info
                 ietf.org: type NS, class IN, ns ns1.ams1.afilias-nst.info
                 ietf.org: type NS, class IN, ns ns1.sea1.afilias-nst.info
                 ietf.org: type NS, class IN, ns ns1.mia1.afilias-nst.info
             Additional records
                 ns1.mia1.afilias-nst.info: type A, class IN, addr 65.22.7.1
                 ns1.ams1.afilias-nst.info: type A, class IN, addr 65.22.6.79
                 ns1.yyz1.afilias-nst.info: type A, class IN, addr 65.22.9.1
                 ns1.hkg1.afilias-nst.info: type A, class IN, addr 65.22.6.1
                 ns1.mia1.afilias-nst.info: type AAAA, class IN, addr 2a01:8840:7::1
                 ns1.ams1.afilias-nst.info: type AAAA, class IN, addr 2001:500:6::79
                 ns1.yyz1.afilias-nst.info: type AAAA, class IN, addr 2a01:8840:9::1
                 ns1.hkg1.afilias-nst.info: type AAAA, class IN, addr 2a01:8840:6::1
                 ns1.sea1.afilias-nst.info: type AAAA, class IN, addr 2a01:8840:8::1
             [Request In: 334]
             [Time: 0.280969000 seconds]
       #+end_src

       Line 7. DNS query and response messages are then sent over UDP.

    5. What is the destination port for the DNS query message? What is the source port of DNS response message?

       Line 7. The destination port for the DNS query message is 53.
       Line 128. The source port of DNS response message is 53.

    6. To what IP address is the DNS query message sent? Use ipconfig to determine the IP address of your local DNS server. Are these two IP addresses the same?

       Line 6. The DNS query message is sent to 192.168.1.1. These two IP addresses are same.

    7. Examine the DNS query message. What “Type” of DNS query is it? Does the query message contain any “answers”?

       | Line No. | DNS Type |
       |        2 | HTTPS    |
       |       19 | AAAA     |
       |       36 | A        |

    8. Examine the DNS response message. How many “answers” are provided? What do each of these answers contain?

       以序号97的A记录DNS请求的响应为例，响应里一共包含了3小节信息：
       | Answers                   | CNAME和A记录                      |
       | Authoritative nameservers | 权威服务器的NS记录                |
       | Additional records        | 权威服务器NS记录对应的A和AAAA记录 |

    9. Consider the subsequent TCP SYN packet sent by your host. Does the destination IP address of the SYN packet correspond to any of the IP addresses provided in the DNS response message?

       YES.

       #+begin_src sh
         No.     Time           Source                Destination           Protocol Length Info
         1233 10.442433      192.168.1.72          4.31.198.45           TCP      78     59962 → 443 [SYN] Seq=0 Win=65535 Len=0 MSS=1460 WS=64 TSval=551439144 TSecr=0 SACK_PERM=1

         Frame 1233: 78 bytes on wire (624 bits), 78 bytes captured (624 bits) on interface en1, id 0
         Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
         Internet Protocol Version 4, Src: 192.168.1.72, Dst: 4.31.198.45
         Transmission Control Protocol, Src Port: 59962, Dst Port: 443, Seq: 0, Len: 0
       #+end_src

    10. This web page contains images. Before retrieving each image, does your host issue new DNS queries?

        NO.

    11. [@11]What is the destination port for the DNS query message? What is the source port of DNS response message?

        #+begin_src sh -n
          No.     Time           Source                Destination           Protocol Length Info
                8 3.494274       240e:3b7:2e91:9310:31bd:41e3:6d1e:3522 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754 DNS      91     Standard query 0x8c48 A www.mit.edu

          Frame 8: 91 bytes on wire (728 bits), 91 bytes captured (728 bits) on interface en1, id 0
          Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
          Internet Protocol Version 6, Src: 240e:3b7:2e91:9310:31bd:41e3:6d1e:3522, Dst: 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754
          User Datagram Protocol, Src Port: 50538, Dst Port: 53
          Domain Name System (query)
              Transaction ID: 0x8c48
              Flags: 0x0100 Standard query
              Questions: 1
              Answer RRs: 0
              Authority RRs: 0
              Additional RRs: 0
              Queries
              [Response In: 9]

          No.     Time           Source                Destination           Protocol Length Info
                9 3.496780       240e:3b7:2e91:9310:26f5:a2ff:feb3:b754 240e:3b7:2e91:9310:31bd:41e3:6d1e:3522 DNS      183    Standard query response 0x8c48 A www.mit.edu CNAME www.mit.edu.edgekey.net CNAME e9566.dscb.akamaiedge.net A 104.106.56.136

          Frame 9: 183 bytes on wire (1464 bits), 183 bytes captured (1464 bits) on interface en1, id 0
          Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
          Internet Protocol Version 6, Src: 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754, Dst: 240e:3b7:2e91:9310:31bd:41e3:6d1e:3522
          User Datagram Protocol, Src Port: 53, Dst Port: 50538
          Domain Name System (response)
              Transaction ID: 0x8c48
              Flags: 0x8180 Standard query response, No error
              Questions: 1
              Answer RRs: 3
              Authority RRs: 0
              Additional RRs: 0
              Queries
              Answers
                  www.mit.edu: type CNAME, class IN, cname www.mit.edu.edgekey.net
                  www.mit.edu.edgekey.net: type CNAME, class IN, cname e9566.dscb.akamaiedge.net
                  e9566.dscb.akamaiedge.net: type A, class IN, addr 104.106.56.136
              [Request In: 8]
              [Time: 0.002506000 seconds]
        #+end_src

        Line 7. The destination port for the DNS query message is 53.
        Line 24. The source port of DNS response message is 53.

    12. To what IP address is the DNS query message sent? Is this the IP address of your default local DNS server?

        240e:3b7:2e91:9310:26f5:a2ff:feb3:b754. Yes.

    13. Examine the DNS query message. What “Type” of DNS query is it? Does the query message contain any “answers”?

        A. Yes.

    14. Examine the DNS response message. How many “answers” are provided? What do each of these answers contain?

        两条CNAME记录，一条A记录。

    15. Provide a screenshot.

    16. [@16]To what IP address is the DNS query message sent? Is this the IP address of your default local DNS server?

        #+begin_src sh
          ❯ dig mit.edu ns

          ; <<>> DiG 9.10.6 <<>> mit.edu ns
          ;; global options: +cmd
          ;; Got answer:
          ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 33485
          ;; flags: qr rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 0, ADDITIONAL: 8

          ;; QUESTION SECTION:
          ;mit.edu.			IN	NS

          ;; ANSWER SECTION:
          mit.edu.		1080	IN	NS	eur5.akam.net.
          mit.edu.		1080	IN	NS	asia2.akam.net.
          mit.edu.		1080	IN	NS	usw2.akam.net.
          mit.edu.		1080	IN	NS	asia1.akam.net.
          mit.edu.		1080	IN	NS	ns1-173.akam.net.
          mit.edu.		1080	IN	NS	use2.akam.net.
          mit.edu.		1080	IN	NS	ns1-37.akam.net.
          mit.edu.		1080	IN	NS	use5.akam.net.

          ;; ADDITIONAL SECTION:
          ns1-37.akam.net.	89298	IN	A	193.108.91.37
          eur5.akam.net.		13993	IN	A	23.74.25.64
          asia2.akam.net.		78322	IN	A	95.101.36.64
          ns1-173.akam.net.	85792	IN	A	193.108.91.173
          usw2.akam.net.		146712	IN	A	184.26.161.64
          use2.akam.net.		89089	IN	A	96.7.49.64
          ns1-37.akam.net.	89298	IN	AAAA	2600:1401:2::25
          ns1-173.akam.net.	87583	IN	AAAA	2600:1401:2::ad

          ;; Query time: 10 msec
          ;; SERVER: 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754#53(240e:3b7:2e91:9310:26f5:a2ff:feb3:b754)
          ;; WHEN: Sat Aug 14 18:07:25 CST 2021
          ;; MSG SIZE  rcvd: 344
        #+end_src

        #+begin_src sh -n
          No.     Time           Source                Destination           Protocol Length Info
                1 0.000000       240e:3b7:2e91:9310:31bd:41e3:6d1e:3522 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754 DNS      98     Standard query 0x611d NS mit.edu OPT

          Frame 1: 98 bytes on wire (784 bits), 98 bytes captured (784 bits) on interface en1, id 0
          Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
          Internet Protocol Version 6, Src: 240e:3b7:2e91:9310:31bd:41e3:6d1e:3522, Dst: 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754
          User Datagram Protocol, Src Port: 51259, Dst Port: 53
          Domain Name System (query)
              Transaction ID: 0x611d
              Flags: 0x0120 Standard query
              Questions: 1
              Answer RRs: 0
              Authority RRs: 0
              Additional RRs: 1
              Queries
                  mit.edu: type NS, class IN
              Additional records
                  <Root>: type OPT
              [Response In: 2]

          No.     Time           Source                Destination           Protocol Length Info
                2 0.008975       240e:3b7:2e91:9310:26f5:a2ff:feb3:b754 240e:3b7:2e91:9310:31bd:41e3:6d1e:3522 DNS      466    Standard query response 0x611d NS mit.edu NS eur5.akam.net NS asia1.akam.net NS use2.akam.net NS asia2.akam.net NS ns1-37.akam.net NS usw2.akam.net NS ns1-173.akam.net NS use5.akam.net A 193.108.91.37 A 95.100.175.64 A 96.7.49.64 A 95.101.36.64 A 23.74.25.64 A 2.16.40.64 A 184.26.161.64 A 193.108.91.173 AAAA 2600:1401:2::25 AAAA 2600:1403:a::40 AAAA 2600:1401:2::ad

          Frame 2: 466 bytes on wire (3728 bits), 466 bytes captured (3728 bits) on interface en1, id 0
          Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
          Internet Protocol Version 6, Src: 240e:3b7:2e91:9310:26f5:a2ff:feb3:b754, Dst: 240e:3b7:2e91:9310:31bd:41e3:6d1e:3522
          User Datagram Protocol, Src Port: 53, Dst Port: 51259
          Domain Name System (response)
              Transaction ID: 0x611d
              Flags: 0x8180 Standard query response, No error
              Questions: 1
              Answer RRs: 8
              Authority RRs: 0
              Additional RRs: 11
              Queries
                  mit.edu: type NS, class IN
              Answers
                  mit.edu: type NS, class IN, ns eur5.akam.net
                  mit.edu: type NS, class IN, ns asia1.akam.net
                  mit.edu: type NS, class IN, ns use2.akam.net
                  mit.edu: type NS, class IN, ns asia2.akam.net
                  mit.edu: type NS, class IN, ns ns1-37.akam.net
                  mit.edu: type NS, class IN, ns usw2.akam.net
                  mit.edu: type NS, class IN, ns ns1-173.akam.net
                  mit.edu: type NS, class IN, ns use5.akam.net
              Additional records
                  ns1-37.akam.net: type A, class IN, addr 193.108.91.37
                  asia1.akam.net: type A, class IN, addr 95.100.175.64
                  use2.akam.net: type A, class IN, addr 96.7.49.64
                  asia2.akam.net: type A, class IN, addr 95.101.36.64
                  eur5.akam.net: type A, class IN, addr 23.74.25.64
                  use5.akam.net: type A, class IN, addr 2.16.40.64
                  usw2.akam.net: type A, class IN, addr 184.26.161.64
                  ns1-173.akam.net: type A, class IN, addr 193.108.91.173
                  ns1-37.akam.net: type AAAA, class IN, addr 2600:1401:2::25
                  use5.akam.net: type AAAA, class IN, addr 2600:1403:a::40
                  ns1-173.akam.net: type AAAA, class IN, addr 2600:1401:2::ad
              [Request In: 1]
              [Time: 0.008975000 seconds]
        #+end_src
        240e:3b7:2e91:9310:26f5:a2ff:feb3:b754. Yes.

    17. Examine the DNS query message. What “Type” of DNS query is it? Does the query message contain any “answers”?

        NS.

    18. Examine the DNS response message. What MIT nameservers does the response message provide? Does this response message also provide the IP addresses of the MIT namesers?

        mit.edu: type NS, class IN, ns eur5.akam.net
        mit.edu: type NS, class IN, ns asia1.akam.net
        mit.edu: type NS, class IN, ns use2.akam.net
        mit.edu: type NS, class IN, ns asia2.akam.net
        mit.edu: type NS, class IN, ns ns1-37.akam.net
        mit.edu: type NS, class IN, ns usw2.akam.net
        mit.edu: type NS, class IN, ns ns1-173.akam.net
        mit.edu: type NS, class IN, ns use5.akam.net

        Yes.

    19. Provide a screenshot.

    20. [@20]To what IP address is the DNS query message sent? Is this the IP address of your default local DNS server? If not, what does the IP address correspond to?

        #+begin_src sh
          ❯ dig www.aiit.or.kr @ns71.dnszi.com

          ; <<>> DiG 9.10.6 <<>> www.aiit.or.kr @ns71.dnszi.com
          ;; global options: +cmd
          ;; Got answer:
          ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 14836
          ;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 5, ADDITIONAL: 1
          ;; WARNING: recursion requested but not available

          ;; OPT PSEUDOSECTION:
          ; EDNS: version: 0, flags:; udp: 4096
          ;; QUESTION SECTION:
          ;www.aiit.or.kr.			IN	A

          ;; ANSWER SECTION:
          www.aiit.or.kr.		3600	IN	A	58.229.6.225

          ;; AUTHORITY SECTION:
          aiit.or.kr.		3600	IN	NS	ns88.dnszi.com.
          aiit.or.kr.		3600	IN	NS	ns25.dnszi.com.
          aiit.or.kr.		3600	IN	NS	ns9.dnszi.com.
          aiit.or.kr.		3600	IN	NS	ns71.dnszi.com.
          aiit.or.kr.		3600	IN	NS	ns66.dnszi.com.

          ;; Query time: 392 msec
          ;; SERVER: 121.78.72.41#53(121.78.72.41)
          ;; WHEN: Sat Aug 14 18:41:03 CST 2021
          ;; MSG SIZE  rcvd: 162
        #+end_src

        #+begin_src sh -n
          No.     Time           Source                Destination           Protocol Length Info
                1 0.000000       192.168.1.72          121.78.72.41          DNS      85     Standard query 0x39f4 A www.aiit.or.kr OPT

          Frame 1: 85 bytes on wire (680 bits), 85 bytes captured (680 bits) on interface en1, id 0
          Ethernet II, Src: Apple_51:06:4a (b8:09:8a:51:06:4a), Dst: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54)
          Internet Protocol Version 4, Src: 192.168.1.72, Dst: 121.78.72.41
          User Datagram Protocol, Src Port: 49902, Dst Port: 53
          Domain Name System (query)
              Transaction ID: 0x39f4
              Flags: 0x0120 Standard query
              Questions: 1
              Answer RRs: 0
              Authority RRs: 0
              Additional RRs: 1
              Queries
                  www.aiit.or.kr: type A, class IN
              Additional records
                  <Root>: type OPT
              [Response In: 3]

          No.     Time           Source                Destination           Protocol Length Info
                3 0.392447       121.78.72.41          192.168.1.72          DNS      204    Standard query response 0x39f4 A www.aiit.or.kr A 58.229.6.225 NS ns88.dnszi.com NS ns25.dnszi.com NS ns9.dnszi.com NS ns71.dnszi.com NS ns66.dnszi.com OPT

          Frame 3: 204 bytes on wire (1632 bits), 204 bytes captured (1632 bits) on interface en1, id 0
          Ethernet II, Src: BelkinIn_b3:b7:54 (24:f5:a2:b3:b7:54), Dst: Apple_51:06:4a (b8:09:8a:51:06:4a)
          Internet Protocol Version 4, Src: 121.78.72.41, Dst: 192.168.1.72
          User Datagram Protocol, Src Port: 53, Dst Port: 49902
          Domain Name System (response)
              Transaction ID: 0x39f4
              Flags: 0x8500 Standard query response, No error
              Questions: 1
              Answer RRs: 1
              Authority RRs: 5
              Additional RRs: 1
              Queries
                  www.aiit.or.kr: type A, class IN
              Answers
                  www.aiit.or.kr: type A, class IN, addr 58.229.6.225
              Authoritative nameservers
                  aiit.or.kr: type NS, class IN, ns ns88.dnszi.com
                  aiit.or.kr: type NS, class IN, ns ns25.dnszi.com
                  aiit.or.kr: type NS, class IN, ns ns9.dnszi.com
                  aiit.or.kr: type NS, class IN, ns ns71.dnszi.com
                  aiit.or.kr: type NS, class IN, ns ns66.dnszi.com
              Additional records
                  <Root>: type OPT
              [Request In: 1]
              [Time: 0.392447000 seconds]
        #+end_src

        121.78.72.41.
        No.
        DNS server ns71.dnszi.com.

    21. Examine the DNS query message. What “Type” of DNS query is it? Does the query message contain any “answers”?

        A.
        Yes.

    22. Examine the DNS response message. How many “answers” are provided? What does each of these answers contain?

        Answers
            www.aiit.or.kr: type A, class IN, addr 58.229.6.225
        Authoritative nameservers
            aiit.or.kr: type NS, class IN, ns ns88.dnszi.com
            aiit.or.kr: type NS, class IN, ns ns25.dnszi.com
            aiit.or.kr: type NS, class IN, ns ns9.dnszi.com
            aiit.or.kr: type NS, class IN, ns ns71.dnszi.com
            aiit.or.kr: type NS, class IN, ns ns66.dnszi.com

    23. Provide a screenshot.

* 运输层
** 笔记

   #+NAME: prdt
   #+CAPTION: 构造可靠数据传输协议
   | 问题                                  | 解决方案                 |
   | 1 比特差错                            | 差错检验,发送方反馈,重传 |
   | 1.1 ACK受损                           | 收到受损的ACK执行重传    |
   | 1.2 收到受损的ACK执行重传引入冗余分组 | 分组编号                 |
   | 2 丢包                                | 超时重传                 |

** 复习题
*** R1 UDP提供的服务模型、运输层协议工作的位置

    假定网络层提供了下列服务。在源主机中的网络层接受最大长度1200字节和来自运输层的目的主机地址的报文段。网络层则保证将该报文段交付给位于目的主机的运输层。假定在目的主机上能够运行许多网络应用进程。

    1. 设计可能最简单的运输层协议，该协议将使应用程序数据到达位于目的主机的所希望的进程。假设在目的主机中的操作系统已经为每个运行的应用进程分配了一个4字节的端口号。
    2. 修改这个协议，使它向目的进程提供一个的“返回地址”。
    3. 在你的协议中，该运输层在计算机网络的核心中“必须做任何事”吗？


    1. 简单运输协议（Simple Transport Protocol，STP）。
       在发送方，STP接受来自发送进程的一个不超过1196字节的数据块、一个目的主机地址和一个目的端口号。STP为每个数据块添加一个四字节的头部，这个头部的内容是目的进程的端口号。然后，STP将目的主机地址和产生的报文段交给网络层。网络层将报文段交付给目的主机的STP。然后，STP检查段中的端口号，从段中提取数据，并将数据传递给由端口号确定的进程。
    2. STP的头部增加一个4字节的源端口字段。
    3. 运输层协议是在端系统中而不是在路由器中实现。

*** R2 信件邮政服务类比传输层协议

    考虑有一个星球，每个人都属于某个六口之家，每个家庭都住在自己的房子里，每个房子都一个唯一的地址，并且某给定家庭中的每个人有一个独特的名字。假定该星球有一个从源家庭到目的家庭交付信件的邮政服务。该邮件服务要求：①在一个信封中有一封信；②在信封上清楚地写上目的家庭的地址（并且没有别的东西）。假设每个家庭有一名家庭成员代表为家庭中的其他成员收集和分发信件。这些信没有必要提供任何有关信的接收者的指示。

    1. 使用对上面复习题R1的解决方案作为启发，描述家庭成员代表能够使用的协议，以从发送家庭成员向接收家庭成员交付信件。
    2. 在你的协议中，该邮政服务必须打开信封并检查信件内容才能提供它的服务吗？


    1. 寄信时，家庭成员要把信的本身、目的地房屋的地址和收信人的姓名交给委托人。委托人在信的上面清楚地写上收件人的名字。然后，代表将信装入信封，并在信封上写上目的地房屋的地址。然后，代表将信交给地球上的邮递员。在收信方，代表从邮件服务处收到信，把信从信封里拿出来，并记下写在信上面的收件人姓名。然后，代表将信交给有这个名字的家庭成员。
    2. 邮件服务不需要打开信封；它只检查信封上的地址。

*** R3 发送方和接受方的源端口号和目的端口号的关系

    考虑在主机A和主机B之间有一条TCP连接。假设从主机A传送到主机B的TCP报文段具有源端口号x和目的端口号y。对于从主机B传送到主机A的报文段，源端口号和目的端口号分别是多少？

    源端口号y，目的端口号x。

*** R4 UDP相较于TCP的优势 p.131

    描述应用程序开发者为什么可能选择在UDP上运行应用程序而不是在TCP上运行的原因。

    + 关于发送什么数据以及何时发送的应用层控制更为精细。
    + 无须连接建立。
    + 无连接状态。
    + 分组首部开销小。

*** R5 流媒体应用在UDP更具有优势的前提下选择TCP的原因 p.131

    在今天的因特网中，为什么语音和图像流量常常是经过TCP而不是经UDP发送。（提示：我们寻找的答案与TCP的拥塞控制机制没有关系。）

    当分组丢包率低时，并且为了安全原因，某些机构阻塞UDP流扯，对于流式媒体传输来说，TCP变得越来越有吸引力了。

*** R6 在UDP之上的应用层协议中实现可靠性传输 p.132

    当某应用程序运行在UDP上时，该应用程序可能得到可靠数据传输吗？如果能，如何实现？

    可能。可以通过在应用程序自身中建立可靠性机制来完成。

*** R7 UDP套接字由二元组（目的IP地址、目的端口号）标识 p.127

    假定在主机C上的一个进程有一个具有端口号6789的UDP套接字。假定主机A和主机B都用目的端口号6789向主机C发送一个UDP报文段。这两台主机的这些报文段在主机C都被描述为相同的套接字吗？如果是这样的话，在主机C的该进程将怎样知道源于两台不同主机的这两个报文段？

    这两个报文段将被定向到同一个套接字。进程可以从套接字接口获取报文段的源IP地址从而确定其来源。

*** R8 TCP套接字由一个四元组标识 p.128

    假定在主机C端口80上运行的一个Web服务器。假定这个Web服务器使用持续连接，并且正在接收来自两台不同主机A和B的请求。被发送的所有请求都通过位于主机C的相同套接字吗？如果它们通过不同的套接字传递，这两个套接字都具有端口80吗？讨论和解释之。

    对于每个持久性连接，Web服务器创建一个单独的 "连接套接字"。每个连接套接字都有一个四元组标识：（源IP地址、源端口号、目标IP地址、目标端口号）。当主机C收到IP数据报时，它检查数据报/报文段中的这四个字段，以确定它应该将TCP报文段的有效载荷传递给哪个套接字。因此，来自A和B的请求通过不同的套接字。这两个套接字的标识符的目的端口都是80；但是，这些套接字的标识符的源IP地址的值不同。与UDP不同，当传输层将TCP段的有效载荷传递给应用进程时，它不指定源IP地址，因为这是由套接字标识符隐含地指定的。

*** R9 为什么引入序号 p.138

    在我们的rdt协议中，为什么需要引入序号？

    在rdt2.0中引入了确认和重传解决了分组可能受损或丢失的问题；但同时引入了冗余分组。接收方在收到冗余分组时不知道这是一个新的分组还是重传。于是给分组加上序号，这样接收方就能确定收到的分组是否是一次重传。

*** R10 为什么引入定时器 p.141

    在我们的rdt协议中，为什么需要引入定时器？

    在rdt3.0中引入定时器是为了检测丢包，即数据分组丢失、ACK丢失或者该分组或ACK过度延时。

*** R11

    假定发送方和接收方之间的往返时延是固定的并且为发送方所知。假设分组能够丢失的话，在协议rdt3.0中，一个定时器仍是必需的吗？试解释之。

    仍然是必需的。定时器的作用是在一个确定的时间后如果没收到ACK就判定丢包，这个确定的时间至少是RTT加接收方处理分组的时间。至于这个RTT是不是固定且已知的只会影响判定的准确性。

*** R12 Go-Back-N动画演示

    在配套网站上使用Go-Back-N（回退N步）Java小程序。
    1. 让源发送5个分组，在这5个分组的任何一个到达目的地之前暂停该动画。然后毁掉第一个分组并继续该动画。试描述发生的情况。
    2. 重复该实验，只是现在让第一个分组到达目的地并毁掉第一个确认。再次描述发生的情况。
    3. 最后，尝试发送6个分组。发生了什么情况？


    [[https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/go-back-n-protocol/index.html][Go-Back-N Protocol.]]

    1. 接收方收到1、2、3、4分组，但是由于失序而丢弃。经过一段时间后定时器超时，接收方重传0～4分组。接收方收到分组后发送ACK0～4。发送方收到ACK0～4后窗口移动至5～9。
    2. 接收方在收到1分组后发出ACK1。发送方收到ACK1后移动了发送窗口。
    3. 在1毁掉第一个分组后，发送方继续发送完1～5分组后发送窗口已满，无法发送6分组。

*** R13 Selective Repeat动画演示

    重复复习题R12，但是现在使用Selective Repeat（选择重传）Java小程序。选择重传和回退N步有什么不同？

    [[https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html][Selective Repeat Protocol.]]

    1. \-
       + 接收方确认了1-4分组，并发送ACK1-4
       + 发送方收到ACK1-4后，经过一段时间定时器超时，重发0分组
       + 接收方确认0分组，发送ACK0，发送窗口移动（rcv_base指向5）
       + 接收方收到ACK0，接收窗口移动（send_base指向5）
    2. 发送方在定时器超时后重传1分组
    3. 发送窗口已满，无法发送6分组。

*** R14

    是非判断题：
    1. 主机A经过一条TCP连接向主机B发送一个大文件。假设主机B没有数据发往主机A。因为主机B不能随数据捎带确认，所以主机B将不向主机A发送确认。
    2. 在连接的整个过程中，TCP的rwnd的长度决不会变化。
    3. 假设主机A通过一条TCP连接向主机B发送一个大文件。主机A发送但未被确认的字节数不会超过接收缓存的大小。
    4. 假设主机A通过一条TCP连接向主机B发送一个大文件。如果对于这条连接的一个报文段的序号为m，则对于后继报文段的序号将必然是m+1。
    5. TCP报文段在它的首部中有一个rwnd字段。
    6. 假定在一条TCP连接中最后的SampleRTT等于1秒，那么对于该连接的TimeoutInterval的当前值必定大于等于1秒。
    7. 假设主机A通过一条TCP连接向主机B发送一个序号为38的4个字节的报文段。在这个相同的报文段中，确认号必定是42。


    1. 主机B需要发送确认。
    2. rwnd会随着发送方的空闲换粗大小改变。
    3. 正确。
    4. 报文段的序号是该报文段首字节的字节流编号。
    5. 正确。
    6. TimeoutInterval=EstimatedRTT+4DevRTT
    7. 确认号是对主机B序号对确认，而不是对主机A自己。

*** R15 TCP报文段的序号和确认号

    假设主机A通过一条TCP连接向主机B发送两个紧接着的TCP报文段。第一个报文段的序号为90，第二个报文段序号为110。
    1. 第一个报文段中有多少数据？
    2. 假设第一个报文段丢失而第二个报文段到达主机B。那么在主机B发往主机A的确认报文中，确认号应该是多少？


    1. 20字节
    2. ACK=90

*** R16 Telnet中的TCP序号和确认号

    考虑在3.5节中讨论的Telnet的例子。在用户键入字符C数秒之后，用户又键入字符R。那么在用户键入字符R之后，总共发送了多少个报文段，这些报文段中的序号和确认字段应该填入什么？

    #+begin_src plantuml :file img/ch3-r16.svg :cmdline -charset utf-8
      @startuml
      !theme vibrant
      participant "主机A" as A
      participant "主机B" as B

      A->B: Seq=42, ACK=79, data='C'
      note left: 用户键入'C'

      B->A: Seq=79, ACK=43, data='C'
      note right: 主机确认收到'C'，回显'C'

      A->B: Seq=43, ACK=80, data='R'
      note left: 主机确认收到回显的'C'，用户键入'R'

      B->A: Seq=80, ACK=44, data='R'
      note right: 主机确认收到'R'，回显'R'

      A->B: Seq=44, ACK=81
      note left: 主机确认收到回显的'R'
      @enduml
    #+end_src

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    #+RESULTS:
    [[file:img/ch3-r16.svg]]

*** R17 公平性

    假设两条TCP连接存在于一个带宽为Rbps的瓶颈链路上。它们都要发送一个很大的文件（以相同方向经过瓶颈链路），并且两者是同时开始发送文件。那么TCP将为每条连接分配什么样的传输速率？

    R/2

*** R18

    是非判断题。考虑TCP的拥塞控制。当发送方定时器超时时，其ssthresh的值将被设置为原来值的一半。

    错误，设为拥塞窗口的一半。

*** R19 TCP分叉 p.179

    在3.7节的“TCP分岔”讨论中，对于TCP分岔的响应时间，断言大约是\( 4\times RTT_{FE}+RTT_{BE}+\text{处理时间} \)。评价该断言。

    #+begin_src plantuml :file img/ch3-r18a.svg :cmdline -charset utf-8
      @startuml
      !theme vibrant
      title 不使用分叉
      participant 主机 as C
      participant 服务器 as S

      C->S
      S->C
      note left: 握手\nRTT

      C->S
      S->C
      C->S
      S->C
      C->S
      S->C
      note left: 交付响应\n3RTT
      @enduml
    #+end_src

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:200px;
    #+RESULTS:
    [[file:img/ch3-r18a.svg]]

    #+begin_src plantuml :file img/ch3-r18b.svg :cmdline -charset utf-8
      @startuml
      !theme vibrant
      title 部署前端服务器并使用TCP分叉
      participant 主机 as C
      participant 前端服务器 as FS
      participant 后端服务器 as BS

      C->FS
      FS->C
      note left: 握手\nRTT_{FE}

      C->FS
      note left: 请求

      FS->BS
      note right: T_{处理}
      BS->FS
      note over FS: RTT_{BE}

      FS->C

      C->FS
      FS->C
      C->FS
      FS->C
      note left: 3RTT_{FE}
      @enduml
    #+end_src

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:350px;
    #+RESULTS:
    [[file:img/ch3-r18b.svg]]

** 习题
*** P1 源端口号和目的端口号

    假设客户A向服务器S发起一个Telnet会话。与此同时，客户B也向服务器S发起一个Telnet会话。给出下面报文段的源端口号和目的端口号：
    1. 从A向S发送的报文段。
    2. 从B向S发送的报文段。
    3. 从S向A发送的报文段。
    4. 从S向B发送的报文段。
    5. 如果A和B是不同的主机，那么从A向S发送的报文段的源端口号是否可能与从B向S发送的报文段的源端口号相同？
    6. 如果它们是同一台主机，情况会怎么样？


    1. \-
       | 序号 | 源端口号 | 目的端口号 |
       |    1 | A        | S          |
       |    2 | B        | S          |
       |    3 | S        | A          |
       |    4 | S        | B          |

    5. [@5]Yes
    6. No

*** P2

    考虑图3-5。从服务器返回客户进程的报文流中的源端口号和目的端口号是多少？在承载运输层报文段的网络层数据报中，IP地址是多少？

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    [[./img/fig3-5.png]]

    报文段中的源端口和目的端口对调，数据包中的源IP和目的IP对调。

*** P3 UDP检验和 p.133

    UDP和TCP使用反码来计算它们的检验和。假设你有下面3个8比特字节：01010011，01100110，01110100。
    1. 这些8比特字节和的反码是多少？（注意到尽管UDP和TCP使用16比特的字来计算检验和，但对于这个问题，你应该考虑8比特和。）写出所有工作过程。
    2. UDP为什么要用该和的反码，即为什么不直接使用该和呢？
    3. 使用该反码方案，接收方如何检测出差错？
    4. 1比特的差错将可能检测不出来吗？
    5. 2比特的差错呢？


    1. \-
       #+begin_example
           0101 0011
         + 0110 0110
         = 1011 1001

           1011 1001    0010 1101
         + 0111 0100  +         1
         =10010 1101    0010 1110

           0010 1110
         c 1101 0001
       #+end_example

    2. 接收方将校验和在内的比特字加在一起，如果结果比特中没有0则认为没有引入差错。如果校验和直接用和，那么接收方要用减法，猜测是因为减法用硬件处理更慢。
    3. 见2
    4. 1比特的差错都可以被检测出
    5. 2比特差错可能检测不出。如果2个不同比特字节的对应位置出现差错，求和的结果不变，所以检测不出。


    UDP求和时遇到溢出采用的是回卷处理（[[https://qr.ae/pGWXNX][wrap around]]）。实际上采用截断也是可以的。例如，原始报文段 0110 1110，采用截断求和得到 0100，求反得到校验和1011，一样能够校验。

*** P4 和的反码

    1. 假定你有下列2个字节：01011100和01100101。这2个字节之和的反码是什么？
    2. 假定你有下列2个字节：11011010和01100101。这2个字节之和的反码是什么？
    3. 对于（1）中的字节，给出一个例子，使得这2个字节中的每一个都在一个比特反转时，其反码不会改变。


    1. \-
       #+begin_example
           0101 1100
         + 0110 0101
         = 1100 0001
         c 0011 1110
       #+end_example
    2. \-
       #+begin_example
           1101 1010
         + 0110 0101
         =10011 1111

           0011 1111
         +         1
         = 0100 0000
         c 1011 1111
       #+end_example
    3. \-
       #+begin_example
           0101 1101
         + 0110 0100
         = 1100 0001
         c 0011 1110
       #+end_example

*** P5 UDP差错检测

    假定某UDP接收方对接收到的UDP报文段计算因特网检验和，并发现它与承载在检验和字段中的值相匹配。该接收方能够绝对确信没有出现过比特差错吗？试解释之。

    不能，解释见P3.5、P4。

*** P6 rdt2.1进入死锁的改动

    考虑我们改正协议rdt2.1的动机。试说明如图3-57所示的接收方与如图3-11所示的发送方运行时，接收方可能会引起发送方和接收方进入死锁状态，即双方都在等待不可能发生的事件。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:700px;
    [[./img/fig3-11.png]]

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:800px;
    [[./img/fig3-57.png]]

    在“等待来自下层的0”状态中，蓝色的事件动作是原来的，对corrupt和seq1响应是不同的；而修改后这两个事件合并到一起了，都返回NAK。“等待来自下层的1”也作了类似的修改。

    现在假设发送处于“等待来自上层的调用0”状态，发送了分组0，状态变为“等待ACK或NAK 0”。接收方收到分组0，返回ACK，状态变为“等待来自下层的1”。但是这个ACK在传送的过程中损坏了，于是发送方重传分组0。接收方收到分组0后发送NAK。发送方收到NAK后继续重传分组0，双方进入死锁状态，如下图。

    #+begin_src plantuml :file img/ch3-p6.svg :cmdline -charset utf-8
      @startuml
      !theme vibrant
      skinparam defaultFontName "Sarasa Mono SC Nerd"
      participant 发送发 as S
      participant 接收方 as R
      S -> R: pkt0
      note left: 发送分组0\n[等待来自上层的调用0]→[等待ACK或NAK 0]

      R -[#red]> S: ACK(corrupt)
      note right: 接收分组0\n发送ACK\n[等待来自下层的0]→[等待来自下层的1]

      S -> R: pkt0
      note left: 分组损坏\n重传分组0\n[等待ACK或NAK 0]

      group 进入死锁
              R -> S: NAK
              note right: has_seq0\n发送NAK\n[等待来自下层的1]

              S -> R: pkt0
              note left: isNAK\n重传分组0\n[等待ACK或 NAK0]
      end
      @enduml
    #+end_src

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:700px;
    #+RESULTS:
    [[file:img/ch3-p6.svg]]

*** P7 序号的作用

    在rdt3.0协议中，从接收方向发送方流动的ACK分组没有序号（尽管它们具有ACK字段，该字段包括了它们正在确认的分组的序号）。为什么这些ACK分组不需要序号呢？

    rdt3.0是一个比特交替协议，同时也是一个停等协议。例如，当发送方处于等待ACK0的状态时，发送方被阻塞，只有收到了ACK0才会解除阻塞状态。此时不论接收方发送ACK0还是ACK1都有对应的合理行为，不会有什么误解，所以ACK分组不需要需要序号。
    序号是用于解决接受方不能区分分组是新的还是重传的这个问题的。

*** P8 rdt3.0

    画出协议rdt3.0中接收方的FSM。

    rdt3.0的发送方相较于rdt2.2增加了timeout重传，rdt2.2的接收方仍然能够处理这种情况。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:1000px;
    [[./img/ch3-p8.png]]

*** P9 rdt3.0分组发生篡改的时序图

    当数据分组和确认分组发生篡改时，给出rdt3.0协议运行的轨迹。你画的轨迹应当类似于图3-16中所用的图。

    #+begin_src plantuml :file img/ch3-p9a.svg :cmdline -charset utf-8
      @startuml
      !theme vibrant
      participant 发送发 as S
      participant 接收方 as R
      S -[#red]> R: pkt0(发生篡改)
      note left: 发送分组0\n等待ACK0
      R -> S: ACK1
      note right: 接收分组0\n数据篡改\n发送ACK1
      note left: 接收ACK1\n忽略
      hnote over S: 超时
      S -> R: pkt0
      note left: 重发分组0
      R -> S: ACK0
      note right: 接收分组0\n发送ACK0
      S -> R: pkt1
      note left: 接收ACK0\n发送分组1
      @enduml
    #+end_src

    #+CAPTION: 数据分组发生篡改
    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:300px;
    #+RESULTS:
    [[file:img/ch3-p9a.svg]]

    #+begin_src plantuml :file img/ch3-p9b.svg :cmdline -charset utf-8
      @startuml
      !theme vibrant
      participant 发送发 as S
      participant 接收方 as R
      S -> R: pkt0
      note left: 发送分组0\n等待ACK0
      R -[#red]> S: ACK0 (发生篡改)
      note right: 接收分组0\n发送ACK0
      note left: 接收ACK0\n发生篡改\n忽略
      hnote over S: 超时
      S -> R: pkt0
      note left: 重发分组0
      R -> S: ACK0
      note right: 忽略分组0\n发送ACK0
      S -> R: pkt1
      note left: 接收ACK0\n发送分组1
      @enduml
    #+end_src

    #+CAPTION: 确认分组发生篡改
    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:300px;
    #+RESULTS:
    [[file:img/ch3-p9b.svg]]

*** P10 为rdt2.1增加超时重传

    考虑一个能够丢失分组但其最大时延已知的信道。修改协议rdt2.1，以包括发送方超时和重传机制。非正式地论证：为什么你的协议能够通过该信道正确通信？

    rdt3.0由rdt2.2改进，无NAK。本题由rdt2.1改进，使用ACK和NAK，接收方与rdt2.1相同。

    #+CAPTION: rdt3.1发送方
    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:1000px;
    [[./img/ch3-p10.png]]

*** P11 rdt2.2进入死锁的改动

    考虑在图3-14中的rdt2.2接收方，在状态"等待来自下层的0"和状态"等待来自下层的1"中的自转换（即从某状态转换回自身）中生成一个新分组： ~sndpkt=make_pkt(ACK, 1, checksum)~ 和 ~sndpkt=make_pkt(ACK, 0, checksum)~ 。如果这个动作从状态"等待来自下层的1"中的自转换中删除，该协议将正确工作吗？评估你的答案。在状态"等待来自下层的0"中的自转换中删除这个事件将会怎样？【提示：在后一种情况下，考虑如果第一个发送方到接收方的分组损坏的话，将会发生什么情况？】

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:800px;
    [[./img/fig3-14.png]]

    会发生类似于P6的死锁情况。

*** P12 rdt3.0

    rdt3.0协议的发送方直接忽略（即不采取任何动作）接收到的所有出现差错和确认分组的确认号（acknum）字段中的值有差错的分组。假设在这种情况下，rdt3.0只是重传当前的数据分组，该协议是否还能正常运行？（提示：考虑在下列情况下会发生什么悄况：仅有一个比特差错时；报文没有丢失但能出现定时器过早超时。考虑到当n趋于无穷时，第n个分组将被发送多少次。）

    The sender side of rdt3.0 simply ignores (that is, takes no action on) all received packets that are either in error or have the wrong value in the acknum field of an acknowledgment packet. Suppose that in such circumstances, rdt3.0 were simply to retransmit the current data packet. Would the protocol still work? (Hint: Consider what would happen if there were only bit errors; there are no packet losses but premature timeouts can occur. Consider how many times the nth packet is sent, in the limit as n approaches infinity.)

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:355px;
    [[./img/ch3-p12.png]]

    可以正常工作。由上图可以看出，第一次过早超时所引起的重传会导致发送方对接下来的每个分组都重传一次。后面的第二次、第三次到第n次过早超时都会有这样的影响。所以第n个分组会被发送n+2次，n趋于无穷时，被发送的次数也趋近无穷。

*** P13 rdt3.0

    考虑rdt3.0协议。如果发送方和接收方的网络连接能够对报文重排序（即在发送方和接收方之间的媒体上传播的两个报文段能重新排序），那么比特交替协议将不能正确工作（确信你清楚地理解这时它不能正确工作的原因），试画图说明之。画图时把发送方放在左边，接收方放在右边，使时间轴朝下，标出交换的数据报文（D）和确认报文（A）。要标明与任何数据和确认报文段相关的序号。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:274px;
    [[./img/ch3-p13.png]]

*** P14 只是用NAK的协议

    考虑一种仅使用否定确认的可靠数据传输协议。假定发送方只是偶尔发送数据。只用NAK的协议是否会比使用ACK的协议更好？为什么？现在我们假设发送方要发送大量的数据，并且该端到端连接很少丢包。在第二种情况下，只用NAK的协议是否会比使用ACK的协议更好？为什么？

    #+begin_quote
    在仅使用NAK的协议中，接收方只有在收到x+1数据包时，才能发现数据包x的丢失。如果x的传输和x+1的传输之间有很大的延迟，将需要很长的时间才能恢复x。

    另一方面，如果数据经常被发送，那么恢复可能很快发生。此外，如果错误不经常发生，那么NAK只是在需要的时候偶尔发送，反馈比只发送ACK的情况下大大减少。
    #+end_quote

*** P15 信道利用率

    考虑显示在图3-17中的网络跨越国家的例子。窗口长度设览成多少时，才能使该信道的利用率超过90%？假设分组的长度为1500字节（包括首部字段和数据）。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    [[./img/fig3-17.png]]

    发送一个分组所需要的时间：

    \[ t_{\rm{trans}} = \frac{L}{R} = \frac{1500\rm{Byte/pkt}}{10^{9}\rm{bit/s}} = 12\rm{μs/pkt} \]

    设窗口长度为n，令利用率为90%：

    \begin{align*}
      U_{\rm{sender}} &= \frac{n\times t_{\rm{trans}}}{RTT+t_{\rm{trans}}} = \frac{0.012n}{30.012} > 0.9 \\
      n &> 2250.9
    \end{align*}

*** P16 流水线

    假设某应用使用rdt3.0作为其运输层协议。因为停等协议具有非常低的信道利用率（显示在网络跨越国家的例子中），该应用程序的设计者让接收方持续回送许多（大于2）交替的ACK0和ACKI，即使对应的数据未到达接收方。这个应用程序设计将能增加信道利用率吗？为什么？该方法存在某种潜在的问题吗？试解释之。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:200px;
    [[./img/ch3-p16.png]]

    可以触发一定程度的流水线，但是发送方将无法重传丢失的分组。

*** P17 严格交替发送的状态机

    考虑两个网络实体A和B，它们由一条完善的双向信道所连接（即任何发送的报文将正确地收到；信道将不会损坏、丢失或重排序分组）。A和B将以交互的方式彼此交付报文：首先，A必须向B交付一个报文，B然后必须向A交付一个报文，接下来A必须向B交付一个报文，等等。如果一个实体处于它不试图向另一侧交付报文的状态，将存在一个来自上层的类似于rdt_send(data)调用的事件，它试图向下传送数据以向另一侧传输，来自上层的该调用能够直接忽略对于rdt_unable_to_send(data)调用，这通知较高层当前不能够发送数据。［注意：做出这种简化的假设，使你不必担心缓存数据。］

    对该协议画出FSM说明（一个FSM用于A，一个FSM用千B）。注意你不必担心这里的可靠性机制，该问题的要点在于创建反映这两个实体的同步行为的FSM说明。应当使用与图3-9中协议rdt1.0有相同含义的下列事件和动作：rdt_send(data)，packet = make_pkt(data) ，udt_send(packet)，rdt_rcv(packet) ，extract (packet, data)，deliver_data(data)。保证你的协议反映了A和B之间发送的严格交替。还要保证在你的FSM描述中指出A和B的初始状态。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:800px;
    [[./img/ch3-p17.png]]

*** P18 选择重传

    在3.4.4节我们学习的一般性SR协议中，只要报文可用（如果报文在窗口中），发送方就会不等待确认而传输报文。假设现在我们要求一个SR协议，一次发出一对报文，而且只有在知道第一对报文中的两个报文都正确到达后才发送第二对报文。

    假设该信道中可能会丢失报文，但报文不会发生损坏和失序。试为报文的单向可靠传输而设计一个差错控制协议。画出发送方和接收方的FSM描述。描述在发送方和接收方之间两个方向发送的报文格式。如果你使用了不同于3.4节（例如udt_send()、start_timer()、rdt_rcv()等）中的任何其他过程调用，详细地阐述这些动作。举例说明（用发送方和接收方的时序踪迹图）你的协议是如何恢复报文丢失的。

    SR的状态机图：

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:700px;
    [[./img/ch3-p18a.png]]

    用一个窗口长度N=2的SR协议，且仅当send_base、send_base+1都被确认了才移动send_base。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:700px;
    [[./img/ch3-p18b.png]]

*** P19 由rdt3.0衍生的发送给多个接收方的停等模型

    考虑一种情况，主机A想同时向主机B和主机C发送分组。A与B和C是经过广播信道连接的，即由A发送的分组通过该信道传送到B和C。假设连接A、B和C的这个广播信道具有独立的报文丢失和损坏特性（例如，从A发出的报文可能被B正确接收，但没有被C正确接收）。设计一个类似于停等协议的差错控制协议，用于从A可靠地传输分组到B和C。该协议使得A直到得知B和C已经正确接收到当前报文，才获取上层交付的新数据。给出A和C的FSM描述。（提示：B的FSM大体上应当与C的相同。）同时，给出所使用的报文格式的描述。

    因为信道可能丢失报文，所以分组需要序号。在rdt3.0的基础上修改即可，发送方的FSM如下，接收方的FSM同rdt3.0。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:1100px;
    [[./img/ch3-p19.png]]

*** P20 由rdt3.0衍生的多个发送方的停等模型

    考虑一种主机A和主机B要向主机C发送报文的情况。主机A和C通过一条报文能够丢失和损坏（但不重排序）的信道相连接。主机B和C由另一条（与连接A和C的信道独立）具有相同性质的信道连接。在主机C上的运输层，在向上层交付来自主机A和B的报文时应当交替进行（即它应当首先交付来自A的分组中的数据，然后是来自B的分组中的数据，等等）。设计一个类似于停等协议的差错控制协议，以可靠地向C传输来自A和B的分组，同时以前面描述的方式在C处交替地交付。给出A和C的FSM描述。（提示：B的FSM大体上应当与A的相同。）同时，给出所使用的报文格式的描述。

    接收方：

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    [[./img/ch3-p20.png]]

    发送方与rdt3.0相同。

*** P21 停等协议中超时重传和序号的作用

    假定我们有两个网络实体A和B。B有一些数据报文要通过下列规则传给A。当A从其上层得到一个请求，就从B获取下一个数据（D）报文。A必须通过A-8信道向B发送一个请求（R）报文。仅当B收到一个R报文后，它才会通过B—A信道向A发送一个数据（D）报文。A应当准确地将每份D报文的副本交付给上层。R报文可能会在A—B信道中丢失（但不会损坏）；D报文一旦发出总是能够正确交付。两个信道的时延未知且是变化的。设计一个协议（给出FSM描述），它能够综合适当的机制，以补偿会丢包的A—B信道，并且实现在A实体中向上层传递报文。只采用绝对必要的机制。

    因为A-B信道可能会丢失请求信息，A将需要超时并重发其请求信息（以便能够从丢失中恢复）。因为信道的延迟是可变的和未知的，所以A有可能会发送重复的请求（即重新发送已经被B收到的请求信息）。为了能够检测重复的请求信息，该协议将使用序列号。一个1位的序列号对于一个停止和等待类型的请求/响应协议来说就足够了。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:500px;
    [[./img/ch3-p21.png]]

*** P22 GBN协议中发送方窗口长度和接收方期待序号间的关系

    考虑一个GBN协议，其发送方窗口为4，序号范围为1024。假设在时刻t，接收方期待的下一个有序分组的序号是k。假设媒体不会对报文重新排序。回答以下问题：
    a. 在t时刻，发送方窗口内的报文序号可能是多少？论证你的回答。
    b. 在t时刻，在当前传播回发送方的所有可能报文中，ACK字段的所有可能值是多少？论证你的回答。


    a. 发送方期待的下一个分组的序号是k，说明了发送已经发送了k之前分组的确认。最坏的情况是这些确认消息发送方都还没有收到，那么此时发送方的窗口是k-4，k-3，k-2，k-1。最好的情况是这些确认消息都送达了发送方，那么此时发送方的窗口是k，k+1，k+2，k+3.
    b. k-4，k-3，k-2，k-1。

*** P23 序号空间和窗口长度的关系

    考虑GBN协议和SR协议。假设序号空间的长度为k，那么为了避免出现图3-27中的问题，对于这两种协议中的每一种，允许的发送方窗口最大为多少？

    设窗口的大小为N，由P22可知，当接收方期待的序号是p时，发送方的窗口可能范围是[p-N, p+N-1]。序号空间至少要容纳下这个范围窗口才不会出现重叠，即k⩾length([p-N, p+N-1])=2N。

*** P24 SR和SBN的窗口长度

    对下面的问题判断是非，并简要地证实你的回答：
    a. 对于SR协议，发送方可能会收到落在其当前窗口之外的分组的ACK。
    b. 对于GBN协议，发送方可能会收到落在其当前窗口之外的分组的ACK。
    c. 当发送方和接收方窗口长度都为1时，比特交替协议与SR协议相同。
    d. 当发送方和接收方窗口长度都为1时，比特交替协议与GBN协议相同。


    a. 正确。
       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:250px;
       [[./img/ch3-p24.png]]
    b. 正确，理由同上。
    c. 正确。
    d. 正确。当窗口大小为1时，SR、GBN和交替位协议在功能上是等同的。窗口大小为1时，排除了（在窗口内）出现失序包的可能性。在这种情况下，累积ACK只是一个普通的ACK，因为它只能指窗口内的单个数据包。

*** P25 UDP提供了更好的应用层控制

    我们曾经说过，应用程序可能选择UDP作为运输协议，因为UDP提供了（比TCP）更好的应用层控制，以决定在报文段中发送什么数据和发送时机。
    a. 应用程序为什么对在报文段中发送什么数据有更多的控制？
    b. 应用程序为什么对何时发送报文段有更多的控制？


    a. [[https://stackoverflow.com/a/17446839/10422197][TCP stream vs UDP message]]
    b. 在TCP中，由于流量控制和拥塞控制，从应用程序将数据写入其发送缓冲区到数据被交给网络层，可能会有很大的延迟。UDP没有由于流量控制和拥塞控制而产生的延迟。

*** P26 TCP报文段的序号

    考虑从主机A向主机B传输L字节的大文件，假设MSS为536字节。
    a. 为了使得TCP序号不至于用完，L的最大值是多少？前面讲过TCP的序号字段为4字节。
    b. 对于你在（a）中得到的L，求出传输此文件要用多长时间？假定运输层、网络层和数据链路层首部总共为66字节，并加在每个报文段上，然后经155Mbps链路发送得到的分组。忽略流量控制和拥塞控制，使主机A能够一个接一个和连续不断地发送这些报文段。


    a. 4字节的序号字段能提供2^32=4294967296个序号，由于序号是字节流编号，所以跟MSS无关，能传输的最大文件就是2^32字节。
    b. ⌈2^32/536⌉*(536+66)byte/155Mbps≈249s

*** P27 TCP报文段的序号、重传和确认

    主机A和B经一条TCP连接通信，并且主机B已经收到了来自A的最长为126字节的所有字节。假定主机A随后向主机B发送两个紧接着的报文段。第一个和第二个报文段分别包含了80字节和40字节的数据。在第一个报文段中，序号是127，源端口号是302，目的地端口号是80。无论何时主机B接收到来自主机A的报文段，它都会发送确认。
    a. 在从主机A发往B的第二个报文段中，序号、源端口号和目的端口号各是什么？
    b. 如果第一个报文段在第二个报文段之前到达，在第一个到达报文段的确认中，确认号、源端口号和目的端口号各是什么？
    c. 如果第二个报文段在第一个报文段之前到达，在第一个到达报文段的确认中，确认号是什么？
    d. 假定由A发送的两个报文段按序到达B。第一个确认丢失了而第二个确认在第一个超时间隔之后到达。画出时序图，显示这些报文段和发送的所有其他报文段和确认。（假设没有其他分组丢失。）对于图上每个报文段，标出序号和数据的字节数量；对于你增加的每个应答，标出确认号。


    从A发给B的报文段：

    | 报文段 | 序号 | 长度 |
    |      1 |  127 |   80 |
    |      2 |  207 |   40 |
    |      3 |  247 |      |

    a. \-
       | 序号 | 源端口号 | 目的端口号 |
       |  207 |      302 |         80 |

    b. \-
       | 确认号 | 源端口号 | 目的端口号 |
       |    207 |       80 |        302 |

    c. 第二个报文段和第一个报文段的确认号都是207

    d. \-
       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:300px;
       [[./img/ch3-p27.png]]

*** P28 流量控制

    主机A和B直接经一条1OOMbps链路连接。在这两台主机之间有一条TCP连接。主机A经这条连接向主机B发送一个大文件。主机A能够向它的TCP套接字以高达120Mbps的速率发送应用数据，而主机B能够以最大50Mbps的速率从它的TCP接收缓存中读出数据。描述TCP流量控制的影响。

    由于链路的传输速率是100Mbps，所以主机A的发送速率最高是100Mbps。主机B通过在TCP报文段中的RcvWindow告知主机A可用的缓存空间。当主机B的接收缓存存满时这个值是0，此时主机A停止发送数据，直到接收到RcvWindow>0的报文段主机A开始重新发送数据。

*** P29 SYN cookie

    在3.5.6节中讨论了SYN cookie。
    a. 服务器在SYNACK中使用一个特殊的初始序号，这为什么是必要的？
    b. 假定某攻击者得知了一台目标主机使用了SYN cookie。该攻击者能够通过直接向目标发送一个ACK分组创建半开或全开连接吗？为什么？
    c. 假设某攻击者收集了由服务器发送的大量初始序号。该攻击者通过发送具有初始序号的ACK，能够引起服务器产生许多全开连接吗？为什么？


    a. 使用这个特殊的初始序号可以抵御SYN泛洪攻击。
    b. 攻击者不能通过简单地向目标发送ACK分组来创建半开或全开的连接。因为使用SYN cookie的服务器在建立完全连接之前不会为任何连接保持连接变量和缓冲区，所以创建半开放连接是不可能的。为了建立全开的连接，攻击者应该知道与攻击者的（欺骗的）源IP地址相对应的特殊初始序列号。这个序列号的产生需要知道服务器使用的秘密数。由于攻击者不知道这个秘密数，所以无法猜到初始序列号。
    c. 服务器可以简单地在计算这些初始序列号时加入一个时间戳，并为这些序列号选择一个存活时间，即使攻击者重播这些序列号，服务器也会丢弃过期的初始序列号。

*** P30 有限缓存的路由器对拥塞的影响

    考虑在3.6.1节中显示在第二种情况下的网络。假设发送主机A和B具有某些固定的超时值。
    a. 证明增加路由器有限缓存的长度可能减小吞吐量（λ_{out}）。
    b. 现在假设两台主机基于路由器的缓存时延，动态地调整它们的超时值（像TCP所做的那样）。增加缓存长度将有助于增加吞吐量吗？为什么？


    a. 缓存长度增加会导致发送发提前超时并重传在队列中已被推迟但还未丢失的分组的情况更加频繁地发生。这就导致了供给载荷中重传分组的占比增加，因此会降低吞吐量。
    b. 如果超时值能基于路由器的缓存时延动态调整，那么增加缓存长度将有助于增加吞吐量。因为增加缓存长度导致的缓存时延的增加，将不再引起重传分组的增加。

*** P31 往返时间的估计与超时

    假设测量的5个SampleRTT值（参见3.5.3节）是106ms、120ms、140ms、90ms和115ms。在获得了每个SampleRTT值后计算EstimatedRTT，使用α=0.125并且假设在刚获得前5个样本之后EstimatedRTT的值为1OOms。在获得每个样本之后，也计算DevRTT，假设β=0.25，并且假设在刚获得前5个样本之后DevRTT的值为5ms。最后，在获得这些样本之后计算TCP TimeoutInterval。

    EstimatedRTT = (1-α)·EstimatedRTT + α·SampleRTT
    DevRTT = (1-β)⋅DevRTT + β⋅SampleDevRTT
    TimeoutInterval = EstimatedRTT + 4⋅DevRTT

    | SampleRTT        | 106 | 120 | 140 |  90 | 115 |
    | EstimatedRTT 100 | 101 | 103 | 108 | 106 | 107 |
    | DevRTT 5         |   5 |   9 |  16 |  17 |  15 |
    | TimeoutInterval  | 121 | 139 | 172 | 174 | 167 |

*** P32 指数移动平均

    考虑TCP估计RTT的过程。假设α=0.1，令SampleRT_{T1}设置为最新样本RTT，令SampleRT_{T2}设置为下一个最新样本RTT，等等。
    a. 对于一个给定的TCP连接，假定4个确认报文相继到达，带有4个对应的RTT值：SampleRT_{T4}、SampleRT_{T3}、SampleRT_{T2}和SampleRT_{T1}。根据这4个样本RTT表示EstimatedRTT。
    b. 将你得到的公式一般化到n个RTT样本的情况。
    c. 对于在（b）中得到的公式，令n趋于无穷。试说明为什么这个平均过程被称为指数移动平均。


    a. \-

       | SampleRTT | EstimatedRTT   | simplified EstimatedRTT               |
       | T1        | T1             | T1                                    |
       | T2        | (1-α)ERTT1+αT2 | (1-α)T1+αT2                           |
       | T3        | (1-α)ERTT2+αT3 | (1-α)^{2}T1+(1-α)αT2+αT3              |
       | T4        | (1-α)ERTT2+αT3 | (1-α)^{3}T1+(1-α)^{2}αT2+(1-α)αT3+αT4 |

    b. \-
       \begin{equation*}
         EstimatedRTT_{n} =\begin{cases}
         T_{1} &\text{if } n=1, \\
         (1-α)^{n-1}T_{1}+\sum_{k=2}^{n}(1-α)^{n-k}αT_{k} &\text{if } n⩾2.
         \end{cases}
       \end{equation*}

    c. 过去样本的权重呈指数级衰减。

*** P33 避免测量重传报文段的SampleRTT

    在3.5.3节中，我们讨论了TCP的往返时间的估计。TCP避免测量重传报文段的SampleRTT，对此你有何看法？

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:300px;
    [[./img/ch3-p33.png]]

*** P34 SendBase和LastByteRcvd

    3.5.4节中的变量SendBase和3.5.5节中的变量LastByteRcvd之间有什么关系？

    TCP状态变量SendBase是最早未被确认的字节的序号。（因此SendBase-1是指接收方已正确按序接收到的数据的最后一个字节的序号。）

    LastByteRcvd：从网络中到达的并且已放入主机B接收缓存中的数据流的最后一个字节的编号。

    到达接收方的分组的确认可能还没到达发送方，所以SendBase–1⩽LastByteRcvd。

*** P35 确认序号y和LastByteRcvd

    3.5.5节中的变量LastByteRcvd和3.5.4节中的变量y之间有什么关系？

    y：ACK的值

    y-1⩽LastByteRvcd

*** P36 快速重传的时机

    在3.5.4节中，我们看到TCP直到收到3个冗余ACK才执行快速重传。你对TCP设计者没有选择在收到对报文段的第一个冗余ACK后就快速重传有何看法？

    考虑相邻的两个分组重排的情况：

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:400px;
    [[./img/ch3-p36.png]]

    等待3个冗余ACK的方案权衡了触发快速重传的时机，即只有收到2个失序分组是才会触发。

*** P37 相较于GBN、SR，TCP的快速重传的优点

    比较GBN、SR和TCP（无延时的ACK）。假设对所有3个协议的超时值足够长，使得5个连续的数据报文段及其对应的ACK能够分别由接收主机（主机B）和发送主机（主机A）收到（如果在信道中无丢失）。假设主机A向主机B发送5个数据报文段，并且第二个报文段（从A发送）丢失。最后，所有5个数据报文段已经被主机B正确接收。
    a. 主机A总共发送了多少报文段和主机B总共发送了多少ACK？它们的序号是什么？对所有3个协议回答这个问题。
    b. 如果对所有3个协议超时值比5RTT长得多，则哪个协议在最短的时间间隔中成功地交付所有5个数据报文段？


    a. \-
       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:610px;
       [[./img/ch3-p37.png]]

    b. TCP的发送方通常可在超时事件发生之前通过注意所谓冗余ACK来较好地检测到丢包情况。

*** P38 发送速率与cwnd

    在图3-52中的TCP描述中，阈值ssthresh的值在几个地方被设置为ssthresh=cwnd/2，其中包括出现一个丢包事件时，ssthresh的值被设置为窗口长度的一半。当出现丢包事件时，发送方发送的速率，每个RTT必须大约等于cwnd报文段吗？（Must the rate at which the sender is sending when the loss event occurred be approximately equal to cwnd segments per RTT?）解释你的答案。如果你的回答是没有，你能建议一种不同的方式，进行ssthresh设置吗？

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:400px;
    [[./img/fig3-52.png]]

    发送方的发送速率就是cwnd/RTT。

*** P39 有限缓存路由器的丢包分析

    考虑图3-46b。如果 \(λ_{in}^{\prime}\) 增加超过了R/2，λ_{out}能够增加超过R/3吗？试解释之。现在考虑图3-46c。假定一个分组从路由器到接收方平均转发两次的话，如果 \(λ_{in}^{\prime}\) 增加超过R/2，λ_{out}能够增加超过R/4吗？试解释之。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    [[./img/fig3-46.png]]

    当 \(λ_{in}^{\prime}\) 等于R/2时，λ_{out}等于R/3，那么供给载荷中有R/6是重传的分组。随着 \(λ_{in}^{\prime}\) 的继续增加，路由器的总到达速率会超过R，丢包率也会逐渐增加，重传分组的占比会提高，因此λ_{out}会小于R/3。同理在图3-46c中 λ_{in}^{\prime}\) 增加超过了R/2，λ_{out}也会小于R/4。

*** P40 TCP拥塞控制的过程

    考虑图3-58。假设TCP Reno是一个经历如上所示行为的协议，回答下列问题。在各种情况中，简要地论证你的回答。
    a. 指出TCP慢启动运行时的时间间隔。
    b. 指出TCP拥塞避免运行时的时间间隔。
    c. 在第16个传输轮回之后，报文段的丢失是根据3个冗余ACK还是根据超时检测出 来的？
    d. 在第22个传输轮回之后、报文段的丢失是根据3个冗余ACK还是根据超时检测出来的？
    e. 在第1个传输轮回里，ssthresh的初始值设置为多少？
    f. 在第18个传输轮回里，ssthresh的值设置为多少？
    g. 在第24个传输轮回里，ssthresh的值设置为多少？
    h. 在哪个传输轮回内发送第70个报文段？
    i. 假定在第26个传输轮回后，通过收到3个冗余ACK检测出有分组丢失，拥塞的窗口长度和ssthresh的值应当是多少？
    j. 假定使用TCP Tahoe（而不是TCP Reno），并假定在第16个传输轮回收到3个冗余ACK。在第19个传输轮回，ssthresh和拥塞窗口长度是什么？
    k. 再次假设使用TCP Tahoe，在第22个传输轮回有一个超时事件。从第17个传输轮回到第22个传输轮回（包括这两个传输轮回），一共发送了多少分组？


    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:400px;
    [[./img/fig3-58.png]]

    | 传输轮回 | 阶段     | ssthresh |
    |      1-6 | 慢启动   |       32 |
    |     6-16 | 拥塞避免 |       32 |
    |    17-22 | 快速恢复 |       21 |
    |    23-26 | 慢启动   |       14 |

    a. [1-6]、[23-26]
    b. [6-16]
    c. 3个冗余ACK
    d. 超时
    e. 32MSS
    f. 21MSS
    g. 14MSS
    h. 7
    i. ssthresh=4，cwnd=7
    j. \-
       #+PLOT: ind:1 deps:(2 3) type:2d
       | 传输轮回 | ssthresh | cwnd | 阶段                   |
       |----------+----------+------+------------------------|
       |        1 |       32 |    1 | 慢启动                 |
       |        2 |       32 |    2 |                        |
       |        3 |       32 |    4 |                        |
       |        4 |       32 |    8 |                        |
       |        5 |       32 |   16 |                        |
       |        6 |       32 |   32 | cwnd⩾ssthresh,拥塞避免 |
       |        7 |       32 |   33 |                        |
       |        8 |       32 |   34 |                        |
       |        9 |       32 |   35 |                        |
       |       10 |       32 |   36 |                        |
       |       11 |       32 |   37 |                        |
       |       12 |       32 |   38 |                        |
       |       13 |       32 |   39 |                        |
       |       14 |       32 |   40 |                        |
       |       15 |       32 |   41 |                        |
       |       16 |       32 |   42 |                        |
       |       17 |       21 |    1 | 3个冗余ACK,慢启动      |
       |       18 |       21 |    2 |                        |
       |       19 |       21 |    4 |                        |
       |       20 |       21 |    8 |                        |
       |       21 |       21 |   16 |                        |
       |       22 |       21 |   32 | cwnd⩾ssthresh,拥塞避免 |
       |       23 |       21 |   33 |                        |
       |       24 |       21 |   34 |                        |
       |       25 |       21 |   35 |                        |
       |       26 |       21 |   36 |                        |

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:600px;
       [[./img/ch3-p40j.svg]]
    k. \-
       #+PLOT: ind:1 deps:(2 3) type:2d
       | 传输轮回 | ssthresh | cwnd | 阶段                   |
       |----------+----------+------+------------------------|
       |        1 |       32 |    1 | 慢启动                 |
       |        2 |       32 |    2 |                        |
       |        3 |       32 |    4 |                        |
       |        4 |       32 |    8 |                        |
       |        5 |       32 |   16 |                        |
       |        6 |       32 |   32 | cwnd⩾ssthresh,拥塞避免 |
       |        7 |       32 |   33 |                        |
       |        8 |       32 |   34 |                        |
       |        9 |       32 |   35 |                        |
       |       10 |       32 |   36 |                        |
       |       11 |       32 |   37 |                        |
       |       12 |       32 |   38 |                        |
       |       13 |       32 |   39 |                        |
       |       14 |       32 |   40 |                        |
       |       15 |       32 |   41 |                        |
       |       16 |       32 |   42 |                        |
       |       17 |       21 |    1 | 慢启动                 |
       |       18 |       21 |    2 |                        |
       |       19 |       21 |    4 |                        |
       |       20 |       21 |    8 |                        |
       |       21 |       21 |   16 |                        |
       |       22 |        8 |    1 | 超时,慢启动            |
       |       23 |        8 |    2 |                        |
       |       24 |        8 |    4 |                        |
       |       25 |        8 |    8 | cwnd⩾ssthresh,拥塞避免 |
       |       26 |        8 |    9 |                        |

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:600px;
       [[./img/ch3-p40k.svg]]

*** P41 TCP拥塞控制的公平性

    参考图3-55，该图描述了TCP的AIMD算法的收敛特性。假设TCP不采用乘性减，而是采用按某一常量减小窗口。所得的AIAD算法将收敛于一种平等共享算法吗？使用类似于图3-55中的图来证实你的结论。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:400px;
    [[./img/fig3-55.png]]

    假设两条有相同MSS和RTT的TCP连接1、2共享一段传输速率为10MSS的链路。在传输轮回1，连接1的速率为1MSS，连接2的速率为8MSS，下表展示了两条连接最终收敛到平等带宽共享曲线附近的过程：

    #+NAME: ch3-p41a
    | 传输轮回 | 连接1 | 连接2 | sum |
    |----------+-------+-------+-----|
    |        1 |     1 |     8 |   9 |
    |        2 |     2 |     9 |  11 |
    |        3 |     1 |     4 |   5 |
    |        4 |     2 |     5 |   7 |
    |        5 |     3 |     6 |   9 |
    |        6 |     4 |     7 |  11 |
    |        7 |     2 |     3 |   5 |
    |        8 |     3 |     4 |   7 |
    |        9 |     4 |     5 |   9 |
    |       10 |     5 |     6 |  11 |

    #+begin_src gnuplot :var data=ch3-p41a :file img/ch3-p41a.svg
      reset
      set xlabel "连接1的吞吐量"
      set ylabel "连接2的吞吐量"
      set arrow 1 from 1,8 to 2,9
      set arrow 2 from 2,9 to 1,4
      set arrow 3 from 1,4 to 2,5
      set arrow 4 from 2,5 to 3,6
      set arrow 5 from 3,6 to 4,7
      set arrow 6 from 4,7 to 2,3
      set arrow 7 from 2,3 to 3,4
      set arrow 8 from 3,4 to 4,5
      set arrow 9 from 4,5 to 5,6
      plot [0:10][0:10] data using 2:3 title "总吞吐量" with points pointtype 6,\
           x t "平等带宽共享曲线" w l,\
           10-x t "全带宽利用曲线" w l
    #+end_src

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    #+RESULTS:
    [[file:img/ch3-p41a.svg]]

    现在假设按照常量2减小窗口：

    #+NAME: ch3-p41b
    | 传输轮回 | A | B | sum |
    |----------+---+---+-----|
    |        1 | 1 | 8 |   9 |
    |        2 | 2 | 9 |  11 |
    |        3 | 0 | 7 |   7 |
    |        4 | 1 | 8 |   9 |
    |        5 | 2 | 9 |  11 |
    |        6 | 0 | 7 |   7 |
    |        7 | 1 | 8 |   9 |
    |        8 | 2 | 9 |  11 |

    #+begin_src gnuplot :var data=ch3-p41b :file img/ch3-p41b.svg
      reset
      set xlabel "连接1的吞吐量"
      set ylabel "连接2的吞吐量"
      set arrow 1 from 1,8 to 2,9
      set arrow 2 from 2,9 to 0,7
      set arrow 3 from 0,7 to 1,8
      plot [0:10][0:10] data using 2:3 title "总吞吐量" with points pointtype 6,\
           x t "平等带宽共享曲线" w l,\
           10-x t "全带宽利用曲线" w l
    #+end_src

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:600px;
    #+RESULTS:
    [[file:img/ch3-p41b.svg]]

*** P42 加倍超时间隔与拥塞控制

    在3.5.4节中，我们讨论了在发生超时事件后将超时间隔加倍（p.162）。为什么除了这种加倍超时间隔机制外，TCP还需要基于窗口的拥塞控制机制（如在3.7节中学习的那种机制）呢？

    发送流量 = 发送频率 * 发送流量/每次

    这两种方式都起到了限制发送流量的作用。加倍超时间隔降低了发送的频率，基于窗口的拥塞控制减少了每次发送的流量。

    #+begin_quote
    If TCP were a stop-and-wait protocol, then the doubling of the time out interval would suffice as a congestion control mechanism. However, TCP uses pipelining (and is therefore not a stop-and-wait protocol), which allows the sender to have multiple outstanding unacknowledged segments. The doubling of the timeout interval does not prevent a TCP sender from sending a large number of first-time-transmitted packets into the network, even when the end-to-end path is highly congested. Therefore a congestioncontrol mechanism is needed to stem the flow of “data received from the application above” when there are signs of network congestion.
    #+end_quote

*** P43 流量控制和拥塞控制工作的前提

    主机A通过一条TCP连接向主机B发送一个很大的文件。在这条连接上，不会出现任何分组丢失和定时器超时。主机A与因特网连接链路的传输速率表示为Rbps。假设主机A上的进程能够以Sbps的速率向TCP套接字发送数据，其中S=10×R。进一步假设TCP的接收缓存足够大，能够容纳整个文件，并且发送缓存只能容纳这个文件的百分之一。如何防止主机A上的进程连续地向TCP套接字以速率Sbps传送数据呢？还是用TCP流量控制呢？还是用TCP拥塞控制？或者用其他措施？阐述其理由。

    由于接收方的接收缓冲区可以容纳整个文件，所以不存在溢出的危险。另外，由于不会出现分组丢失和定时器超时，TCP拥塞控制起作用。然而，由于主机A的发送缓冲区很快会被填满，进程不会连续地向套接字传送数据。一旦发送缓冲区被填满，该进程将以平均速率R向套接字传送数据。

*** P44 cwnd与平均吞吐量

    考虑从一台主机经一条没有丢包的TCP连接向另一台主机发送一个大文件。
    a. 假定TCP使用不具有慢启动的AIMD进行拥塞控制。假设每当收到一批ACK时，cwnd增加1个MSS，并且假设往返时间大约恒定，cwnd从6MSS增加到12MSS要花费多长时间（假设没有丢包事件）？
    b. 对于该连接，到时间＝6RTT，其平均吞吐址是多少（根据MSS和RTT）？


    a. 6RTT
    b. (6+7+8+9+10+11MSS)/6RTT = 8.5 MSS/RTT

*** P45 对TCP吞吐量的宏观描述

    回想TCP吞吐量的宏观描述。在连接速率从W/(2xRTT)变化到W/RTT的周期内，只丢失了一个分组（在该周期的结束）。
    a. 证明其丢包率（分组丢失的比率）等于：
       \[ L=\text{丢包率}=\frac{1}{\frac38W^2+\frac34W} \]
    b. 如果一条连接的丢包率为L，使用上面的结果，则它的平均速率近似由下式给出：
       \[ \text{平均速率}\approx \frac{1.22*MSS}{RTT\sqrt{L}} \]


    a. 在该周期内总共传输的分组数量为

       \begin{align*}
         \text{P} &= \frac{W}{2}+(\frac{W}{2}+1)+\cdots + W \\
         &= \sum_{n=0}^{W/2}(\frac{W}{2}+n) \\
         &= (\frac{w}{2}+1)\frac{W}{2}+\sum_{n=0}^{W/2}n \\
         &= \frac38W^2 + \frac34W
       \end{align*}

       由于丢失了一个分组，所以丢包率为

       \[ L=\frac{1\cdot MSS}{P\cdot MSS}=\frac{1}{\frac38W^2+\frac34W} \]

    b. 对于较大的W，\( \frac38W^2 >> \frac34W \)。所以 \( L \approx \frac{8}{3W^2} \)，即 \( W \approx \sqrt{\frac{8}{3L}} \)。

       所以

       \begin{align*}
         \text{一条连接的平均吞吐量} &= \frac{0.75\cdot W\cdot MSS}{RTT} \\
         &\approx  \frac{0.75\cdot \sqrt{\frac83}\cdot MSS}{\sqrt{L}\cdot RTT} \\
         &= \frac{1.22MSS}{RTT\sqrt{L}}
       \end{align*}

*** P46 计算TCP吞吐量与窗口长度

    考虑仅有一条单一的TCP（Reno）连接使用一条1OMbps链路，且该链路没有缓存任何数据。假设这条链路是发送主机和接收主机之间的唯一拥塞链路。假定某TCP发送方向接收方有一个大文件要发送，而接收方的接收缓存比拥塞窗口要大得多。我们也做下列假设：每个TCP报文段长度为1500字节；该连接的双向传播时延是150ms；并且该TCP连接总是处于拥塞避免阶段，即忽略了慢启动。
    a. 这条TCP连接能够取得的最大窗口长度（以报文段计）是多少？
    b. 这条TCP连接的平均窗口长度（以报文段计）和平均吞吐量（以bps计）是多少？
    c. 这条TCP连接在从丢包恢复后，再次到达其最大窗口要经历多长时间？


    a. 该连接取得最大窗口长度W时的吞吐量等于链路的容量，即Throughput_{max}=10Mbps，由于

       \begin{align*}
         T_{max} = \frac{W⋅MSS}{RTT}
       \end{align*}

       所以

       \begin{align*}
         W &= \frac{T_{max}\cdot RTT}{MSS}\\
         &= \frac{10\text{Mbps}⋅150\text{ms}}{1500\text{B}} \\
         &= 125
       \end{align*}

    b. 平均窗口长度等于0.75W≈94，平均吞吐量约等于0.75*10Mpbs=7.5Mbps。

    c. 125/2*150ms=9.375s

*** P47 TCP吞吐量与链路缓存

    考虑在前面习题中所描述的场景。假设1OMbps链路能够缓存有限个报文段。试论证为了使该链路总是忙于发送数据，我们将要选择缓存长度，使得其至少为发送方和接收方之间链路速率C与双向传播时延之积。

    发送方窗口最小时，即减小到W/2时，链路最有可能不能维持一直发送数据的状态。此时分别考虑发送方发送分组和等待确实两种情况。

    当发送方正在发送分组且缓存为空时，要想链路一直发送数据，必须满足发送速率大于（等于）链路速率，即 \( \frac{W/2}{RTT} ⩾ C \)，由此有 \( \frac{W}{2} ⩾ C\cdot RTT \)。

    假设缓存的大小是S，链路要发送完全部缓存的分组需要的时间是S/C。发送方发送了W/2个分组后开始等待ACK，经过W/2C时间后，ACK全部到达发送方，然后发送方开始扩大窗口并发送新的分组。在发送方等待ACK的时间里链路需要一直忙于发送数据，因此清空完缓存的时间必须大于（等于）等待ACK的时间，即 \( \frac{S}{C}⩾\frac{W/2}{C} \)，由此有 \( S⩾\frac{W}{2} \)。

    综合上述两种情况得到 \( S⩾C\cdot RTT \)。

*** P48 高带宽链路的窗口扩大速度

    重复习题46，但用一条1OGbps链路代替1OMbps链路。注意到在对c部分的答案中，应当认识到在从丢包恢复后，拥塞窗口长度到达最大窗口长度将需要很长时间。给出解决该问题的基本思路。

    a. \( W = 125×10^3 = 125000 \)
    b. \( 0.75W= 93750 \)
       \( 0.75×10Gbps = 7.5Gbps \)
    c. \( 125000÷2×150\text{ms}= 156.25min \)
       可以增加窗口扩大的速度，比如慢启动阶段的指数增加。

*** P49 拥塞窗口增加的时间与平均吞吐量

    令T（用RTT度量）表示一条TCP连接将拥塞窗口从W/2增加到W所需的时间间隔，其中W是最大的拥塞窗口长度。论证T是TCP平均吞吐量的函数。

    拥塞窗口从W/2增加到W所需的时间间隔等于两次丢包出现的时间间隔。而两次丢包的出现间隔可以由丢包率L得到，即在第一次丢包出现后再发送1/L个分组出现第二次丢包，发送这些分组所需要的时间就等于窗口增加的时间：

    \[ T=\frac{1/L\cdot MSS}{B}. \]

    又由于TCP平均速率为

    \[ B=\frac{1.22\cdot MSS}{RTT\cdot \sqrt{L}}, \]
    由此可得

    \[ L=(\frac{1.22\cdot MSS}{B\cdot RTT})^2. \]

    综合可得

    \[ T=\frac{RTT^2}{1.22^2\cdot MSS}\cdot B. \]

    <<<<<<< HEAD
*** P50 具有较小RTT的连接享有更高的吞吐量

    考虑一种简化的TCP的AIMD算法，其中拥塞窗口长度用报文段的数量来度量，而不是用字节度量。在加性增中，每个RTT拥塞窗口长度增加一个报文段。在乘性减中，拥塞窗口长度减小一半（如果结果不是一个整数，向下取整到最近的整数）。假设两条TCP连接C1和C2，它们共享一条速率为每秒30个报文段的单一拥塞链路。假设C1和C2均处于拥塞避免阶段。连接C1的RTT是50ms，连接C2的RTT是100ms。假设当链路中的数据速率超过了链路的速率时，所有TCP连接经受数据报文段丢失。
    a. 如果在时刻t_{0}，C1和C2具有10个报文段的拥塞窗口，在1000ms后它们的拥塞窗口为多长？
    b. 经长时间运行，这两条连接将取得共享该拥塞链路的相同的带宽吗？


    a. \-

       #+NAME: ch3-p50
       | 时刻 ms | C1 pkt | C1 pkt/s | C2 pkt | C2 pkt/s |
       |---------+--------+----------+--------+----------|
       |       0 |     10 |      200 |     10 |      100 |
       |      50 |      5 |      100 |        |      100 |
       |     100 |      2 |       40 |      5 |       50 |
       |     150 |      1 |       20 |        |       50 |
       |     200 |      1 |       20 |      2 |       20 |
       |     250 |      1 |       20 |        |       20 |
       |     300 |      1 |       20 |      1 |       10 |
       |     350 |      2 |       40 |        |       10 |
       |     400 |      1 |       20 |      1 |       10 |
       |     450 |      2 |       40 |        |       10 |
       |     500 |      1 |       20 |      1 |       10 |
       |     550 |      2 |       40 |        |       10 |
       |     600 |      1 |       20 |      1 |       10 |
       |     650 |      2 |       40 |        |       10 |
       |     700 |      1 |       20 |      1 |       10 |
       |     750 |      2 |       40 |        |       10 |
       |     800 |      1 |       20 |      1 |       10 |
       |     850 |      2 |       40 |        |       10 |
       |     900 |      1 |       20 |      1 |       10 |
       |     950 |      2 |       40 |        |       10 |
       |    1000 |      1 |       20 |      1 |       10 |

       在时刻50：对于C1，由于在上一个50ms内的C1、C2的总平均速率是300pkt/s，超过链路容量，发生丢包，所以C1窗口减半。

       在时刻100：对于C2，在上一个100ms内的C1、C2的总平均速率是250pkt/s（(200+100)/2+(100+100)/2），所以C2窗口减半。C1窗口减半，理由同上一条。

    b. 具有较小RTT的连接能够在链路空闲时更快地打开其拥塞窗口，因而将比那些具有较大RTT的连接享有更高的吞吐量。

       #+begin_src gnuplot :var data=ch3-p50 :file img/ch3-p50.svg
         reset
         set xlabel "时间(ms)"
         set ylabel "连接速率(pkt/s)"
         plot data using 1:3 title "C1" with lp,\
              "" using 1:5 title "C2" with lp
       #+end_src

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:600px;
       #+RESULTS:
       [[file:img/ch3-p50.svg]]

*** P51 TCP拥塞控制的公平性

    考虑在前面习题中描述的网络。现在假设两条TCP连接C1和C2，它们具有相同的100ms RTT。假设在时刻t_{0}，C1的拥塞窗口长度为15个报文段，而C2的拥塞窗口长度是10个报文段。
    a. 在2200ms后，它们的拥塞窗口长度为多长？
    b. 经长时间运行，这两条连接将取得共享该拥塞链路的相同的带宽吗？
    c. 如果这两条连接在相同时间达到它们的最大窗口长度，并在相同时间达到它们的最小窗口长度，我们说这两条连接是同步的。经长时间运行，这两条连接将最终变得同步吗？如果是，它们的最大窗口长度是多少？
    d. 这种同步将有助于改善共享链路的利用率吗？为什么？给出打破这种同步的某种思路。


    a. \-

       #+NAME: ch3-p51a
       | 时刻 ms | C1 pkt | C1 pkt/s | C2 pkt | C2 pkt/s |
       |---------+--------+----------+--------+----------|
       |       0 |     15 |      150 |     10 |      100 |
       |     100 |      7 |       70 |      5 |       50 |
       |     200 |      3 |       30 |      2 |       20 |
       |     300 |      1 |       10 |      1 |       10 |
       |     400 |      2 |       20 |      2 |       20 |
       |     500 |      1 |       10 |      1 |       10 |
       |     600 |      2 |       20 |      2 |       20 |
       |     700 |      1 |       10 |      1 |       10 |
       |     800 |      2 |       20 |      2 |       20 |
       |     900 |      1 |       10 |      1 |       10 |
       |    1000 |      2 |       20 |      2 |       20 |
       |    1100 |      1 |       10 |      1 |       10 |
       |    1200 |      2 |       20 |      2 |       20 |
       |    1300 |      1 |       10 |      1 |       10 |
       |    1400 |      2 |       20 |      2 |       20 |
       |    1500 |      1 |       10 |      1 |       10 |
       |    1600 |      2 |       20 |      2 |       20 |
       |    1700 |      1 |       10 |      1 |       10 |
       |    1800 |      2 |       20 |      2 |       20 |
       |    1900 |      1 |       10 |      1 |       10 |
       |    2000 |      2 |       20 |      2 |       20 |
       |    2100 |      1 |       10 |      1 |       10 |
       |    2200 |      2 |       20 |      2 |       20 |

       #+begin_src gnuplot :var data=ch3-p51a :file img/ch3-p51a.svg
         reset
         set xlabel "时间(ms)"
         set ylabel "连接速率(pkt/s)"
         plot data using 1:3 title "C1" with lp,\
              "" using 1:5 title "C2" with lp
       #+end_src

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:600px;
       #+RESULTS:
       [[file:img/ch3-p51a.svg]]

    b. 是，这是TCP的加性增乘性减算法和两条连接具有相同RTT共同作用的结果。

    c. 是，最大窗口长度是2。

    d. 这种同步不利于改善共享链路的利用率。这种同步使得两条连接表现得像一条在窗口的最小值和最大值之间振荡的连接。可以在链路中加入一个有限缓存。在缓存溢出之前随机的丢弃分组，这样可以使得不同的连接错开减小窗口的时间。

*** P52 修改为乘性增的吞吐量

    考虑修改TCP的拥塞控制算法。不使用加性增，使用乘性增。无论何时某TCP收到一个合法的ACK，就将其窗口长度增加一个小正数a（O<a<1）（A TCP sender increases its window size by a small positive constant a(0<a<1) whenever it receives a valid ACK.）。求出丢包率L和最大拥塞窗口W之间的函数关系。论证：对于这种修正的TCP，无论TCP的平均吞吐量如何，一条TCP连接将其拥塞窗口长度从W/2增加到W，总是需要相同的时间。

    在拥塞窗口从W/2增长到W的过程中总共发送的分组数量是：

    \[ S = W/2+(1+a)W/2+(1+a)^2W/2+\cdots + (1+a)^kW/2, \]

    其中 \(k=\log_{a+1}2\)，带入可得 \(S=\frac{2a+1}{2a}W.\)

    丢包率是：

    \begin{align*}
      L = \frac1S = \frac{2a}{(2a+1)W}.
    \end{align*}

    从W/2增长到W所需要的时间是：

    \[ k⋅RTT=(\log_{1+a}2)⋅RTT, \]

    这个时间与链路的吞吐量无关。

    平均吞吐量是（发送W还需要1个RTT，因此是增长时间加1）：

    \[ B = \frac{S⋅MSS}{(k+1)⋅RTT} = \frac{MSS}{L⋅(k+1)⋅RTT}. \]

*** P53 经高带宽路径的TCP

    在3.7节对TCP未来的讨论中，我们注意到为了取得10Gbps的吞吐量，TCP仅能容忍2×10^{-10}的报文段丢失率（或等价为每5 000 000 000个报文段有一个丢包事件）。给出针对3.7节中给定的RTT和MSS值的对2×10^{-10}值的推导。如果TCP需要支持一条100Gbps的连接，所能容忍的丢包率是多少？

    丢包率和吞吐量之间的关系：

    \[ L = (\frac{1.22⋅MSS}{RTT⋅B})^2. \]

    对于10Gbps的吞吐量，\(L=(\frac{1.22⋅1500B}{100ms⋅10Gbps})^2≈2⋅10^{-10}.\)

    对于100Gbps，\(L≈2⋅10^{-12}.\)

*** P54 拥塞控制的实效性

    在3.7节中对TCP拥塞控制的讨论中，我们隐含地假定TCP发送方总是有数据要发送。现在考虑下列情况，某TCP发送方发送大量数据，然后在t_{1}时刻变得空闲（因为它没有更多的数据要发送）。TCP在相对长的时间内保持空闲，然后在t_{2}时刻要发送更多的数据。当TCP在t_{2}开始发送数据时，让它使用在t_{1}时刻的cwnd和ssthresh值，将有什么样的优点和缺点？你建议使用什么样的方法？为什么？

    #+begin_quote
    在t_{2}使用早期的cwnd和ssthresh值的好处是，TCP不必通过慢启动和拥塞避免来提升到t_{1}获得的吞吐量值。使用这些值的缺点是，它们可能不再准确了。特别是，如果路径在t_{1}和t_{2}之间变得更加拥挤，发送方将向已经拥挤的路径发送一个大窗口的段。
    #+end_quote

*** P55 SYN cookie与地址欺骗

    在这个习题中我们研究是否UDP或TCP提供了某种程度的端点鉴别。
    a. 考虑一台服务器接收到在一个UDP分组中的请求并对该请求进行响应（例如，如由DNS服务器所做的那样）。如果一个具有IP地址X的客户用地址Y进行哄骗的话，服务器将向何处发送它的响应？
    b. 假定一台服务器接收到具有IP源地址Y的一个SYN，在用SYNACK响应之后，接收一个具有IP源地址Y和正确确认号的ACK。假设该服务器选择了一个随机初始序号并且没有“中间人”，该服务器能够确定该客户的确位于Y吗？（并且不在某个其他哄骗为Y的地址X。）


    a. 服务器将向Y发送它的响应。
    b. 服务器可以确定该客户端的确位于Y。如果它是在其他地址用地址Y进行哄骗，SYNACK就会被发送到地址Y，而该主机中的TCP不会发送TCP ACK回来。即使攻击者能在适当的时间发送一个TCP ACK，它也无法知道正确的随机初始序号。

*** P56 TCP慢启动引入的时延

    在这个习题中，我们考虑由TCP慢启动阶段引入的时延。考虑一个客户和一个Web服务器直接连接到速率R的一条链路。假定该客户要取回一个对象，其长度正好等于15S，其中S是最大段长度（MSS）。客户和服务器之间的往返时间表示为RTT（假设为常数）。忽略协议首部，确定在下列情况下取回该对象的时间（包括TCP连接创建）：
    a. 4S/R>S/R+RTT>2S/R
    b. S/R+RTT>4S/R
    c. S/R>RTT


    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:450px;
    [[./img/ch3-p56.png]]

** 编程作业 实现一个可靠运输协议

   在这个编程作业实验中，你将要编写发送和接收运输层的代码，以实现一个简单的可靠数据运输协议。这个实验有两个版本，即比特交替协议版本和GBN版本。这个实验应当是有趣的，因为你的实现将与实际情况下所要求的差异很小。

   因为可能没有你能够修改其操作系统的独立机器，你的代码将不得不在模拟的硬件/软件环境中执行。然而，为你提供例程的编程接口（即从上层和下层调用你的实体的代码），非常类似于在实际UNIX环境中做那些事情的接口。（实际上，在本编程作业中描述的软件接口比起许多教科书中描述的无限循环的发送方和接收方要真实得多。）停止和启动定时器也是模拟的，定时器中断将激活你的定时器处理例程。

   [[https://media.pearsoncmg.com/aw/aw_kurose_network_2/labs/lab3.html][Programming Assignment 3: Implementing a Reliable Transport Protocol]]

*** 比特交替协议

    比特交替协议版本直接实现rdt3.0即可。

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:700px;
    [[./img/fig3-14.png]]

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:700px;
    [[./img/fig3-15.png]]

    #+CAPTION: abp.c
    #+INCLUDE: "./code/ch3-rdt/abp.c" src c

    #+CAPTION: test_abp.txt部分结果
    #+INCLUDE: "./code/ch3-rdt/test_abp.txt" src c :lines "-40"

*** GBN

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:700px;
    [[./img/fig3-20.png]]

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:700px;
    [[./img/fig3-21.png]]

    #+CAPTION: gbn.c
    #+INCLUDE: "./code/ch3-rdt/gbn.c" src c

    #+CAPTION: test_gbn.txt部分结果
    #+INCLUDE: "./code/ch3-rdt/test_gbn.txt" src c :lines "-40"

** Wireshark实验：探究TCP

   在这个实验中，你将使用Web浏览器访问来自某Web服务器的一个文件。如同在前面的Wireshark实验中一样，你将使用Wireshark来俘获到达你计算机的分组。与前面实验不同的是，你也能够从该Web服务器下载一个Wireshark可读的分组踪迹，记载你从服务器下载文件的过程。在这个服务器踪迹文件里，你将发现自己访问该Web服务器所产生的分组。你将分析客户端和服务器端踪迹文件，以探究TCP的方方面面。特别是你将评估在你的计算机与该Web服务器之间TCP连接的性能。你将跟踪TCP窗口行为、推断分组丢失、重传、流控和拥塞控制行为并估计往返时间。

   [[file:code/ch3-ws-tcp/wireshark-tcp-v7.0.pdf][Wireshark Lab: TCP v7.0]]

   1. \-
      #+begin_src c
        No.     Time               Source                Destination           Protocol Length Info
        199 21:44:25.867722    192.168.1.102         128.119.245.12        HTTP     104    POST /ethereal-labs/lab3-1-reply.htm HTTP/1.1  (text/plain)

        Frame 199: 104 bytes on wire (832 bits), 104 bytes captured (832 bits)
          Ethernet II, Src: Actionte_8a:70:1a (00:20:e0:8a:70:1a), Dst: LinksysG_da:af:73 (00:06:25:da:af:73)
          Internet Protocol Version 4, Src: 192.168.1.102, Dst: 128.119.245.12
          Transmission Control Protocol, Src Port: 1161, Dst Port: 80, Seq: 164041, Ack: 1, Len: 50
          [122 Reassembled TCP Segments (164090 bytes): #4(565), #5(1460), #7(1460), #8(1460), #10(1460), #11(1460), #13(1147), #18(1460), #19(1460), #20(1460), #21(1460), #22(1460), #23(892), #30(1460), #31(1460), #32(1460), #33(1460), #34(1460), #3]
          Hypertext Transfer Protocol
          MIME Multipart Media Encapsulation, Type: multipart/form-data, Boundary: "---------------------------265001916915724"
      #+end_src

      + What is the IP address and TCP port number used by the client computer (source) that is transferring the file to gaia.cs.umass.edu?

        192.168.1.102, 1161.

   2. \-
      + What is the IP address of gaia.cs.umass.edu?

        128.119.245.12.

      + On what port number is it sending and receiving TCP segments for this connection?
        80

   3. \-

      #+begin_src c
        No.     Time               Source                Destination           Protocol Length Info
        153 14:14:42.972534    192.168.8.100         128.119.245.12        HTTP     402    POST /wireshark-labs/lab3-1-reply.htm HTTP/1.1  (text/plain)

        Frame 153: 402 bytes on wire (3216 bits), 402 bytes captured (3216 bits) on interface en4, id 0
          Ethernet II, Src: HuaweiTe_1f:00:00 (00:1e:10:1f:00:00), Dst: HuaweiDe_68:6c:29 (94:e9:ee:68:6c:29)
          Internet Protocol Version 4, Src: 192.168.8.100, Dst: 128.119.245.12
          Transmission Control Protocol, Src Port: 49753, Dst Port: 80, Seq: 152592, Ack: 1, Len: 336
          [114 Reassembled TCP Segments (152927 bytes): #4(606), #5(137), #6(1368), #7(1368), #8(1368), #9(1368), #10(1368), #11(1368), #12(1368), #13(1368), #14(1368), #18(1368), #19(1368), #20(1368), #21(1368), #22(1368), #23(1368), #24(1368), #25(]
           Hypertext Transfer Protocol
           MIME Multipart Media Encapsulation, Type: multipart/form-data, Boundary: "----WebKitFormBoundaryhIxTN5lI8AmIgWDB"
      #+end_src

      + What is the IP address and TCP port number used by your client computer (source) to transfer the file to gaia.cs.umass.edu?
        192.168.8.100, 49753.

   4. \-
      #+begin_src c
        No.     Time               Source                Destination           Protocol Length Info
        1 14:14:41.756084    192.168.8.100         128.119.245.12        TCP      78     49753 → 80 [SYN] Seq=0 Win=65535 Len=0 MSS=1460 WS=64 TSval=2472490822 TSecr=0 SACK_PERM=1

          Frame 1: 78 bytes on wire (624 bits), 78 bytes captured (624 bits) on interface en4, id 0
          Ethernet II, Src: HuaweiTe_1f:00:00 (00:1e:10:1f:00:00), Dst: HuaweiDe_68:6c:29 (94:e9:ee:68:6c:29)
          Internet Protocol Version 4, Src: 192.168.8.100, Dst: 128.119.245.12
          Transmission Control Protocol, Src Port: 49753, Dst Port: 80, Seq: 0, Len: 0
          Source Port: 49753
          Destination Port: 80
          [Stream index: 0]
          [TCP Segment Len: 0]
          Sequence Number: 0    (relative sequence number)
          Sequence Number (raw): 736682434
          [Next Sequence Number: 1    (relative sequence number)]
          Acknowledgment Number: 0
          Acknowledgment number (raw): 0
          1011 .... = Header Length: 44 bytes (11)
          Flags: 0x002 (SYN)
          Window: 65535
          [Calculated window size: 65535]
          Checksum: 0x5d71 [unverified]
          [Checksum Status: Unverified]
          Urgent Pointer: 0
          Options: (24 bytes), Maximum segment size, No-Operation (NOP), Window scale, No-Operation (NOP), No-Operation (NOP), Timestamps, SACK permitted, End of Option List (EOL)
          [Timestamps]
      #+end_src

      + What is the sequence number of the TCP SYN segment that is used to initiate the TCP connection between the client computer and gaia.cs.umass.edu?

        1.

      + What is it in the segment that identifies the segment as a SYN segment?

        Flags: 0x002 (SYN).

   5. \-

      #+begin_src c
        No.     Time               Source                Destination           Protocol Length Info
        2 14:14:42.063101    128.119.245.12        192.168.8.100         TCP      74     80 → 49753 [SYN, ACK] Seq=0 Ack=1 Win=28960 Len=0 MSS=1380 SACK_PERM=1 TSval=2475192272 TSecr=2472490822 WS=128

          Frame 2: 74 bytes on wire (592 bits), 74 bytes captured (592 bits) on interface en4, id 0
          Ethernet II, Src: HuaweiDe_68:6c:29 (94:e9:ee:68:6c:29), Dst: HuaweiTe_1f:00:00 (00:1e:10:1f:00:00)
          Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.8.100
          Transmission Control Protocol, Src Port: 80, Dst Port: 49753, Seq: 0, Ack: 1, Len: 0
          Source Port: 80
          Destination Port: 49753
          [Stream index: 0]
          [TCP Segment Len: 0]
          Sequence Number: 0    (relative sequence number)
          Sequence Number (raw): 447646307
          [Next Sequence Number: 1    (relative sequence number)]
          Acknowledgment Number: 1    (relative ack number)
          Acknowledgment number (raw): 736682435
          1010 .... = Header Length: 40 bytes (10)
          Flags: 0x012 (SYN, ACK)
          Window: 28960
          [Calculated window size: 28960]
          Checksum: 0x5529 [unverified]
          [Checksum Status: Unverified]
          Urgent Pointer: 0
          Options: (20 bytes), Maximum segment size, SACK permitted, Timestamps, No-Operation (NOP), Window scale
          [SEQ/ACK analysis]
          [Timestamps]
      #+end_src

      + What is the sequence number of the SYNACK segment sent by gaia.cs.umass.edu to the client computer in reply to the SYN?

        1.

      + What is the value of the Acknowledgement field in the SYNACK segment?

        1.

      + How did gaia.cs.umass.edu determine that value?

        确认号是主机期望收到的下一字节的序号。

      + What is it in the segment that identifies the segment as a SYNACK segment?

        Flags: 0x012 (SYN, ACK).

   6. 使用示例提供的trace文件。

      #+begin_src c
        No.     Time           Source                Destination           Protocol Length Info
        4 0.026477       192.168.1.102         128.119.245.12        TCP      619    1161 → 80 [PSH, ACK] Seq=1 Ack=1 Win=17520 Len=565 [TCP segment of a reassembled PDU]

          0000  00 06 25 da af 73 00 20 e0 8a 70 1a 08 00 45 00   ..%..s. ..p...E.
          0010  02 5d 1e 21 40 00 80 06 a2 e7 c0 a8 01 66 80 77   .].!@........f.w
          0020  f5 0c 04 89 00 50 0d d6 01 f5 34 a2 74 1a 50 18   .....P....4.t.P.
          0030  44 70 1f bd 00 00 50 4f 53 54 20 2f 65 74 68 65   Dp....POST /ethe
          0040  72 65 61 6c 2d 6c 61 62 73 2f 6c 61 62 33 2d 31   real-labs/lab3-1
          0050  2d 72 65 70 6c 79 2e 68 74 6d 20 48 54 54 50 2f   -reply.htm HTTP/
          0060  31 2e 31 0d 0a 48 6f 73 74 3a 20 67 61 69 61 2e   1.1..Host: gaia.
          0070  63 73 2e 75 6d 61 73 73 2e 65 64 75 0d 0a 55 73   cs.umass.edu..Us
          0080  65 72 2d 41 67 65 6e 74 3a 20 4d 6f 7a 69 6c 6c   er-Agent: Mozill
          0090  61 2f 35 2e 30 20 28 57 69 6e 64 6f 77 73 3b 20   a/5.0 (Windows;
                                                                         00a0  55 3b 20 57 69 6e 64 6f 77 73 20 4e 54 20 35 2e   U; Windows NT 5.
                                                                         00b0  31 3b 20 65 6e 2d 55 53 3b 20 72 76 3a 31 2e 30   1; en-US; rv:1.0
                                                                         00c0  2e 32 29 20 47 65 63 6b 6f 2f 32 30 30 33 30 32   .2) Gecko/200302
          00d0  30 38 20 4e 65 74 73 63 61 70 65 2f 37 2e 30 32   08 Netscape/7.02
          00e0  0d 0a 41 63 63 65 70 74 3a 20 74 65 78 74 2f 78   ..Accept: text/x
          00f0  6d 6c 2c 61 70 70 6c 69 63 61 74 69 6f 6e 2f 78   ml,application/x
                                                                      0100  6d 6c 2c 61 70 70 6c 69 63 61 74 69 6f 6e 2f 78   ml,application/x
                                                                      0110  68 74 6d 6c 2b 78 6d 6c 2c 74 65 78 74 2f 68 74   html+xml,text/ht
                                                                      0120  6d 6c 3b 71 3d 30 2e 39 2c 74 65 78 74 2f 70 6c   ml;q=0.9,text/pl
                                                                                                                                   0130  61 69 6e 3b 71 3d 30 2e 38 2c 76 69 64 65 6f 2f   ain;q=0.8,video/
                                                                                                                                                                                                 0140  78 2d 6d 6e 67 2c 69 6d 61 67 65 2f 70 6e 67 2c   x-mng,image/png,
                                                                                                                                                                                                 0150  69 6d 61 67 65 2f 6a 70 65 67 2c 69 6d 61 67 65   image/jpeg,image
                                                                                                                                                                                                 0160  2f 67 69 66 3b 71 3d 30 2e 32 2c 74 65 78 74 2f   /gif;q=0.2,text/
                                                                                                                                                                                                                                                                0170  63 73 73 2c 2a 2f 2a 3b 71 3d 30 2e 31 0d 0a 41   css,*/*;q=0.1..A
                                                                                                                                                                                                                                                                                                                               0180  63 63 65 70 74 2d 4c 61 6e 67 75 61 67 65 3a 20   ccept-Language:
                                                                                                                                                                                                                                                                                                                               0190  65 6e 2d 75 73 2c 20 65 6e 3b 71 3d 30 2e 35 30   en-us, en;q=0.50
                                                                                                                                                                                                                                                                                                                               01a0  0d 0a 41 63 63 65 70 74 2d 45 6e 63 6f 64 69 6e   ..Accept-Encodin
                                                                                                                                                                                                                                                                                                                               01b0  67 3a 20 67 7a 69 70 2c 20 64 65 66 6c 61 74 65   g: gzip, deflate
                                                                                                                                                                                                                                                                                                                               01c0  2c 20 63 6f 6d 70 72 65 73 73 3b 71 3d 30 2e 39   , compress;q=0.9
                                                                                                                                                                                                                                                                                                                               01d0  0d 0a 41 63 63 65 70 74 2d 43 68 61 72 73 65 74   ..Accept-Charset
                                                                                                                                                                                                                                                                                                                               01e0  3a 20 49 53 4f 2d 38 38 35 39 2d 31 2c 20 75 74   : ISO-8859-1, ut
                                                                                                                                                                                                                                                                                                                               01f0  66 2d 38 3b 71 3d 30 2e 36 36 2c 20 2a 3b 71 3d   f-8;q=0.66, *;q=
                                                                                                                                                                                                                                                                                                                               0200  30 2e 36 36 0d 0a 4b 65 65 70 2d 41 6c 69 76 65   0.66..Keep-Alive
                                                                                                                                                                                                                                                                                                                               0210  3a 20 33 30 30 0d 0a 43 6f 6e 6e 65 63 74 69 6f   : 300..Connectio
                                                                                                                                                                                                                                                                                                                               0220  6e 3a 20 6b 65 65 70 2d 61 6c 69 76 65 0d 0a 52   n: keep-alive..R
                                                                                                                                                                                                                                                                                                                               0230  65 66 65 72 65 72 3a 20 68 74 74 70 3a 2f 2f 67   eferer: http://g
                                                                                                                                                                                                                                                                                                                               0240  61 69 61 2e 63 73 2e 75 6d 61 73 73 2e 65 64 75   aia.cs.umass.edu
                                                                                                                                                                                                                                                                                                                               0250  2f 65 74 68 65 72 65 61 6c 2d 6c 61 62 73 2f 6c   /ethereal-labs/l
                                                                                                                                                                                                                                                                                                                               0260  61 62 33 2d 31 2e 68 74 6d 0d 0a                  ab3-1.htm..
      #+end_src

      What is the sequence number of the TCP segment containing the HTTP POST command?

      1.

   7. \-

      #+begin_src c
        No.     Time           Source                Destination           Protocol Length Info
        4 0.026477       192.168.1.102         128.119.245.12        TCP      619    1161 → 80 [PSH, ACK] Seq=1 Ack=1 Win=17520 Len=565 [TCP segment of a reassembled PDU]
          5 0.041737       192.168.1.102         128.119.245.12        TCP      1514   1161 → 80 [PSH, ACK] Seq=566 Ack=1 Win=17520 Len=1460 [TCP segment of a reassembled PDU]
          7 0.054026       192.168.1.102         128.119.245.12        TCP      1514   1161 → 80 [ACK] Seq=2026 Ack=1 Win=17520 Len=1460 [TCP segment of a reassembled PDU]
          8 0.054690       192.168.1.102         128.119.245.12        TCP      1514   1161 → 80 [ACK] Seq=3486 Ack=1 Win=17520 Len=1460 [TCP segment of a reassembled PDU]
          10 0.077405       192.168.1.102         128.119.245.12        TCP      1514   1161 → 80 [ACK] Seq=4946 Ack=1 Win=17520 Len=1460 [TCP segment of a reassembled PDU]
          11 0.078157       192.168.1.102         128.119.245.12        TCP      1514   1161 → 80 [ACK] Seq=6406 Ack=1 Win=17520 Len=1460 [TCP segment of a reassembled PDU]
      #+end_src

      #+begin_src c
        No.     Time           Source                Destination           Protocol Length Info
        6 0.053937       128.119.245.12        192.168.1.102         TCP      60     80 → 1161 [ACK] Seq=1 Ack=566 Win=6780 Len=0
          9 0.077294       128.119.245.12        192.168.1.102         TCP      60     80 → 1161 [ACK] Seq=1 Ack=2026 Win=8760 Len=0
          12 0.124085       128.119.245.12        192.168.1.102         TCP      60     80 → 1161 [ACK] Seq=1 Ack=3486 Win=11680 Len=0
          14 0.169118       128.119.245.12        192.168.1.102         TCP      60     80 → 1161 [ACK] Seq=1 Ack=4946 Win=14600 Len=0
          15 0.217299       128.119.245.12        192.168.1.102         TCP      60     80 → 1161 [ACK] Seq=1 Ack=6406 Win=17520 Len=0
          16 0.267802       128.119.245.12        192.168.1.102         TCP      60     80 → 1161 [ACK] Seq=1 Ack=7866 Win=20440 Len=0
      #+end_src

      + What are the sequence numbers of the first six segments in the TCP connection (including the segment containing the HTTP POST)?
      + At what time was each segment sent?
      + When was the ACK for each segment received?
      + what is the RTT value for each of the six segments?
      + What is the EstimatedRTT value after the receipt of each ACK?

        |  seq | send time | ack time |      RTT | EstimatedRTT |
        |------+-----------+----------+----------+--------------|
        |    1 |  0.026477 | 0.053937 |  0.02746 |      0.02746 |
        |  566 |  0.041737 | 0.077294 | 0.035557 |  0.028472125 |
        | 2026 |  0.054026 | 0.124085 | 0.070059 |  0.033670484 |
        | 3486 |  0.054690 | 0.169118 | 0.114428 |  0.043765174 |
        | 4946 |  0.077405 | 0.217299 | 0.139894 |  0.055781277 |
        | 6406 |  0.078157 | 0.267802 | 0.189645 |  0.072514242 |
        #+TBLFM: $4=$3-$2::$5=if(@# > 2, 0.875*@-1 + 0.125*$-1, $-1)

   8. What is the length of each of the first six TCP segments?

      565, 1460, 1460, 1460, 1460, 1460.

   9. \-

      #+begin_src c
        No.     Time           Source                Destination           Protocol Length Info
        1 0.000000       192.168.1.102         128.119.245.12        TCP      62     1161 → 80 [SYN] Seq=0 Win=16384 Len=0 MSS=1460 SACK_PERM=1
          2 0.023172       128.119.245.12        192.168.1.102         TCP      62     80 → 1161 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460 SACK_PERM=1
          3 0.023265       192.168.1.102         128.119.245.12        TCP      54     1161 → 80 [ACK] Seq=1 Ack=1 Win=17520 Len=0
          4 0.026477       192.168.1.102         128.119.245.12        TCP      619    1161 → 80 [PSH, ACK] Seq=1 Ack=1 Win=17520 Len=565 [TCP segment of a reassembled PDU]
          5 0.041737       192.168.1.102         128.119.245.12        TCP      1514   1161 → 80 [PSH, ACK] Seq=566 Ack=1 Win=17520 Len=1460 [TCP segment of a reassembled PDU]
          6 0.053937       128.119.245.12        192.168.1.102         TCP      60     80 → 1161 [ACK] Seq=1 Ack=566 Win=6780 Len=0
          7 0.054026       192.168.1.102         128.119.245.12        TCP      1514   1161 → 80 [ACK] Seq=2026 Ack=1 Win=17520 Len=1460 [TCP segment of a reassembled PDU]
          8 0.054690       192.168.1.102         128.119.245.12        TCP      1514   1161 → 80 [ACK] Seq=3486 Ack=1 Win=17520 Len=1460 [TCP segment of a reassembled PDU]
      #+end_src

      + What is the minimum amount of available buffer space advertised at the received for the entire trace?

        1.

      + Does the lack of receiver buffer space ever throttle the sender?

        No.

        #+PLOT: title:"Citas" ind:1 deps:(2 3)
        | No. | 发送方累积未确认分组 | 接收方窗口 |
        |-----+----------------------+------------|
        |   1 |                    0 |       5840 |
        |   2 |                  565 |       5840 |
        |   3 |                 2025 |       5840 |
        |   4 |                 1460 |       6780 |
        |   5 |                 2920 |       6780 |
        |   6 |                 4380 |       6780 |
        |   7 |                 2920 |       8760 |

        #+ATTR_ORG: :width 200
        #+ATTR_HTML: :style width:100%; max-width:600px;
        [[file:code/ch3-ws-tcp/9-buf.svg]]

   10. Are there any retransmitted segments in the trace file? What did you check for (in the trace) in order to answer this question?

       没有重传的分组。通过观察发送方的分组序号：如果有重传的分组，那么序号序列里会出现小于或等于前一序号的分组。

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:600px;
       [[file:code/ch3-ws-tcp/10-seqnum.svg]]

   11. \-

       + How much data does the receiver typically acknowledge in an ACK?

         1460, 2352, 2920.

         #+ATTR_ORG: :width 200
         #+ATTR_HTML: :style width:100%; max-width:600px;
         [[file:code/ch3-ws-tcp/11-ackdata.svg]]

       + Can you identify cases where the receiver is ACKing every other received segment (见160页表3.2).

         观察接收方的确认号可以发现没有失序的报文。因此立即发送确认信号的情况只剩一种：具有所期望序号的按序报文段到达，另一个按序报文段等待ACK传输。

   12. \-

       #+begin_src c
         No.     Time           Source                Destination           Protocol Length Info
             199 5.297341       192.168.1.102         128.119.245.12        HTTP     104    POST /ethereal-labs/lab3-1-reply.htm HTTP/1.1  (text/plain)

         Frame 199: 104 bytes on wire (832 bits), 104 bytes captured (832 bits)
         Ethernet II, Src: Actionte_8a:70:1a (00:20:e0:8a:70:1a), Dst: LinksysG_da:af:73 (00:06:25:da:af:73)
         Internet Protocol Version 4, Src: 192.168.1.102, Dst: 128.119.245.12
         Transmission Control Protocol, Src Port: 1161, Dst Port: 80, Seq: 164041, Ack: 1, Len: 50
         [122 Reassembled TCP Segments (164090 bytes): #4(565), #5(1460), #7(1460), #8(1460), #10(1460), #11(1460), #13(1147), #18(1460), #19(1460), #20(1460), #21(1460), #22(1460), #23(892), #30(1460), #31(1460), #32(1460), #33(1460), #34(1460), #3]
         Hypertext Transfer Protocol
         MIME Multipart Media Encapsulation, Type: multipart/form-data, Boundary: "---------------------------265001916915724"
       #+end_src

       What is the throughput (bytes transferred per unit time) for the TCP connection? Explain how you calculated this value.

       164090byte / 5.297341s ≈ 247Kbps.

   13. Can you identify where TCP’s slowstart phase begins and ends, and where congestion avoidance takes over? Comment on ways in which the measured data differs from the idealized behavior of TCP that we’ve studied in the text.

       0~0.25s之间是慢启动阶段。0.25~0.5s进入拥塞避免阶段。

       拥塞避免阶段并没有像书中描述的那样在每个RTT将拥塞窗口扩大一个MSS，而是一直保持发送6个分组。

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:600px;
       [[file:code/ch3-ws-tcp/13-ts.png]]

   14. Answer each of two questions above for the trace that you have gathered when you transferred a file from your computer to gaia.cs.umass.edu

       | 单位时间 | 发送的分组数量 |
       |----------+----------------|
       |        1 |             10 |
       |        2 |             22 |
       |        3 |             47 |
       |        4 |             65 |

       可以看出一直到文件传输结束都一直处于慢启动阶段。

       #+ATTR_ORG: :width 200
       #+ATTR_HTML: :style width:100%; max-width:600px;
       [[file:code/ch3-ws-tcp/14-ts.png]]

** Wireshark实验：探究UDP

   在这个简短实验中，你将进行分组俘获并分析那些使用UDP的你喜爱的应用程序（例如，DNS或如Skype这样的多媒体应用）。如我们在3.3节中所学的那样，UDP是一种简单的、不提供不必要服务的运输协议。在这个实验中，你将研究在UDP报文段中的各首部字段以及检验和计算。

   [[file:code/ch3-udp/wireshark-udp-v7.0.pdf][Wireshark Lab: UDP v7.0]]

   1. Select one UDP packet from your trace. From this packet, determine how many fields there are in the UDP header. (You shouldn’t look in the textbook! Answer these questions directly from what you observe in the packet trace.) Name these fields.

      #+INCLUDE: "code/ch3-ws-udp/1-export.txt" src c

      | 首部字段         |
      |------------------|
      | Source Port      |
      | Destination Port |
      | Length           |
      | Checksum         |

   2. By consulting the displayed information in Wireshark’s packet content field for this packet, determine the length (in bytes) of each of the UDP header fields.

      | 头部字段         | 内容      | 长度 Byte |
      |------------------+-----------+-----------|
      | Source Port      | df6a      |         2 |
      | Destination Port | 0035      |         2 |
      | Length           | 002e      |         2 |
      | Checksum         | ea8e      |         2 |

   3. The value in the Length field is the length of what? (You can consult the text for this answer). Verify your claim with your captured UDP packet.

      从第一个首部字段Source Port开始（df6a ）到payload结束（0001）的整个UDP报文段的长度。

   4. What is the maximum number of bytes that can be included in a UDP payload?

      38 bytes.

   5. What is the largest possible source port number?

      2字节的source port首部可表示的范围是0~65535。

   6. What is the protocol number for UDP? Give your answer in both hexadecimal and decimal notation. To answer this question, you’ll need to look into the Protocol field of the IP datagram containing this UDP segment (see Figure 4.13 in the text, and the discussion of IP header fields).

      #+INCLUDE: "code/ch3-ws-udp/6-export.txt" src c

      | 首部                  | 十进制 | 十六进制 |
      | Next Header: UDP (17) |     17 |       11 |

   7. Examine a pair of UDP packets in which your host sends the first UDP packet and the second UDP packet is a reply to this first UDP packet. (Hint: for a second packet to be sent in response to a first packet, the sender of the first packet should be the destination of the second packet). Describe the relationship between the port numbers in the two packets.

      #+INCLUDE: "code/ch3-ws-udp/7-export.txt" src c

      源端口和目的端口对调。

* 网络层：数据平面
** 复习题
*** R1 路由器和链路层交换机的区别

    我们回顾在本书中使用的某些术语。前面讲过运输层的分组名字是报文段，数据链路层的分组名字是帧。网络层的分组名字是什么？前面讲过路由器和链路层交换机都被称为分组交换机。路由器与链路层交换机间的根本区别是什么？

    #+CAPTION: p.34
    | 协议栈层次 | 分组名称 | 英文     |
    |------------+----------+----------|
    | 应用层     | 报文     | message  |
    | 运输层     | 报文段   | segment  |
    | 网络层     | 数据报   | datagram |
    | 链路层     | 帧       | frame    |

    首先，路由器与链路层交换机都是分组交换机，它们根据分组首部字段中的值，从输入链路接口到输出链路接口转移分组。

    区别在于，链路层交换机基于链路层帧中的字段值做出转发决定，是链路层（第2层）设备。路由器基于网络层数据报中的首部字段值做出转发决定。是网络层（第3层）设备。（p.203）

*** R2 数据平面和控制平面的功能

    我们注意到网络层功能可被大体分成数据平面功能和控制平面功能。数据平面的主要功能是什么？控制平面的主要功能呢？

    数据平面功能决定到达路由器输入链路之一的数据报如何转发到该路由器的输出链路之一。控制平面功能控制数据报沿着从源主机到目的主机的端到端路径中路由器之间的路由方式。（p.198）

*** R3 路由选择和转发的区别

    我们对网络层执行的转发功能和路由选择功能进行区别。路由选择和转发的主要区别是什么？

    #+CAPTION: 路由选择和转发的区别（p.200）
    | 功能     | 目的                                           | 性质             | 时间尺度 | 实现方式 |
    |----------+------------------------------------------------+------------------+----------+----------|
    | 转发     | 将分组从一个输入链路接口转移到适当的输出链路接 | 路由器本地动作   | 几纳秒   | 硬件     |
    | 路由选择 | 确定分组从源到目的地所采取的端到端路径         | 网络范围处理过层 | 几秒     | 软件     |

*** R4 转发表的作用

    路由器中转发表的主要作用是什么？

    路由器检查到达分组首部的一个或多个字段值，进而使用这些首部值在其转发表中索引，通过这种方法来转发分组。这些值对应存储在转发表项中的值，指出了该分组将被转发的路由器的输出链路接口。（p.200）

*** R5 网络层的服务模型

    我们说过网络层的服务模型”定义发送主机和接收主机之间端到端分组的传送特性”。因特网的网络层的服务模型是什么？就主机到主机数据报的传递而论，因特网的服务模型能够保证什么？

    使用尽力而为服务，传送的分组既不能保证以它们发送的顺序被接收，也不能保证它们最终交付；既不能保证端到端时延，也不能保证有最小的带宽。（p.202）

*** R6 数据平面和控制平面的软硬件实现

    在4.2节中，我们看到路由器通常由输入端口、输出端口、交换结构和路由选择处理器组成。其中哪些是用硬件实现的，哪些是用软件实现的？为什么？转到网络层的数据平面和控制平面的概念，哪些是用硬件实现的，哪些是用软件实现的？为什么？

    构成数据平面的输入端口、输出端口和交换结构用硬件实现，因为它们以纳秒尺度运行，远远快过软件实现的速率。

    路由器的控制功能以毫秒或秒时间尺度运行，这些控制功能包括执行路由选择协议、对上线或下线的连接链路进行响应、与远程控制器通信和执行管理功能。因而这些控制平面的功能通常用软件实现并在路由选择处理器上执行。（p.204）

*** R7 转发表的影子副本

    讨论为什么在高速路由器的每个输入端口都存储转发表的影子副本。

    使用在每个输入端口的影子副本，转发决策能在每个输入端口本地做出，无须基于每个分组调用集中式路由选择处理器，因此避免了集中式处理的瓶颈。

*** R8 基于目的转发和通用转发

    基于目的地转发意味着什么？这与通用转发有什么不同（假定你已经阅读4.4节，两种方法中哪种是软件定义网络所采用的）？

    基于目的地转发意味着转发基于数据报的目的地址进行；通用转发和其他功能可以使用数据报首部中的几个不同的字段值来进行。软件定义网络采用通用转发。（p.231）

*** R9 最长前缀匹配

    假设一个到达分组匹配了路由器转发表中的两个或更多表项。采用传统的基于目的地转发，路由器用什么原则来确定这条规则可以用于确定输出端口，使得到达的分组能交换到输出端口？

    最长前缀匹配规则。

*** R10 三种交换结构

    在4.2节中讨论了三种交换结构。列出并简要讨论每一种交换结构。哪一种（如果有的话）能够跨越交换结构并行发送多个分组？

    1. 经内存交换
       + 过程：①一个分组到达一个输人端口时，该端口会先通过中断方式向路由选择处理器发出信号。②该分组从输入端口处被复制到处理器内存中。③路由选择处理器则从其首部中提取目的地址，在转发表中找出适当的输出端口，并将该分组复制到输出端口的缓存中。
       + 带宽：小于内存带宽的一半。
       + 是否阻塞：阻塞的，经共享系统总线一次仅能执行一个内存读写。
    2. 经总线交换
       + 过程：①让输入端口为分组预先计划一个交换机内部标签（首部），指示本地输出端口，使分组在总线上传送和传输到输出端口。②该分组能由所有输出端口收到，但只有与该标签匹配的端口才能保存该分组。③然后标签在输出端口被去除，因为其仅用于交换机内部来跨越总线。
       + 带宽：受总线速率限制。
       + 是否阻塞：阻塞的，一次只有一个分组能够跨越总线。
    3. 经互联网络交换
       + 过程：每条垂直的总线在交叉点与每条水平的总线交叉，交叉点通过交换结构控制器（其逻辑是交换结构自身的一部分）能够在任何时候开启和闭合。
       + 是否阻塞：如果来自两个不同输入端口的两个分组其目的地为相同的输出端口，则阻塞；否则不阻塞。

*** R11 输入端口分组丢失

    描述在输入端口会出现分组丢失的原因。描述在输入端口如何消除分组丢失（不使用无限大缓存区）。

    交换结构的速度小于总的输入线路速度。提高交换结构的速度。

*** R12 输出端口分组丢失

    描述在输出端口会出现分组丢失的原因。通过提高交换结构速率，能够防止这种丢失吗？

    分组到达输出端口的速度大于输出端口的传输速度。不能。

*** R13 HOL阻塞

    什么是HOL阻塞？它出现在输入端口还是输出端口？

    在一个输入队列中排队的分组必须等待通过交换结构发送，因为它被位于线路前部的另一个分组所阻塞。

*** R14 分组调度规则

    在4.2节我们学习了FIFO、优先权、循环（RR）和加权公平排队（WFQ）分组调度规则。这些排队规则中，哪个规则确保所有分组是以到达的次序离开的？

    FIFO。

*** R15 分组的优先权

    举例说明为什么网络操作员要让一类分组的优先权超过另一类分组的。

    基于IP的实时话音分组可能获得超过非实时流量（如SMTP或IMAP电子邮件分组）的优先权。

*** R16 循环和加权公平排队

    RR和WFQ分组调度之间的基本差异是什么？存在RR和WFQ将表现得完全相同的场合吗？（提示：考虑WFQ权重。）

    对于RR，循环调度器在每个类之间轮流提供服务。对于WFQ，每个类得到的服务数量取决于其权重。

    如果每个类的权重相同，那么WFQ将表现得与RR一样。

*** R17 IP数据报格式

    假定主机A向主机B发送封装在一个IP数据报中的TCP报文段。当主机B接收到该数据报时，主机B中的网络层怎样知道它应当将该报文段（即数据报的有效载荷）交给TCP而不是UDP或某个其他东西呢？

    IPv4的上层协议，IPv6的下一个首部。

*** R18

    在IP首部中，哪个字段能用来确保一个分组的转发不超过N台路由器？

    TTL。

*** R19 与运输层检验和的区别

    前面讲过因特网检验和被用于运输层报文段（分别在图3-7和图3-29的UDP和TCP首部中）以及网络层数据报（图4-16的IP首部中）。现在考虑一个运输层报文段封装在一个IP数据报中。在报文段首部和数据报首部中的检验和要遍及IP数据报中的任何共同字节进行计算吗？

    IP数据报的检验和仅检验IP数据报的首部，运输层报文段的检验和检验TCP或UDP报文段，位于IP数据报的载荷部分，所以这两种检验和没有计算共同的字节。

*** R20 分片

    什么时候一个大数据报分割成多个较小的数据报？较小的数据报在什么地方装配成一个较大的数据报？

    数据报从一条链路传输到另一条具有更小MTU的链路层协议的链路。端系统。

*** R21 接口与IP地址

    路由器有IP地址吗？如果有，有多少个？

    路由器的每一个接口有一个IP地址。

*** R22

    IP地址223.1.3.27的32比特二进制等价形式是什么？

    1101 1111 0000 0001 0000 0011 0001 1011

*** R23

    考察使用DHCP的主机，获取它的IP地址、网络掩码、默认路由器及其本地DNS服务器的IP地址。列出这些值。
    | IP地址    | 192.168.8.100 |
    | 子网掩码  | 255.255.255.0 |
    | 路由器    |   192.168.8.1 |
    | DNS服务器 |    198.18.0.2 |

*** R24

    假设在一个源主机和一个目的主机之间有3台路由器。不考虑分片，一个从源主机发送给目的主机的IP数据报将通过多少个接口？为了将数据报从源移动到目的地需要检索多少个转发表？

    (每个路由器2个)*3+端系统1个*2 = 8个接口

    3个转发表

*** R25

    假设某应用每20ms生成一个40字节的数据块，每块封装在一个TCP报文段中，TCP报文段再封装在一个IP数据报中。每个数据报的开销有多大？应用数据所占百分比是多少？

    40字节数据+20字节TCP首部+20字节IP首部 = 80字节

    应用数据占比40/80=50%

*** R26

    假定你购买了一个无线路由器并将其与电缆调制解调器相连。同时假定ISP动态地为你连接的设备（即你的无线路由器）分配一个IP地址。还假定你家有5台PC，均使用802.11以无线方式与该无线路由器相连。怎样为这5台PC分配IP地址？该无线路由器使用NAT吗？为什么？

    通常，无线路由器包括一个DHCP服务器。DHCP被用来给5台PC和路由器接口分配IP地址。是的，无线路由器也使用NAT，因为它只从ISP那里获得一个IP地址。

*** R27 路由聚合

    “路由聚合”一词意味着什么？路由器执行路由聚合为什么是有用的？

    路由聚合指使用单个网络前缀通告多个网络的能力。
    当地址按块分给ISP，然后又由ISP分给客户组织时，地址聚合工作极为有效。

*** R28

    “即插即用”或“零配置”协议意味着什么？

    将主机连接进一个网络的网络相关方面的自动能力。

*** R29 专用网络地址

    什么是专用网络地址？具有专用网络地址的数据报会出现在大型公共因特网中吗？解释理由。

    专用网络地址是指一个只对该网络中的设备有意义的网络地址。带有专用网络地址的数据报不应该出现在公共互联网上，因为专用网络地址有可能被许多网络设备在自己的专用网络中使用。

*** R30 IP首部

    比较并对照IPv4和IPv6首部字段。它们有相同的字段吗？

    IPv6有一个固定长度的首部，它不包括IPv4首部可以包括的可选选项。尽管IPv6首部含两个128位的地址（源和目的IP地址），但整个头只有40字节的固定长度。其中有几个字段的作用是相似的。IPv6中的流量类型、有效载荷长度、下一个首部和跳限制分别与IPv4中的服务类型、数据报长度、上层协议和寿命相似。

*** R31 隧道

    有人说当IPv6以隧道形式通过IPv4路由器时，IPv6将IPv4隧道作为链路层协议。你同意这种说法吗？为什么？

    同意。借助于隧道，在隧道发送端的IPv6节点可将整个IPv6数据报放到一个1Pv4数据报的数据字段中。（p.230）

*** R32 通用转发与基于目的地转发的区别

    通用转发与基于目的地转发有何不同？

    通用转发能够对协议栈的多个首部字段进行匹配，而基于目的转发仅仅基于分组的目的地址。（p.231）

*** R33

    我们在4.1节遇到的基于目的地转发与在4.4节遇到的OpenFlow流表之间有什么差异？

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:650px;
    [[file:img/fig4-3.png]]

    #+ATTR_ORG: :width 200
    #+ATTR_HTML: :style width:100%; max-width:650px;
    [[file:img/fig4-28.png]]

    转发有两个主要操作：匹配和动作。使用基于目的地的转发，路由器的匹配操作只查找待转发数据报的目的IP地址，路由器的动包括将数据报通过交换结构发送到指定输出端口。

    使用通用转发，能够对协议栈的多个首部字段进行匹配，这些首部字段是与不同层次的不同协议相关联的。动作能够包括：将分组转发到一个或多个输出端口（就像在基于目的地转发中一样），跨越多个通向服务的离开接口进行负载均衡分组（就像在负载均衡中一样），重写首部值（就像在NAT中一样），有意识地阻挡／丢弃某个分组（就像在防火墙中一样），为进一步处理和动作而向某个特定的服务器发送一个分组（就像在DPI一样），等等。

*** R34

    路由器或交换机的“匹配加动作”意味着什么？在基于目的地转发的分组交换机场合中，要匹配什么并采取什么动作？在SDN的场合中，举出3个能够被匹配的字段和3个能被采取的动作。

    “匹配加行动”是指路由器或交换机试图找到数据报的一些首部与流表中的一些条目之间的匹配，然后根据这种匹配，路由器决定将数据包转发到哪个（些）接口，甚至对数据包进行一些其他操作。在基于目的地转发的数据报交换中，路由器只试图找到转发表条目与到达的数据报的目的IP地址之间的匹配，而行动是决定将数据包转发到哪个接口。在SDN的情况下，有许多字段可以匹配，例如，IP源地址、TCP源端口和源MAC地址；也有许多行动可以采取，例如，转发、丢弃和修改一个字段值。

*** R35

    在IP数据报中举出能够在OpenFlow 1.0通用转发中“匹配”的3个首部字段。不能在OpenFlow中“匹配”的3个IP数据报首部字段是什么？

    IP源地址、TCP源端口和源MAC地址。
    TTL字段、数据报长度字段、首部校验和（取决于TTL字段）。

** 习题
*** P1 基于目的地转发的限制

    考虑下面的网络。
    a. 显示路由器A中的转发表，使得目的地为主机H3的所有流量都通过接口3转发。
    b. 写出路由器A中的转发表，使得从H1发往主机H3的所有流量都通过接口3转发，从H2发往主机H3的所有流量都通过接口4转发。（提示：这是一个技巧性的问题。）


    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:400px;
    [[file:img/ch4-p1.png]]

    1. \-

       | 目的地址 | 输出 |
       |----------+------|
       | H3       |    3 |

    2. 路由器使用基于目的地转发时只能根据目的地转发数据报，因此不能根据不同源主机将数据报转发到不同接口。

*** P2

    假设两个分组在完全相同的时刻到达一台路由器的两个不同输入端口。同时假设在该路由器中没有其他分组。
    a. 假设这两个分组朝着两个不同的输出端口转发。当交换结构使用一条共享总线时，这两个分组可能在相同时刻通过该交换结构转发吗？
    b. 假设这两个分组朝着两个不同的输出端口转发。当交换结构使用经内存交换时，这两个分组可能在相同时刻通过该交换结构转发吗？
    c. 假设这两个分组朝着相同的输出端口转发。当交换结构使用纵横式时，这两个分组可能在相同时刻通过该交换结构转发吗？


    a. 不能，因为一次只有一个分组能够跨越总线。
    b. 不能，因为经过共享系统总线一次仅能执行一个内存读写。
    c. 不能，输出端口相同时，相当于共享了一部分总线。

*** P3 交换结构时延

    在4.2节中，我们注意到如果交换结构速率是输入线路速率的n倍，其最大的排队时延为(n-1)D。假设所有分组有相同长度，在相同时刻n个分组到达n个输出端口，同时所有n个分组要转发到不同的输出端口。对于内存、总线和纵横式交换结构，一个分组的最大时延是多少？

    (n-1)D
    (n-1)D
    0

*** P4 交换结构调度

    考虑下列交换机。假设所有数据报具有相同长度，交换机以一种分时隙、同步的方式运行，在一个时隙中一个数据报能够从某输入端口传送到某输出端口。其交换结构是纵横式的，因此在一个时隙中至多一个数据报能够传送到一个给定输出端口，但在一个时隙中不同的输出端口能够接收到来自不同输入端口的数据报，从输入端口到它们的输出端口传送所示的分组，所需的时隙数量最小是多少？此时假定使用你所需要的任何输入排队调度方法（即此时没有HOL阻塞）。假定采用你能够设计的最差情况下的调度方案，且非空输入队列不会空闲，所需的时隙数量最大是多少？

    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:420px;
    [[file:img/ch4-p4.png]]

    | 时隙1 | 时隙2 | 时隙3 |
    |-------+-------+-------|
    | +X+   |       |       |
    | X +Y+ | +X+   |       |
    | Z Y   | Z +Y+ | +Z+   |

    | 时隙1 | 时隙2 | 时隙3 |
    |-------+-------+-------|
    | +X+   |       |       |
    | X Y   | X +Y+ | +X+   |
    | Z +Y+ | +Z+   |       |

    两种情况都是3个时隙。

*** P5 地址范围转换为最长前缀匹配

    考虑使用32比特主机地址的某数据报网络。假定一台路由器具有4条链路，编号为0~3，分组能被转发到如下的各链路接口：

    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:450px;
    [[file:img/ch4-p5.png]]

    a. 提供一个具有5个表项的转发表，使用最长前缀匹配，转发分组到正确的链路接口。
    b. 描述你的转发表是如何为具有下列目的地址的数据报决定适当的链路接口的。

       #+begin_example
         11001000 10010001 01010001 01010101
         11100001 01000000 11000011 00111100
         11100001 10000000 00010001 01110111
       #+end_example


    a. \-

       | 目的地址          | 链路接口 |
       |-------------------+----------|
       | 11100000 00       |        0 |
       | 11100000 01000000 |        1 |
       | 1110000           |        2 |
       | 11100001 1        |        3 |
       | 其他              |        3 |

    b. 3
       2
       3

*** P6 最长前缀匹配与地址范围

    考虑使用8比特主机地址的某数据报网络。假定一台路由器使用最长前缀匹配并具有下列转发表：

    | 前缀匹配 | 接口 |
    |----------+------|
    |       00 |    0 |
    |      010 |    1 |
    |      011 |    2 |
    |       10 |    2 |
    |       11 |    3 |

    对这4个接口中的每个，给出相应的目的主机地址的范围和在该范围中的地址数量。

    | 前缀匹配 | 目的地址范围          | 地址数量 |
    |----------+-----------------------+----------|
    |       00 | 0000 0000 ~ 0011 1111 |      2^6 |
    |      010 | 0100 0000 ~ 0101 1111 |      2^5 |
    |      011 | 0110 0000 ~ 0111 1111 |      2^5 |
    |       10 | 1000 0000 ~ 1011 1111 |      2^6 |
    |       11 | 1100 0000 ~ 1111 1111 |      2^6 |

*** P7

    考虑使用8比特主机地址的数据报网络。假定一台路由器使用最长前缀匹配并具有下列转发表：

    | 前缀匹配 | 接口 |
    |----------+------|
    |        1 |    0 |
    |       10 |    1 |
    |      111 |    2 |
    |     其他 |    3 |

    对这4个接口中的每个，给出相应的目的主机地址的范围和在该范围中的地址数量。

    | 前缀匹配 |  前三位 | 地址范围              | 地址数量 |
    |----------+---------+-----------------------+----------|
    |        1 |     110 | 1100 0000 ~ 1101 1111 |      2^5 |
    |       10 | 100 101 | 1000 0000 ~ 1011 1111 |      2^6 |
    |      111 |     111 | 1110 0000 ~ 1111 1111 |      2^5 |
    |     其他 |         | 0000 0000 ~ 0111 1111 |      2^7 |

*** P8 子网与接口数量

    考虑互联3个子网（子网1、子网2和子网3）的一台路由器。假定这3个子网的所有接口要求具有前缀223.1.17/24。还假定子网1要求支持多达60个接口，子网2要求支持多达90个接口，子网3要求支持多达12个接口。提供3个满足这些限制的网络地址（形式为a.b.c.d/x）。

    223.1.17.0/26
    223.1.17.128/25
    223.1.17.192/28

*** P9 子网掩码记法

    在4.2.1节中给出了一个转发表（使用最长前缀匹配）的例子。使用a.b.c.d/x记法代替二进制字符串记法，重写该转发表。

    | 二进制记法                 | 子网掩码记法 |
    |----------------------------+--------------|
    | 11001000 00010111 00010    | 200.23.16/21 |
    | 11001000 00010111 00011000 | 200.23.24/24 |
    | 11001000 00010111 00011    | 200.23.24/21 |

*** P10

    在习题P5中要求你给出转发表（使用最长前缀匹配）。使用a.b.c.d/x记法代替二进制字符串记法，重写该转发表。

    | 二进制记法        | 子网掩码记法 |
    |-------------------+--------------|
    | 11100000 00       | 224.0/10     |
    | 11100000 01000000 | 224.64/16    |
    | 1110000           | 224/7        |
    | 11100001 1        | 225.128/9    |

*** P11

    考虑一个具有前缀128.119.40.128/26的子网。给出能被分配给该网络的一个IP地址（形式为XXX.XXX.XXX.XXX）的例子。假定一个ISP拥有形式为128.119.40.64/26的地址块。假定它要从该地址块生成4个子网，每块具有相同数量的IP地址。这4个子网（形式为a.b.c.d/x）的前缀是什么？

    1. 128.119.40.128
    2. 128.119.40.64/26最后8位是0100 0000，均分给4个子网需要用掉2位：
       | 0100 0000 | 128.119.40.64/28  |
       | 0101 0000 | 128.119.40.80/28  |
       | 0110 0000 | 128.119.40.96/28  |
       | 0111 0000 | 128.119.40.112/28 |

*** P12 子网划分

    考虑图4-20中显示的拓扑。（在12:00以顺时针开始）标记具有主机的3个子网为网络A、B和C，标记没有主机的子网为网络D、E和F。
    a. 为这6个子网分配网络地址，要满足下列限制：所有地址必须从214.97.254/23起分配；子网A应当具有足够地址以支持250个接口；子网B应当具有足够地址以支持120个接口；子网C应当具有足够地址以支待120个接口。当然，子网D、E和F应当支持两个接口。对于每个子网，分配采用的形式是a.b.c.d/x或a.b.c.d/x~e.f.g.h/y。
    b. 使用你对（a）部分的答案，为这3台路由器提供转发表（使用最长前缀匹配）。


    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:450px;
    [[file:img/fig4-20.png]]

    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:700px;
    [[file:img/ch4-p12.png]]

*** P13 大学IP地址块和服务器位置

    使用美国因特网编码注册机构 (http://www.arin.net/whois) 的whois服务来确定三所大学所用的IP地址块。whois服务能被用于确定某个特定的IP地址的确定地理位置吗？使用 www.maxmind.com 来确定位于这三所大学的Web服务器的位置。

    #+begin_example
      ❯ dig nyu.edu

      ; <<>> DiG 9.10.6 <<>> nyu.edu
      ;; global options: +cmd
      ;; Got answer:
      ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 49081
      ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 3, ADDITIONAL: 6

      ;; OPT PSEUDOSECTION:
      ; EDNS: version: 0, flags:; udp: 4096
      ;; QUESTION SECTION:
      ;nyu.edu.			IN	A

      ;; ANSWER SECTION:
      nyu.edu.		550	IN	A	216.165.47.10

      ;; AUTHORITY SECTION:
      nyu.edu.		34436	IN	NS	ns1.nyu.net.
      nyu.edu.		34436	IN	NS	ns4.nyu.edu.
      nyu.edu.		34436	IN	NS	ns2.nyu.org.

      ;; ADDITIONAL SECTION:
      ns1.nyu.net.		27920	IN	A	128.122.0.8
      ns2.nyu.org.		27918	IN	A	128.122.0.76
      ns4.nyu.edu.		3707	IN	A	3.226.48.68
      ns1.nyu.net.		27920	IN	AAAA	2607:f600:1001:6100::8
      ns2.nyu.org.		27918	IN	AAAA	2607:f600:1001:6000::76

      ;; Query time: 23 msec
      ;; SERVER: 192.168.8.1#53(192.168.8.1)
      ;; WHEN: Thu Oct 28 11:24:45 CST 2021
      ;; MSG SIZE  rcvd: 224

      ❯ whois 216.165.47.10
      % IANA WHOIS server
      % for more information on IANA, visit http://www.iana.org
      % This query returned 1 object

      refer:        whois.arin.net

      inetnum:      216.0.0.0 - 216.255.255.255
      organisation: ARIN
      status:       ALLOCATED

      whois:        whois.arin.net

      changed:      1998-04
      source:       IANA

      # whois.arin.net

      NetRange:       216.165.0.0 - 216.165.127.255
      CIDR:           216.165.0.0/17
      NetName:        NYU-NET2
      NetHandle:      NET-216-165-0-0-1
      Parent:         NET216 (NET-216-0-0-0-0)
      NetType:        Direct Assignment
      OriginAS:
      Organization:   New York University (NYU)
      RegDate:        1999-08-11
      Updated:        2017-11-27
      Comment:        Please query Merit's RADb for up to date information on allocations, routing policy, and contacts.
      Comment:
      Comment:        whois -h whois.radb.net
      Comment:
      Comment:        www.ra.net
      Ref:            https://rdap.arin.net/registry/ip/216.165.0.0
    #+end_example

    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:1000px;
    [[file:img/ch4-p13.png]]

*** P14 分片

    考虑向具有700字节MTU的一条链路发送一个2400字节的数据报。假定初始数据报标有标识号422。将会生成多少个分片？在生成相关分片的数据报中各个字段的值是多少？

    根据[[https://datatracker.ietf.org/doc/html/rfc791#section-3.1][RFC791]]，片偏移以64bit为单位。

    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:600px;
    [[file:img/ch4-p14.png]]

*** P15

    假定在源主机A和目的主机B之间的数据报被限制为1500字节（包括首部）。假设IP首部为20字节，要发送一个5MB的MP3文件需要多少个数据报？解释你的答案是如何计算的。

    ⌈5e6/(1500-20TCP-20IP)⌉ = 3425

*** P16 NAT

    考虑在图4-25中建立的网络。假定ISP现在为路由器分配地址24.34.112.235，家庭网络的网络地址是192.168.1/24。
    a. 在家庭网络中为所有接口分配地址。
    b. 假定每台主机具有两个进行中的TCP连接，所有都是针对主机128.119.40.86的80端口的。在NAT转换表中提供6个对应表项。


    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:680px;
    [[file:img/fig4-25.png]]

    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:600px;
    [[file:img/ch4-p16.png]]

*** P17

    假设你有兴趣检测NAT后面的主机数量。你观察到在每个IP分组上IP层顺序地标出一个标识号。由一台主机生成的第一个IP分组的标识号是一个随机数，后继IP分组的标识号是顺序分配的。假设由NAT后面主机产生的所有IP分组都发往外部。
    a. 基于这个观察，假定你能够俘获由NAT向外部发送的所有分组，你能概要给出一种简单的技术来检测NAT后面不同主机的数量吗？评估你的答案。
    b. 如果标识号不是顺序分配而是随机分配的，这种技术还能正常工作吗？评估你的答案。


    a. 连续的标识号指示一台主机。
    b. 不能。

*** P18 NAT与TCP连接

    在这个习题中，我们将探讨NAT对P2P应用程序的影响。假定用户名为Arnold的对等方通过查询发现，用户名为Bernard的对等方有一个要下载的文件。同时假定Bernard和Arnold都位于NAT后面。尝试设计一种技术，使得Arnold与Bernard创建一条TCP连接，而不对NAT做应用特定的配置。如果难以设计这样的技术，试讨论其原因。

    为了在Arnold和Bernard之间创建一条TCP连接，Arnold或Bernard必须向对方发起连接。但是，Arnold和Bernard的外层的NAT会丢弃从WAN端到达的SYN数据包。因此，如果Arnold和Bernard都在NAT后面，他们都不能发起建立与对方的TCP连接。

*** P19 通用转发与流表

    考虑显示在图4-30中的SDN OpenFlow网络。假定对于到达s2的数据报的期望转发行为如下：

    + any datagrams arriving on input port 1 from hosts h5 or h6 that are destined to hosts h1 or h2 should be forwarded over output port 2;
    + any datagrams arriving on input port 2 from hosts h1 or h2 that are destined to hosts h5 or h6 should be forwarded over output port 1;
    + any arriving datagrams on input ports 1 or 2 and destined to hosts h3 or h4 should be delivered to the host specified;
    + hosts h3 and h4 should be able to send datagrams to each other.


    详述实现这种转发行为的s2中的流表项。

    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:660px;
    [[file:img/fig4-30.png]]

    | 匹配                                                   | 动作       |
    |--------------------------------------------------------+------------|
    | Ingress Port = 1; IP Src = 10.3.*.*; IP Dst = 10.1.*.* | Forward(2) |
    | Ingress Port = 2; IP Src = 10.1.*.*; IP Dst = 10.3.*.* | Forward(1) |
    | Ingress Port = 1; IP Dst = 10.2.0.3;                   | Forward(3) |
    | Ingress Port = 2; IP Dst = 10.2.0.3;                   | Forward(3) |
    | Ingress Port = 1; IP Dst = 10.2.0.4;                   | Forward(4) |
    | Ingress Port = 2; IP Dst = 10.2.0.4;                   | Forward(4) |
    | Ingress Port = 3;                                      | Forward(4) |
    | Ingress Port = 4;                                      | Forward(3) |

*** P20

    再次考虑显示在图4-30中的SDN OpenFlow网络。假定在s2对于来自主机h3或h4的数据报的期望转发行为如下：

    + 任何来自主机h3并且发往主机h1、h2、h5或h6的数据报应当在网络中以顺时针方向转发。
    + 任何来自主机h4并且发往主机h1、h2、h5或h6的数据报应当在网络中以逆时针方向转发。


    详述实现这种转发行为的s2中的流表项。

    | 匹配                                | 动作       | 说明      |
    |-------------------------------------+------------+-----------|
    | Ingress Port = 3; IP Dst = 10.1.*.* | Forward(2) | h3->h1,h2 |
    | Ingress Port = 3; IP Dst = 10.3.*.* | Forward(2) | h3->h5,h6 |
    | Ingress Port = 4; IP Dst = 10.1.*.* | Forward(1) | h4->h1,h2 |
    | Ingress Port = 4; IP Dst = 10.3.*.* | Forward(1) | h4->h5,h5 |

*** P21

    再次考虑上面P19的场景。给出分组交换机s1和s3的流表项，使得具有h3或h4源地址的任何到达数据报被路由到在IP数据报的目的地址字段中定义的目的主机。（提示：你的转发表规则应当包括如下情况，即到达的数据报被发往直接连接的主机，或应当转发到相邻路由器以便传递到最终主机。）

    #+caption: s1的流表
    | 匹配                                 | 动作       | 说明         |
    |--------------------------------------+------------+--------------|
    | IP Src = 10.2.*.*; IP Dst = 10.1.0.1 | Forward(2) | h3,h4->h1    |
    | IP Src = 10.2.*.*; IP Dst = 10.1.0.2 | Forward(3) | h3,h4->h2    |
    | IP Src = 10.2.*.*; IP Dst = 10.3.*.* | Forward(1) | h3,h4->h5,h6 |

    #+caption: s3的流表
    | 匹配                                 | 动作       | 说明         |
    |--------------------------------------+------------+--------------|
    | IP Src = 10.2.*.*; IP Dst = 10.1.0.5 | Forward(2) | h3,h4->h5    |
    | IP Src = 10.2.*.*; IP Dst = 10.1.0.6 | Forward(1) | h3,h4->h6    |
    | IP Src = 10.2.*.*; IP Dst = 10.1.*.* | Forward(3) | h3,h4->h1,h2 |

*** P22

    再次考虑显示在图4-30中的SDN OpenFlow网络。假定我们希望交换机s2的功能像防火墙一样。在s2中定义实现下列防火墙行为的流表，以传递目的地为h3和h4的数据报（对下列四种防火墙行为，每种定义一张不同的流表）。不需要在s2中定义将流量转发到其他路由器的转发行为。
    + 仅有从主机h1和h6到达的流量应当传递到主机h3或h4（即从主机h2和h5到达的流量被阻塞）。
    + 仅有TCP流量被允许传递给主机h3或h4（即UDP流扯被阻塞）。
    + 仅有发往h3的流量被传递（即所有到h4的流量被阻塞）。
    + 仅有来自h1并且发往h3的UDP流量被传递。所有其他流量被阻塞。


    1. \-
       | 匹配                                 | 动作       | 说明   |
       |--------------------------------------+------------+--------|
       | IP Src = 10.1.0.1; IP Dst = 10.2.0.3 | Forward(3) | h1->h3 |
       | IP Src = 10.1.0.1; IP Dst = 10.2.0.4 | Forward(4) | h1->h4 |
       | IP Src = 10.3.0.6; IP Dst = 10.2.0.3 | Forward(3) | h6->h3 |
       | IP Src = 10.3.0.6; IP Dst = 10.2.0.4 | Forward(4) | h6->h4 |
    2. \-
       | 匹配                                     | 动作       | 说明      |
       |------------------------------------------+------------+-----------|
       | IP Scr = \star{}.*.*.*; IP Dst = 10.2.0.3; TCP | Forward(3) | *-TCP->h3 |
       | IP Scr = \star{}.*.*.*; IP Dst = 10.2.0.4; TCP | Forward(4) | *-TCP->h4 |
    3. \-
       | 匹配                                      | 动作       | 说明       |
       |-------------------------------------------+------------+------------|
       | IP Src = 10.1.0.1; IP Dst = 10.2.0.3; UDP | Forward(3) | h1-UDP->h3 |

** Wireshark实验

   [[file:code/ch4-ws-ip/wireshark-ip-v7.0.pdf][Wireshark Lab: IP v7.0]]

   下面的traceroute[[file:code/ch4-ws-ip/my-trace.pcapng][结果]]不理想，采用实验附带的数据。

   #+begin_example
     ❯ traceroute -I -w 1 gaia.cs.umass.edu
     traceroute to gaia.cs.umass.edu (128.119.245.12), 64 hops max, 72 byte packets
      1  www.huaweimobilewifi.com (192.168.8.1)  19.915 ms  26.711 ms  29.840 ms
      2  * * *
      3  192.168.208.65 (192.168.208.65)  38.351 ms  39.267 ms  40.085 ms
      4  192.168.191.77 (192.168.191.77)  39.732 ms  39.413 ms  39.948 ms
      5  * * *
      6  * * *
      7  * * *
      8  * * *
      9  * * *
     10  * * *
     11  * * *
     12  * * *
     13  * * *
     14  * * *
     15  * * *
     16  * * *
     17  * * *
     18  * * *
     19  * * *
     20  * * *
     21  * * *
     22  * * *
     23  * * *
     24  * * *
     25  * * *
     26  * * *
     27  * * *
     28  gaia.cs.umass.edu (128.119.245.12)  280.594 ms  279.113 ms  299.696 ms
   #+end_example

   1. Select the first ICMP Echo Request message sent by your computer, and expand the Internet Protocol part of the packet in the packet details window.

      #+include: "./code/ch4-ws-ip/1.txt" src c

      What is the IP address of your computer?

      Source Address: 192.168.1.102

   2. Within the IP packet header, what is the value in the upper layer protocol field?

      Protocol: ICMP (1)

   3. \-

      + How many bytes are in the IP header?

        Header Length: 20 bytes

      + How many bytes are in the payload of the IP datagram? Explain how you determined the number of payload bytes.

        Total Length: 84

        payload length = 84 - 20 = 64 bytes

   4. Has this IP datagram been fragmented? Explain how you determined whether or not the datagram has been fragmented.

      没有被分片，More fragments: Not set

   5. Which fields in the IP datagram always change from one datagram to the next within this series of ICMP messages sent by your computer?

      #+include: "./code/ch4-ws-ip/5.txt" src c

      Identification
      Time to Live
      Header Checksum

   6. Which fields stay constant? Which of the fields must stay constant? Which fields must change? Why?

      + Stay constant:
        Version
        Header Length
        Protocol
        Source Address
        Destination Address

      + Must stay constant:
        Source Address
        Destination Address
        Protocol

      + Must change:
        Identification
        Time to Live

   7. Describe the pattern you see in the values in the Identification field of the IP datagram

      从13008开始，逐个IP数据报加一。

   8. What is the value in the Identification field and the TTL field?

      #+include: "./code/ch4-ws-ip/8.txt" src c

       Identification: 0x9d7c (40316)
       Time to Live: 255

   9. Do these values remain unchanged for all of the ICMP TTL-exceeded replies sent to your computer by the nearest (first hop) router? Why?

      Identification会变化，TTL不变。

   10. Find the first ICMP Echo Request message that was sent by your computer after you changed the Packet Size in pingplotter to be 2000. Has that message been fragmented across more than one IP datagram?

       #+include: "./code/ch4-ws-ip/10.txt" src c

   11. \-

       + Print out the first fragment of the fragmented IP datagram.

         #+include: "./code/ch4-ws-ip/11.txt" src c

       + What information in the IP header indicates that the datagram been fragmented?

         Flags: 0x20, More fragments

       + What information in the IP header indicates whether this is the first fragment versus a latter fragment?

         Flags: 0x20, More fragments
         Fragment Offset: 0

       + How long is this IP datagram?

         Total Length: 1500

   12. \-
       + Print out the second fragment of the fragmented IP datagram.

         #+include: "./code/ch4-ws-ip/12.txt" src c

       + What information in the IP header indicates that this is not the first datagram fragment?
         Fragment Offset: 1480

       + Are the more fragments?

         No.

       + How can you tell?

          Flags: 0x00

   13. What fields change in the IP header between the first and second fragment?

       Total Length
       Flags
       Header Checksum

   14. How many fragments were created from the original datagram?

       #+include: "./code/ch4-ws-ip/14.txt" src c

       3

   15. What fields change in the IP header among the fragments?

       Fragment Offset

* 网络层：控制平面
** 笔记

#+ATTR_ORG: :width 300
#+ATTR_HTML: :style width:100%; max-width:300px;
[[file:img/fig5-3.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:470px;
[[file:img/fig5-6.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:360px;
[[file:img/fig5-7.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:480px;
[[file:img/fig5-10.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:460px;
[[file:img/fig5-12.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:370px;
[[file:img/fig5-13.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:370px;
[[file:img/fig5-14.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:380px;
[[file:img/fig5-15.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:390px;
[[file:img/fig5-16.png]]

** 复习题
*** R1 每路由器控制
+ 基于每路由器控制的控制平面意味着什么？

  意味着在每台路由器中运行一种路由选择算法，每台路由器中都包含转发和路由选择功能。每台路由器有一个路由选择组件，用于与其他路由器中的路由选择组件通信，以计算其转发表的值。

+ 在这种情况下，当我们说网络控制平面和数据平面是“整体地”实现时，是什么意思？

  控制平面路由选择功能与数据平面转发功能位于同一台物理路由器中。

*** R2 逻辑集中式控制
+ 基于逻辑上集中控制的控制平面意味着什么？

  逻辑集中式控制器计算并分发转发表以供每台路由 器使用。

+ 在这种情况下，数据平面和控制平面是在相同的设备或在分离的设备中实现的吗？请解释。

  数据平面和控制平面在不同的设备中实现。控制平面在一台或多台服务器中实现，而数据平面在每台路由器中实现。

*** R3 集中式和分散式路由选择算法

比较和对照集中式和分布式路由选择算法的性质。给出一个路由选择协议的例子，该路由选择协议采用分布式方法和集中式方法。

|                    | 集中式                                   | 分散式                                                                                                 |
|--------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------|
| 计算节点拥有的信息 | 完整的,全局的网络知识                    | 与其直接相连链路的开销知识                                                                             |
| 计算过程           | 直接计算出从源到目的地之间的最低开销路径 | 通过迭代计算过程以及与相邻节点的信息交换，一个节点逐渐计算出到达某目的节点或一组目的节点的最低开销路径 |
| 例子               | OSPF                                     | BGP                                                                                                    |

*** R4 链路状态和距离矢量路由选择选法

比较和对照链路状态和距离矢量这两种路由选择算法。

|          | 链路状态                 | 矢量                                     |
|----------+--------------------------+------------------------------------------|
| 通信对象 | 所有其他节点             | 直接相连的邻居                           |
| 通信内容 | 与自己直接相连链路的开销 | 从自己到网络中所有其他节点的最低开销估计 |

*** R5 距离矢量路由选择中的无穷计数

在距离矢量路由选择中的“无穷计数”是什么意思？

t_{0},         D_{y}(x) = 6
t_{1}, y通知z, D_{z}(x) = c(z,y) + D_{y}(x) = 7
t_{2}, z通知y, D_{y}(x) = 8
t_{3}, y通知z, D_{z}(x) = 9
...
t_{43}, y通知z, D_{z}(x) = 49
t_{44}, z通知y, D_{y}(x) = 50
t_{45}, y通知z, D_{z}(x) = min{c(z,x)+D_{x}(x), c(z,y)+D_{y}(x)} = min{50+0, 1+50} = 50

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:480px;
[[file:img/ch5-r5.png]]

*** R6

每个自治系统使用相同的AS内部路由选择算法是必要的吗？说明其原因。

不需要，每个AS对其内部的路由享有自治权。

*** R7 AS内部协议的必要性

为什么在因特网中用到了不同的AS间与AS内部协议？

所有路由器执行相同的路由选择算法以计算穿越整个网络的路由选择路径会遇到两个问题：
1. 随着路由器数目变得很大，涉及路由选择信息的通信、计算和存储的开销将高得不可实现。
2. 一个组织应当能够按自己的愿望运行和管理其网络，还要能将其网络与其他外部网络连接起来。

*** R8

是非判断题：当一台OSPF路由器发送它的链路状态信息时，它仅向那些直接相邻的节点发送。解释理由。

错误，它向自制系统内所有其他路由器广播链路状态信息。

*** R9 OSPF AS中的区域

+ 在OSPF自治系统中区域表示什么？

  每个区域都运行自己的OSPF链路状态路由选择算法，在每个区域内，一台或多台区域边界路由器负责为流向该区域以外的分组提供路由选择。


+ 为什么引入区域的概念？

  区域的概念是出于可扩展性的考虑而引入的，也就是说，我们希望为一个大规模的OSPF AS建立一个具有层次结构的路由，而区域是构成层次结构路由的一个重要构件。

*** R10 子网、前缀和BGP路由

定义和对比下列术语：子网、前缀和BGP路由。

将每个接口从其主机或路由器分离出来，形成孤立的网络岛，接口是孤立网络的终点。这些孤立的网络中的每一个都被称为子网。

形式为a.b.c.d/x的地址的x最高比特构成了IP地址的网络部分，并且经常被称为该地址的前缀。

当路由器通过BGP连接通告前缀时，它在前缀中包括一些BGP属性。用BGP术语来说，前缀及其属性称为路由。

*** R11 AS-PATH NEXT-HOP

BGP是怎样使用NEXT-HOP展性的？它是怎样使用AS-PATH属性的？

BGP路由器使用AS-PATH属性
1. 检测和防止通告环路；
2. 在通往同一前缀的多个路径中进行选择。


NEXT-HOP属性表示沿着通告路径（在收到通告的AS之外）到一个给定前缀的第一个路由器的IP地址。当配置其转发表时，路由器使用NEXT-HOP属性。

*** R12 BGP策略

描述一个较高层ISP的网络管理员在配置BGP时是如何实现策略的。

一个一级ISP B可能不会在另外两个一级ISP（例如A和C）之间传输流量。为了执行这一政策，ISP B不会向A通告经过C的路线；也不会向C通过经过A的路线。

*** R13

是非判断题：当BGP路由器从它的邻居接收到一条通告的路径时，它必须对接收路径增加上它自己的标识，然后向其所有邻居发送该新路径。解释理由。

错误。AS将其ASN加入AS-PATH中的现有列表并发送给邻居意味着该AS向外宣告有一条经过自己的路径。是否这么做取决于AS想实现怎样的BGP策略。

*** R14

描述在SDN控制器中的通信层、网络范围状态管理层和网络控制应用程序层的主要任务。

1. 传送控制器与交换机、主机或其他设备之间的信息。
2. 维护网络范围状态信息。
3. 使用由SDN控制器提供的API来定义和控制网络设备中的数据平面。

*** R15

假定你要在SDN控制平面中实现一个新型路由选择协议。你将在哪个层次中实现该协议？解释理由。

SDN网络控制应用程序层，因为这一层里的路由选择网络控制应用程序可以决定源和目的地之间的端到端路径。

*** R16

什么类型的报文流跨越SDN控制器的北向和南向API？谁是从控制器跨越南向接口发送的这些报文的接收者？谁是跨越北向接口从控制器发送的这些报文的接收者？

+ What types of messages flow across an SDN controller’s northbound and southbound APIs?

  网络控制应用程序与控制器交互的报文通过北向API；受控交换机与控制器交互的报文通过南向API。

+ Who is the recipient of these messages sent from the controller across the southbound interface, and who sends messages to the controller across the northbound interface?

  受控交换机；网络控制应用程序。

*** R17

描述两种从受控设备到控制器发送的OpenFlow报文类型的目的。描述两种从控制器到受控设备发送的OpenFlow报文类型的目的。

p.268

*** R18

在OpenDaylight SDN控制器中服务抽象层的目的是什么？

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:570px;
[[file:img/fig5-17.png]]

服务抽象层允许内部网络服务应用程序相互通信。它允许控制器组件和应用程序互相调用对方的服务，并订阅它们产生的事件。该层还为通信层的具体底层通信协议提供统一的抽象接口，包括OpenFlow和SNMP。

*** R19

列举4种不同类型的ICMP报文。

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:476px;
[[file:img/fig5-19.png]]

*** R20

在发送主机执行Traceroute程序，收到哪两种类型的ICMP报文？

目的地之前的路由器发送的TTL过期（11,0）和目的主机发送的目的端口不可达（3,3）。

*** R21

在SNMP环境中定义下列术语：管理服务器、被管设备、网络管理代理和MIB。

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:600px;
[[file:img/fig5-20.png]]

管理服务器是一个应用程序，它运行在网络运营中心的集中式网络管理工作站上。管理服务器是执行网络管理活动的地方，它控制网络管理信息的收集、处理、分析和显示。

被管设备是网络装备的一部分（包括它的软件），位于被管理的网络中。

网络管理代理是运行在被管设备中的一个进程，该进程与管理服务器通信，在管理服务器的命令和控制下在被管设备中采取本地动作。

管理信息库 (Management Information Base, MIB) 收集被管设备中的每个被管对象的关联信

*** R22 SNMP报文

SNMP GetRequest和SetRequest报文的目的是什么？

请求或设置位于被管设备中的一个或多个MIB对象的值。

*** R23

SNMP陷阱报文的目的是什么？

通知管理服务器，一个异常情况已经导致了MIB对象值的改变。

** 习题
*** P1 图中的路径

观察图5-3，列举从y到u不包含任何环路的路径。

#+ATTR_ORG: :width 300
#+ATTR_HTML: :style width:100%; max-width:300px;
[[file:img/fig5-3.png]]

#+begin_src plantuml :file img/ch5-p1.svg :cmdline -charset utf-8
  @startmindmap
  ,* y
  ,** w
  ,*** v
  ,**** u
  ,**** x
  ,***** u
  ,*** x
  ,**** v
  ,***** u
  ,**** u
  ,*** u
  ,** x
  ,*** v
  ,**** u
  ,*** u
  ,*** w
  ,**** v
  ,***** u
  ,**** u
  ,** z
  ,*** w
  ,**** v
  ,***** u
  ,***** x
  ,****** u
  ,**** x
  ,***** u
  ,***** v
  ,****** u
  ,**** u
  @endmindmap
#+end_src

#+ATTR_ORG: :width 200
#+ATTR_HTML: :style width:100%; max-width:350px;
#+RESULTS:
[[file:img/ch5-p1.svg]]

*** P2

重复习题P1，列举从x到z、z到u以及z到w的不包含任何环路的路径。

x到z:

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:600px;
[[file:img/ch5-p2.png]]

*** P3 Dijkstra最短路算法

考虑下面的网络。对于标明的链路开销，用Dijkstra的最短路算法计算出从x到所有网络节点的最短路径。通过计算一个类似于表5-1的表，说明该算法是如何工作的。

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:280px;
[[file:img/ch5-p3.png]]

| N'            | D(y),p(y) | D(z),p(z) | D(u),p(u) | D(v),p(v) | D(w),p(w) | D(t),p(t) |
|---------------+-----------+-----------+-----------+-----------+-----------+-----------|
| x             | 6,x       | 8,x       | ∞         | 3,x       | 6,x       | ∞         |
| x,v           | 6,x       | 8,x       | 6,v       |           | 6,x       | 7,v       |
| x,v,w         | 6,x       | 8,x       | 6,v       |           |           | 7,v       |
| x,v,w,u       | 6,x       | 8,x       |           |           |           | 7,v       |
| x,v,w,u,y     |           | 8,x       |           |           |           | 7,v       |
| x,v,w,u,y,t   |           | 8,x       |           |           |           |           |
| x,v,w,u,y,t,z |           |           |           |           |           |           |

*** P4

考虑习题P3中所示的网络。使用Dijkstra算法和一个类似于表5-1的表来说明你做的工作：

a. 计算出从t到所有网络节点的最短路径。
b. 计算出从u到所有网络节点的最短路径。
c. 计算出从v到所有网络节点的最短路径。
d. 计算出从w到所有网络节点的最短路径。
e. 计算出从y到所有网络节点的最短路径。
f. 计算出从z到所有网络节点的最短路径。


a. \-

   | N'            | D(x),p(x) | D(y),p(y) | D(z),p(z) | D(u),p(u) | D(v),p(v) | D(w),p(w) |
   |---------------+-----------+-----------+-----------+-----------+-----------+-----------|
   | t             | ∞         | 7,t       | ∞         | 2,t       | 4,t       | ∞         |
   | t,u           | ∞         | 7,t       | ∞         |           | 4,t       | 5,u       |
   | t,u,v         | 7,v       | 7,t       | ∞         |           |           | 5,u       |
   | t,u,v,w       | 7,v       | 7,t       | ∞         |           |           |           |
   | t,u,v,w,y     | 7,v       |           | 19,y      |           |           |           |
   | t,u,v,w,y,v   |           |           | 19,y      |           |           |           |
   | t,u,v,w,y,v,z |           |           |           |           |           |           |

*** P5 距离向量算法

考虑下图所示的网络，假设每个节点初始时知道到它的每个邻居的开销。考虑距离向量算法，并显示在节点z中的距离表表项。

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:240px;
[[file:img/ch5-p5.png]]

单元中如果有两项，前一项表示节点收到的距离向量，后一项是计算后更新的距离。

迭代1：计算初始距离向量，然后交换接收

|   | x | y | z | u | v |
| x | 0 | 3 | 2 | 4 | 3 |
| y | 3 | 0 | 5 | 2 | 3 |
| z | 2 | 5 | 0 | 7 | 5 |
| u | 4 | 2 | 7 | 0 | 1 |
| v | 3 | 3 | 5 | 1 | 0 |

迭代2：

|   |   x |   y | z   |   u |   v |
| x |   0 |   3 | 2   | ∞,4 |   3 |
| y |   3 |   0 | ∞,5 |   2 | ∞,3 |
| z |   2 | ∞,5 | 0   | ∞,7 | 6,5 |
| u | ∞,4 |   2 | ∞,7 |   0 |   1 |
| v |   3 | ∞,3 | 6,5 |   1 |   0 |

迭代3：

|   | x | y |   z |   u | v |
| x | 0 | 3 |   2 |   4 | 3 |
| y | 3 | 0 |   5 |   2 | 3 |
| z | 2 | 5 |   0 | 7,6 | 5 |
| u | 4 | 2 | 7,6 |   0 | 1 |
| v | 3 | 3 |   5 |   1 | 0 |

*** P6 距离向量算法收敛所需的迭代次数

考虑一个一般性拓扑（即不是以上所显示的特定网络）和一个同步版本的距离向量算法。假设每次迭代时，一个节点与其邻居交换其距离向量并接收它们的距离向量。假定算法开始时，每个节点只知道到其直接邻居的开销，在该分布式算法收敛前所需的最大迭代次数是多少？评估你的答案。

在每一次迭代中，一个节点与它的邻居交换距离表。因此，如果你是节点A，而你的邻居是B，B的所有邻居在一次迭代后将知道到你的一跳或两跳的最低开销路径。

设d为网络的直径——网络中任何两个节点之间无循环的最长路径的长度。利用上述推理，经过d-1次迭代，所有节点都将知道到所有其他节点的最短路径开销为d或更少的跳数。由于任何大于d跳的路径都会有环路，该算法将在最多d-1次迭代后收敛。

*** P7

考虑下图所示的网络段。x只有两个相连邻居w与y。w有一条通向目的地u（没有显示）的最低开销路径，其值为5，y有一条通向目的地u的最低开销路径，其值为6。从w与y到u（以及w与y之间）的完整路径未显示出来。网络中所有链路开销皆为正整数值。

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:230px;
[[file:img/ch5-p7.png]]

a. 给出x对目的地w、y和u的距离向量。
b. 给出对于c(x,w)或c(x,y)的链路开销的变化，使得执行了距离向量算法后，x将通知其邻居有一条通向u的新最低开销路径。
c. 给出对c(x,w)或c(x,y)的链路开销的变化，使得执行了距离向拭算法后，x将不通知其邻居有一条通向x的新最低开销路径。


a. \-

   |   | x | w | y | u |
   | x | 0 | 2 | 5 | ∞ |
   | w | 2 | 0 | 2 | 5 |
   | y | 5 | 2 | 0 | 6 |
   | u | ∞ | 5 | 6 | 0 |

   |   |   x | w | y |   u |
   | x |   0 | 2 | 5 | ∞,7 |
   | w |   2 | 0 | 2 |   5 |
   | y |   5 | 2 | 0 |   6 |
   | u | ∞,7 | 5 | 6 |   0 |

b. Dx(U) = min{Dy(U)+c(x,y), Dw(U)+c(x,w)}

   c(x,w)或c(x,y)的链路开销变化以后如果影响上式就会使得x计算出新的到u的最低开销路径。

c. 同上。

*** P8

考虑如图5-6中所示3个节点的拓扑。不使用显示在图5-6中的开销值，链路开销值现在是c(x,y)=3，c(y,z)=6，c(z,x)=4。在距离向量表初始化后和在同步版本的距离向量算法每次迭代后，计算它的距离向量表（如我们以前对图5-6讨论时所做的那样）。

#+begin_example
      y
     / \
  3 /   \ 6
   /  4  \
  x-------z
#+end_example

|   | x | y | z |
| x | 0 | 3 | 4 |
| y | 3 | 0 | 6 |
| z | 4 | 6 | 0 |

*** P9 无穷计数与链路开销减小

+ 考虑距离向量路由选择中的无穷计数问题。如果我们减小一条链路的开销，将会出现无穷计数问题吗？

  不会。

+ 为什么？

  因为链路开销减小不会造成环路。

+ 如果我们将没有链路的两个节点连接起来，会出现什么情况？

  将没有链路的两个节点连接起来，相当于将链路开销从无限大减少到有限大。

*** P10 距离向量算法的收敛性

讨论图5-6中的距离向量算法，距离向量D(x)中的每个值不是递增的并且最终将在有限步中稳定下来。

在每一次迭代中，节点基于Bellman-Ford方程更新（减少）距离向量中的一些值，在这一过程中没有数值的增加。如果没有更新，那么就不会有消息被发送出去。因此，D(x)是非递增的。由于这些路径的开销是有限的，那么最终距离向量将在有限的步骤中得到稳定。

*** P11 距离向量算法的计算过程

考虑图5-7。假定有另一台路由器w，与路由器y和z连接。所有链路的开销给定如下：c(x,y)=4, c(x,z)=50, c(y,w)=1, c(z,w)=1, c(y,z)=3。假设在距离向量路由选择算法中使用了毒性逆转。

#+begin_example
      y
     /|\
   4/ | \1
   /  |  \
  x   |3  w
   \  |  /
  50\ | / 1
     \|/
      z
#+end_example

a. 当距离向量路由选择稳定时，路由器w、y和z向x通知它们之间的距离。它们告诉彼此什么样的距离值？
b. 现在假设x和y之间的链路开销增加到60。如果使用了毒性逆转，将会存在无穷计数问题吗？为什么？如果存在无穷计数问题，距离向量路由选择需要多少次迭代才能再次到达稳定状态？评估你的答案。
c. 如果c(y,x)从4变化到60，怎样修改c(y,z)使得不存在无穷计数问题。


a. \-

b. \-

   #+begin_example
         y
        /|\
     60/ | \1
      /  |  \
     x   |3  w
      \  |  /
     50\ | / 1
        \|/
         z
   #+end_example

   [[file:img/ch5-p11.pdf]]

c. 去掉y与z之间的链路。

*** P12

描述在BGP中是如何检测路径中的环路的。

BGP路由器使用AS-PATH属性来检测和防止通告环路。如果一台路由器在路径列表中看到包含了它自己的AS，它将拒绝该通告。

*** P13

BGP路由器将总是选择具有最短AS路径长度的无环路由吗？评估你的答案。

不一定，在BGP的路由选择算法中本地偏好规则的优先级高于最短AS-PATH。

*** P14 eBGP和iBGP

考虑下图所示的网络。假定AS3和AS2正在运行OSPF作为其AS内部路由选择协议。假定AS1和AS4正在运行RIP作为其AS内部路由选择协议。假定AS间路由选择协议使用的是eBGP和iBGP。假定最初在AS2和AS4之间不存在物理链路。

a. 路由器3c从下列哪个路由选择协议学习到了前缀x: OSPF、RIP、eBGP或iBGP？
b. 路由器3a从哪个路由选择协议学习到了前缀x？
c. 路由器1c从哪个路由选择协议学习到了前缀x？
d. 路由器1d从哪个路由选择协议学习到了前缀x？


#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:470px;
[[file:img/ch5-p14.png]]

a. eBGP
b. iBGP
c. eBGP
d. iBGP

*** P15

参考前面习题P14，一旦路由器1d知道了x的情况，它将一个表项(x, I)放入它的转发表中。

a. 对这个表项而言，I将等于I_{1}还是I_{2}？用一句话解释其原因。
b. 现在假定在AS2和AS4之间有一条物理链路，显示为图中的虚线。假定路由器1d知道经AS2以及经AS3能够访问到x。I将设登为I_{1}还是I_{2}？用一句话解释其原因。
c. 现在假定有另一个AS，它称为AS5，其位于路径AS2和AS4之间（没有显示在图中）。假定路由器1d知道经AS2 AS5 AS4以及经过AS3 AS4能够访问到x。I将设置为I_{1}还是I_{2}？用一句话解释其原因。


a. I_{1}，因为这是到网关1c的最低开销路径。
b. I_{2}，根据热土豆算法选择网关1b。
c. I_{1}，根据最短AS-PATH。

*** P16

考虑下面的网络。ISP B为地区ISP A提供国家级主干服务。ISP C为地区ISP D提供国家级主干服务。每个ISP由一个AS组成。B和C使用BGP，在两个地方互相对等。考虑从A到D的流量。B愿意将流量交给C传给西海岸（使得C将承载跨越整个国家的流量开销），而C愿意经其东海
岸与B对等的站点得到这些流量（使得B将承载跨越整个国家的流量）。C可能会使用什么样的BGP机制，使得B将通过东海岸对等点传递A到D的流量？要回答这个问题，你需要钻研BGP规范。

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:320px;
[[file:img/ch5-p16.png]]

C只通告通过东海岸的对等点到D的路径。

*** P17

在图5-13中，考虑到达桩网络W、X和Y的路径信息。基于W与X处的可用信息，它们分别看到的网络拓扑是什么？评估你的答案。Y所见的拓扑视图如下图所示。

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:340px;
[[file:img/fig5-13.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:340px;
[[file:img/ch5-p17.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:270px;
[[file:img/ch5-p17a.png]]

*** P18 P2P与BGP

考虑图5-13。B将不会基于BGP路由选择，经过X以Y为目的地转发流量。但是有某些极为流行的应用程序，其数据分组先朝向X，然后再流向Y。指出一种这样的应用程序，描述数据分组是如何沿着这条未由BGP路由选择所给定的路径流动的。

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:340px;
[[file:img/fig5-13.png]]

#+begin_quote
BitTorrent file sharing and Skype P2P applications.

Consider a BitTorrent file sharing network in which peer 1, 2, and 3 are in stub networks W, X, and Y respectively. Due the mechanism of BitTorrent’s file sharing, it is quire possible that peer 2 gets data chunks from peer 1 and then forwards those data chunks to 3. This is equivalent to B forwarding data that is finally destined to stub network Y.
#+end_quote

*** P19

在图5-13中，假定有另一个桩网络V，它为ISP A的客户。假设B和C具有对等关系，并且A是B和C的客户。假设A希望让发向W的流量仅来自B，并且发向V的流量来自B或C。A如何向B和C通告其路由？C收到什么样的AS路由？

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:250px;
[[file:img/ch5-p19.png]]

A向B通告：AW、AV
A向C通告：AV
C收到的AS路由：AV、BAV、BAW

*** P20 BGP通告与策略

假定AS X和Z不直接连接，但与AS Y连接。进一步假定X与Y具有对等协定，Y与Z具有对等协定。最后，假定Z要传送所有Y的流量但不传送X的流量。BGP允许Z实现这种策略吗？

Z如果要传送Y的流量，那么就要向其通告，这样Y可以选择Z这条路径传送分组。在这之后Y可以将通过Z的路由信息通告给X，Z对Y的这种行为是无能为力的。

*** P21 SNMP的请求响应和陷阱方式

考虑在管理实体和被管设备之间发生通信的两种方式：请求响应方式和陷阱方式。从以下方面考虑这两种方式的优缺点：①开销；②当异常事件出现时通知的时间；③对于管理实体和设备之间丢失报文的健壮性。

以交换报文的数量来衡量，请求响应方式通常需要更多的开销。首先，管理实体接收一条信息发送需要两个报文：请求和回答。陷阱方式只发送一个报文。更进一步，管理实体如果需要知道某一个特定事件是否发生，需要一直向被管设备发送请求来询问。而陷阱方式只需要在发生事件时发送一条报文。

陷阱方式会在事件发生时立即通知管理实体。而通过轮询方式，管理实体需要在事件发生和管理实体发现事件发生之间等待半个轮询周期（平均）。

如果一个陷阱消息丢失了，被管设备将不会再发送一个副本。如果一个请求信息或其响应丢失，管理实体可以在有需要的情况下重新发送请求。

*** P22 SNMP选择UDP而不是TCP

在5.7节中我们看到，用不可靠的UDP数据报传输SNMP报文是更可取的方式。请考虑SNMP设计者选择UDP而不是TCP作为SNMP运输协议的理由。

TCP相较于UDP提供了差错控制、报文按序和拥塞控制功能，但是要需要额外的开销。

不需要差错控制，是因为每个请求都会产生一个响应。如果SNMP应用程序没有收到响应，它会重新发出请求。

不需要报文按序，是因为每个请求和每个响应都作为一个单一的数据报传输。

不需要拥塞控制，是因为最需要网络管理的时候通常是在网络压力大的时候，这时网络可能严重拥堵、丢包。如果SNMP在TCP上运行，TCP的拥堵控制会导致SNMP发送速率受限，在网络管理员需要发送SNMP信息的时候停止发送信息。

参考：

[[http://web.deu.edu.tr/doc/oreily/networking/tcpip/ch11_09.htm][TCP/IP Network Administration]]
[[https://datatracker.ietf.org/doc/html/rfc1448#section-2.6][RFC1448#Transport Mappings]]

** 套接字编程作业 ICMP ping

[[file:code/ch5-icmp-ping/socket5-icmppinger.pdf][Socket Programming Assignment 5: ICMP Pinger]]

#+INCLUDE: "code/ch5-icmp-ping/ping.py" src python

** 编程作业 分布式异步距离向量路由选择算法

[[http://lass.cs.umass.edu/~shenoy/courses/spring00/653/homeworks/prog1.html][Implemented a distributed, asynchronous distance vector routing algorithm]]

*** Basic

关键代码如下：

#+CAPTION: node.c
#+INCLUDE: "code/ch5-distance-vector/basic/node.c" src c :lines "19-111"

#+CAPTION: node0.c
#+INCLUDE: "code/ch5-distance-vector/basic/node0.c" src c :lines "4-19"

下面的输出展示了节点3收到节点0的distance vector后更新自己的distance table，然后向邻居发送的过程：

#+CAPTION: a.txt
#+INCLUDE: "code/ch5-distance-vector/basic/a.txt" src shell :lines "31-67"

最终的路由表如下所示：

#+INCLUDE: "code/ch5-distance-vector/basic/a.txt" src shell :lines "512-519"

总共发送了32个报文完成了计算。

#+INCLUDE: "code/ch5-distance-vector/basic/a.txt" src shell :lines "734-737"

*** Advanced

#+CAPTION: node.c
#+INCLUDE: "code/ch5-distance-vector/advanced/node.c" src c :lines "75-118"

#+CAPTION: node.c
#+INCLUDE: "code/ch5-distance-vector/advanced/node.c" src c :lines "153-166"

最终结果：

#+CAPTION: a.txt
#+INCLUDE: "code/ch5-distance-vector/advanced/a.txt" src shell :lines "1982-2018"

** Wireshark实验：ICMP

[[file:code/ch5-ws-icmp/wireshark-icmp-v7.0.pdf][Wireshark Lab: ICMP v7.0]]
*** ICMP and Ping

#+INCLUDE: code/ch5-ws-icmp/1.txt src c

1. What is the IP address of your host? What is the IP address of the destination host?
   192.168.8.100 143.89.12.134

2. Why is it that an ICMP packet does not have source and destination port numbers?

   #+begin_quote
   The ICMP packet does not have source and destination port numbers because it was designed to communicate network-layer information between hosts and routers, not between application layer processes.

   Each ICMP packet has a "Type" and a "Code". The Type/Code combination identifies the specific message being received. Since the network software itself interprets all ICMP messages, no port numbers are needed to direct the ICMP message to an application layer process.

   -- [[https://www.howtouselinux.com/post/icmp-port-number][Exploring ICMP Port Number with Example]]
   #+end_quote

3. Examine one of the ping request packets sent by your host.

   + What are the ICMP type and code numbers?

     Type: 8 (Echo (ping) request)
     Code: 0

   + What other fields does this ICMP packet have?

     Checksum: 0xb065 [correct]
     Identifier (BE): 29997 (0x752d)
     Identifier (LE): 11637 (0x2d75)
     Sequence Number (BE): 0 (0x0000)
     Sequence Number (LE): 0 (0x0000)
     Timestamp from icmp data: Nov 26, 2021 10:05:36.214230000 CST

     [[https://osqa-ask.wireshark.org/questions/3172/icmp-sequence-number-be-vs-le/][ICMP Sequence Number (BE) vs (LE)]]

   + How many bytes are the checksum, sequence number and identifier fields?

     2, 2, 2.

4. Examine the corresponding ping reply packet.

   + What are the ICMP type and code numbers?

     Type: 0 (Echo (ping) reply)
     Code: 0

   + What other fields does this ICMP packet have?

     Checksum: 0xb865 [correct]
     Identifier (BE): 29997 (0x752d)
     Identifier (LE): 11637 (0x2d75)
     Sequence Number (BE): 0 (0x0000)
     Sequence Number (LE): 0 (0x0000)
     Timestamp from icmp data: Nov 26, 2021 10:05:36.214230000 CST

   + How many bytes are the checksum, sequence number and identifier fields?

     2, 2, 2.

*** ICMP and Traceroute

#+INCLUDE: code/ch5-ws-icmp/5.txt src c

5. [@5]What is the IP address of your host? What is the IP address of the target destination host?

   192.168.8.100 128.93.162.83

6. If ICMP sent UDP packets instead (as in Unix/Linux), would the IP protocol number still be 01 for the probe packets? If not, what would it be?

   #+INCLUDE: code/ch5-ws-icmp/6.txt src c

   从33435开始递增。

   #+begin_quote
   On a typical *nix system it uses UDP and sends traffic to port 33434 by default.
   -- [[https://www.redhat.com/sysadmin/ping-traceroute-netstat][Ping, traceroute, and netstat]]
   #+end_quote

7. Examine the ICMP echo packet in your screenshot. Is this different from the ICMP ping query packets in the first half of this lab? If yes, how so?

   traceroute发送的ICMP echo与ping的区别：
   1. 没有包含发送的时间戳。
   2. Sequence Number不再是0。
   3. Data没有包含数据（全是0）。

8. Examine the ICMP error packet in your screenshot. It has more fields than the ICMP echo packet. What is included in those fields?

   #+INCLUDE: code/ch5-ws-icmp/8.txt src c

   包含了导致ICMP error报文的IP首部和ICMP报文。

9. Examine the last three ICMP packets received by the source host. How are these packets different from the ICMP error packets? Why are they different?

   #+INCLUDE: code/ch5-ws-icmp/9.txt src c

   ICMP error的Type和Code是11、0（TTL过期），最后源主机收到的ICMP报文的Type和Code是0、0（回显回答）。

10. Within the tracert measurements, is there a link whose delay is significantly longer than others? Refer to the screenshot in Figure 4, is there a link whose delay is significantly longer than others? On the basis of the router names, can you guess the location of the two routers on the end of this link?

    第10跳的时延显著增大。
    奥贝维埃（法语：Aubervilliers）是法国法兰西岛大区塞纳-圣但尼省的一个镇，位于巴黎郊区。
    巴尼奥莱（法语：Bagnolet）是法国法兰西岛大区塞纳-圣但尼省的一个市镇。

*** Extra Credit

This ping program, unlike the standard ping program, sends UDP probe packets rather than ICMP probe packets.

#+INCLUDE: code/ch5-ws-icmp/ec.txt src c

第一个 UDP 报文从端口 54265 发往端口 12000，载荷是自定义的 ping 消息 “Ping 03 13:54:31.197064”。接收到的 UDP 报文回显了发送过去的消息。

** Wireshark 实验：DHCP

[[file:code/ch5-ws-dhcp/wireshark-dhcp-v7.0.pdf][Wireshark Lab: DHCP v7.0]]

macOS 对应实验中 Windows 系统的操作是（在设置→网络，每一步需要点击应用保存修改）：

1. 配置 IPv4: 关闭
2. Begin Wireshark packet capture.
3. 配置 IPv4: 使用 DHCP
4. 高级 → DHCP 续租
5. 配置 IPv4: 关闭
6. 配置 IPv4: 使用 DHCP
7. Stop Wireshark packet capture.


实验中提供的[[file:code/ch5-ws-dhcp/dhcp-ethereal-trace-1][trace]]，实验得到的[[file:code/ch5-ws-dhcp/dhcp.pcapng][trace]]。


1. Are DHCP messages sent over UDP or TCP?

   UDP

   #+ATTR_ORG: :width 350
   #+ATTR_HTML: :style width:100%; max-width:900px;
   [[file:img/ch5-ws-dhcp-1.png]]

2. \-

   #+INCLUDE: code/ch5-ws-dhcp/2.txt src shell

   + Draw a timing datagram illustrating the sequence of the first four-packet Discover/Offer/Request/ACK DHCP exchange between the client and server. For each packet, indicated the source and destination port numbers.

     #+ATTR_ORG: :width 350
     #+ATTR_HTML: :style width:100%; max-width:540px;
     [[file:img/ch5-ws-dhcp-2.png]]

   + Are the port numbers the same as in the example given in this lab assignment?

     相同

3. What is the link-layer (e.g., Ethernet) address of your host?

   Client MAC address: HuaweiTe_1f:00:00 (00:1e:10:1f:00:00)

4. What values in the DHCP discover message differentiate this message from the DHCP request message?

   Option: (53) DHCP Message Type

   这两种消息不同的字段如下：

   |                                     | discover |       request |
   |-------------------------------------+----------+---------------|
   | Seconds elapsed                     | 0        |             1 |
   | Option: (53) DHCP Message Type      | Discover |       Request |
   | Option: (51) IP Address Lease Time  | 90 days  |             / |
   | Option: (50) Requested IP Address   | /        | 192.168.8.120 |
   | Option: (54) DHCP Server Identifier | /        |   192.168.8.1 |

5. \-
   + What is the value of the Transaction-ID in each of the first four (Discover/Offer/Request/ACK) DHCP messages?

     Transaction ID: 0x2bacfd62

   + What are the values of the Transaction-ID in the second set (Request/ACK) set of DHCP messages?

     Transaction ID: 0x2bacfd63

   + What is the purpose of the Transaction-ID field?

     Transaction ID, a random number chosen by the client, used by the client and server to associate messages and responses between a client and a server.

6. A host uses DHCP to obtain an IP address, among other things. But a host’s IP address is not confirmed until the end of the four-message exchange! If the IP address is not set until the end of the four-message exchange, then what values are used in the IP datagrams in the four-message exchange? For each of the four DHCP messages (Discover/Offer/Request/ACK DHCP), indicate the source and destination IP addresses that are carried in the encapsulating IP datagram.

   |          |         Src |             Dst |
   |----------+-------------+-----------------|
   | Discover |     0.0.0.0 | 255.255.255.255 |
   | Offer    | 192.168.8.1 |   192.168.8.120 |
   | Request  |     0.0.0.0 | 255.255.255.255 |
   | ACK      | 192.168.8.1 |   192.168.8.120 |

7. What is the IP address of your DHCP server?

   192.168.8.1

8. What IP address is the DHCP server offering to your host in the DHCP Offer message? Indicate which DHCP message contains the offered DHCP address.

   Your (client) IP address: 192.168.8.120

9. In the example screenshot in this assignment, there is no relay agent between the host and the DHCP server. What values in the trace indicate the absence of a relay agent? Is there a relay agent in your experiment? If so what is the IP address of the agent?

   Relay agent IP address: 0.0.0.0

10. Explain the purpose of the router and subnet mask lines in the DHCP offer message.

    The subnet mask line tells the client which subnet mask to use.

    The router line indicates where the client should send messages by default.

11. In the DHCP trace file noted in footnote 2, the DHCP server offers a specific IP address to the client (see also question 8. above). In the client’s response to the first server OFFER message, does the client accept this IP address? Where in the client’s RESPONSE is the client’s requested address?

    Yes.
    Option: (50) Requested IP Address (192.168.1.101)

12. Explain the purpose of the lease time. How long is the lease time in your experiment?

    This option is used in a client request (DHCPDISCOVER or DHCPREQUEST) to allow the client to request a lease time for the IP address.  In a server reply (DHCPOFFER), a DHCP server uses this option to specify the lease time it is willing to offer.

    Option: (51) IP Address Lease Time
      Length: 4
      IP Address Lease Time: (86400s) 1 day

13. What is the purpose of the DHCP release message? Does the DHCP server issue an acknowledgment of receipt of the client’s DHCP request? What would happen if the client’s DHCP release message is lost?

    If the client no longer requires use of its assigned network address (e.g., the client is gracefully shut down), the client sends a DHCPRELEASE message to the server.

14. Clear the bootp filter from your Wireshark window. Were any ARP packets sent or received during the DHCP packet-exchange period? If so, explain the purpose of those ARP packets.

    The client collects DHCPOFFER messages over a period of time, selects one DHCPOFFER message from the incoming DHCPOFFER messages.

    The client may perform a check on the suggested address to ensure that the address is not already in use.

    For example, if the client is on a network that supports ARP, the client may issue an ARP request for the suggested request.  When broadcasting an ARP request for the suggested address, the client must fill in its own hardware address as the sender's hardware address, and 0 as the sender's IP address, to avoid confusing ARP caches in other hosts on the same subnet.

    Once the DHCPACK message from the server arrives, the client is initialized and moves to BOUND state. The client SHOULD broadcast an ARP reply to announce the client's new IP address and clear any outdated ARP cache entries in hosts on the client's subnet.

    #+ATTR_ORG: :width 350
    #+ATTR_HTML: :style width:100%; max-width:900px;
    [[file:img/ch5-ws-dhcp-14.png]]

* 链路层和局域网
** 笔记

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:700px;
[[file:img/fig6-12.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:620px;
[[file:img/fig6-15.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:440px;
[[file:img/fig6-17.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:700px;
[[file:img/fig6-19.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:540px;
[[file:img/fig6-24.png]]

#+ATTR_ORG: :width 350
#+ATTR_HTML: :style width:100%; max-width:490px;
[[file:img/fig6-30.png]]

** 复习题
*** R1
考虑在 6.1 节（p.286）中的运输类比。如果一个乘客类比为一个数据报，什么类比于链路层帧？

乘客和乘客乘乘坐的交通工具（轿车、飞机、火车）一起构成一个链路层帧。

*** R2 链路层的可靠交付服务与TCP可靠传输服务
如果在因特网中的所有链路都提供可靠的交付服务，TCP 可靠传输服务将是多余的吗？为什么？

TCP 可靠传输服务确保传输数据比特不会收到损坏或丢失，且按序交付。而链路层提供的可靠交付服务是面向链路层帧的，这就不能保证数据按序交付。此外，由于路由环路或设备故障，IP 可能会丢失数据包。所以 TCP 可靠传输服务不是多余的。
